<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>https://qianchenglong.github.io/2016/08/17/git/</url>
      <content type="html"><![CDATA[<h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><ul>
<li><p>从一个现有仓储建立纯仓库</p>
<pre><code>git clone --bare ssh://git@github.com:22/QianChenglong/home.git home.git
</code></pre></li>
<li><p>从.git目录复制<a href="https://git.wiki.kernel.org/index.php/GitFaq#How_do_I_make_existing_non-bare_repository_bare.3F" target="_blank" rel="external">https://git.wiki.kernel.org/index.php/GitFaq#How_do_I_make_existing_non-bare_repository_bare.3F</a></p>
<pre><code>scp -rv .git dev2:~/git/Beme4wdServer.git
cd Beme4wdServer.git/
git config --bool core.bare true
</code></pre></li>
<li><p>修改远程URL</p>
<pre><code>git remote set-url origin ssh://wallace@dev2:36000/~/git/home.git
</code></pre></li>
<li><p>查看远程信息</p>
<pre><code>git remote -v
git remote show origin
</code></pre></li>
<li><p>从远程仓库取数据，不合并分支</p>
<pre><code>git fetch [remote-name]
</code></pre></li>
<li><p>push所有分支和tag，并跟踪</p>
<pre><code>git push --all origin -u
</code></pre></li>
</ul>
<h1 id="update-index"><a href="#update-index" class="headerlink" title="update-index"></a>update-index</h1><ul>
<li><p>添加可执行权限</p>
<pre><code>git update-index --chmod=+x config_server
</code></pre></li>
<li><p>标识已纳入版本的文件不必跟踪变化</p>
<pre><code>git update-index --assume-unchanged &lt;files&gt;
git update-index --no-assume-unchanged &lt;files&gt;(撤销)
</code></pre></li>
</ul>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ul>
<li><p>查看所有分支</p>
<pre><code>git branch
</code></pre></li>
<li><p>查看分支详情，最后一次commit</p>
<pre><code>git branch -v
</code></pre></li>
<li><p>查看当前已经合并的分支</p>
<pre><code>git branch --merged
</code></pre></li>
<li><p>查看当前没有合并的分支</p>
<pre><code>git branch --no-merged
</code></pre></li>
<li><p>新建分支</p>
<pre><code>git branch testing
</code></pre></li>
<li><p>切换分支</p>
<pre><code>git checkout testing
</code></pre></li>
<li><p>新建分支并切换</p>
<pre><code>git checkout -b issue53
</code></pre></li>
<li><p>删除分支</p>
<pre><code>git branch -d hotfix
</code></pre></li>
<li><p>设置跟踪分支</p>
<pre><code>git branch --set-upstream-to=origin/master master
</code></pre></li>
</ul>
<h1 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h1><ul>
<li><p>添加模块</p>
<pre><code>git submodule add ssh://wallace@dev2.beme.com:36000/~/git/ssh.git .ssh
</code></pre></li>
<li><p>修改url</p>
<pre><code>vim .gitmodule
git submodule sync
</code></pre></li>
<li><p>初始化</p>
<pre><code>git submodule init
</code></pre></li>
<li><p>更新</p>
<pre><code>git submodule update
</code></pre></li>
</ul>
<h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><ul>
<li><p>重置暂存区</p>
<pre><code>git reset .
</code></pre></li>
<li><p>取消已经暂存的文件（git add逆操作）</p>
<pre><code>git reset HEAD &lt;file&gt;...
</code></pre></li>
<li><p>取消未暂存的修改</p>
<pre><code>git checkout -- &lt;file&gt;...
</code></pre></li>
<li><p>从版本库中删除，但保留工作目录里面的</p>
<pre><code>git rm --cached readme.txt
</code></pre></li>
</ul>
<h1 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h1><ul>
<li><p>查看当前版本与上一版本的差异</p>
<pre><code>git diff HEAD~1 HEAD functions/fish_prompt.fish
</code></pre></li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>同步home</p>
<pre><code>git init
git remote add origin ssh://wallace@112.74.81.30:36000/~/git/home.git
git fetch
git reset --hard origin/master
</code></pre></li>
<li><p>初始化并递归更新submodule</p>
<pre><code>git submodule update --init --recursive
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[firewalld]]></title>
      <url>https://qianchenglong.github.io/2016/06/02/firewalld/</url>
      <content type="html"><![CDATA[<ul>
<li><p>停止防火墙</p>
<p>systemctl stop firewalld.service</p>
</li>
<li><p>禁用防火墙</p>
<p>systemctl disable firewalld.service</p>
</li>
<li><p>放行端口</p>
<p>firewall-cmd –permanent –add-port=80/tcp<br>firewall-cmd –reload</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-时间片]]></title>
      <url>https://qianchenglong.github.io/2016/05/31/linux-%E6%97%B6%E9%97%B4%E7%89%87/</url>
      <content type="html"><![CDATA[<h1 id="查看时间片"><a href="#查看时间片" class="headerlink" title="查看时间片"></a>查看时间片</h1><pre><code>[I] ~/p/B/p/c/s/time cat /proc/sys/kernel/sched_latency_ns
12000000
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-static]]></title>
      <url>https://qianchenglong.github.io/2016/05/31/C++-static/</url>
      <content type="html"><![CDATA[<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><ol>
<li><p>全局作用域，声明或定义标识符(变量，函数)，语义是该符号为内部链接</p>
</li>
<li><p>类定义中，声明方法时，说明该方法为静态方法</p>
<ul>
<li>静态方法可以访问该类对象的私有成员和方法！</li>
</ul>
</li>
<li><p>类定义中，声明变量时，说明该变量为静态数据成员</p>
</li>
<li><p>函数定义中，说明该变量为静态变量，存储于<strong>数据段</strong></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-sring-resize-reserve]]></title>
      <url>https://qianchenglong.github.io/2016/05/30/C++-sring-resize-reserve/</url>
      <content type="html"><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul>
<li><p><code>resize</code>是调整string的size(length)，操作后，[0, n)都可访问</p>
<ul>
<li><p>若大于原有长度，则填充对应字符，默认<code>\0</code></p>
</li>
<li><p>若小于原有长度，则截断</p>
</li>
</ul>
</li>
<li><p><code>reserve</code>是预留空间，以便快速插入，操作后，元素仍保持原样</p>
<ul>
<li>当大于原有容量(capacity)，则引起重新分配过程</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-pointer-to-char]]></title>
      <url>https://qianchenglong.github.io/2016/05/28/C++-pointer-to-char/</url>
      <content type="html"><![CDATA[<h1 id="两层含义"><a href="#两层含义" class="headerlink" title="两层含义"></a>两层含义</h1><ul>
<li><p>C风格字符串(<code>\0</code>结尾)，当使用这种语义时，只需传入该值即可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_as_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字节数组(内容中可能包含<code>\0</code>)，当使用此种语义时，还需传入长度</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_as_hex</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, size_t len)</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-StringPiece]]></title>
      <url>https://qianchenglong.github.io/2016/05/28/C++-StringPiece/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li><p>很多时候，当传入一个字符串到函数时，往往只是读取字符串时</p>
</li>
<li><p>若使用<code>std::string</code>，当实参为<code>const char *</code>时，会<strong>分配内存并拷贝</strong>该字符串以生成一个<code>std::string</code></p>
</li>
<li><p>当一个函数接受一个<code>const std::string</code>，而在该函数内部，又需要传递该值到另一个函数，则又需要重新生成一个<code>std::string</code></p>
</li>
</ul>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul>
<li><p>当某个接口参数是接受字符串类型时，为了减少不必要的开销</p>
</li>
<li><p>该类型可以接受<code>const char *</code>，<code>std::string</code>，减少冗余代码编写</p>
</li>
</ul>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p><code>StringPiece(google), StringRef(llvm), string_ref(boost)</code>，本质名，<code>non-owning reference to a string</code></p>
</li>
<li><p>通过隐式转换，方便地从<code>const char*, std::string</code>转换到此类型</p>
</li>
<li><p>该类通过保存字符串指针和长度，来避免不必要的复制</p>
</li>
<li><p>只支持非修改操作</p>
</li>
<li><p>开销很低，只需要<code>sizeof(const char*) + sizeof(size_t)</code>字节</p>
</li>
<li><p>支持所有的类容器操作</p>
</li>
<li><p>因为<code>StringPiece</code>不拥有数据，所以确保在<code>StringPiece</code>生命期内，该数据可用</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3442.html" target="_blank" rel="external">N3442: string_ref: a non-owning reference to a string.</a></li>
<li><a href="http://www.boost.org/doc/libs/1_60_0/libs/utility/doc/html/string_ref.html" target="_blank" rel="external">http://www.boost.org/doc/libs/1_60_0/libs/utility/doc/html/string_ref.html</a></li>
<li><a href="http://stackoverflow.com/questions/2172726/are-there-any-reasons-why-the-stringpiece-stringref-idiom-is-not-more-popular" target="_blank" rel="external">http://stackoverflow.com/questions/2172726/are-there-any-reasons-why-the-stringpiece-stringref-idiom-is-not-more-popular</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-出现^M]]></title>
      <url>https://qianchenglong.github.io/2016/05/28/vim-%E5%87%BA%E7%8E%B0%5EM/</url>
      <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><ul>
<li><p>^M在vim中，是<code>CR(回车符，0x0d)</code>(<code>:help digraph</code>)</p>
</li>
<li><p>原因是该文件内容混合了<code>DOS</code>和<code>UNIX</code>格式，而vim识别为<code>unix</code>格式，则多余的换行符，就使用<code>^M</code>来显示</p>
</li>
</ul>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ul>
<li><p>使用vim</p>
<pre><code>:%s;\r;;g
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-文件打开模式-binary-VS-text]]></title>
      <url>https://qianchenglong.github.io/2016/05/28/C++-%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E6%A8%A1%E5%BC%8F-binary-VS-text/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li><p>在windows下，新建文件，默认文件格式为<code>dos</code></p>
</li>
<li><p>在Linux下，新建文件，默认文件格式为<code>unix</code></p>
</li>
</ul>
<h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><ul>
<li><p>在windows平台下</p>
<ul>
<li><p>输出时，<code>\n(0x0d)</code>=&gt;<code>\r\n(0x0d 0x0a)</code></p>
</li>
<li><p>输入时，<code>\r\n(0x0d 0x0a)</code>=&gt;<code>\n(0x0d)</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">ofstream <span class="title">ins</span><span class="params">(<span class="string">"test.txt"</span>)</span></span>; <span class="comment">// 默认`text`</span></span><br><span class="line"></span><br><span class="line">    ins &lt;&lt; <span class="string">"a\n"</span>;</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>linux</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[I] /m/s/T/file od -Ax -t x1 test.txt </span><br><span class="line">000000 61 0a</span><br><span class="line">000002</span><br><span class="line">[I] /m/s/T/file file test.txt</span><br><span class="line">test.txt: ASCII text</span><br></pre></td></tr></table></figure>
<ul>
<li>windows</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[I] /m/s/T/file od -Ax -t x1 test.txt </span><br><span class="line">000000 61 0d 0a</span><br><span class="line">000003</span><br><span class="line">[I] /m/s/T/file file test.txt</span><br><span class="line">test.txt: ASCII text, with CRLF line terminators</span><br></pre></td></tr></table></figure>
<h1 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h1><ul>
<li>不对文件内容做任何转换</li>
</ul>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">ofstream <span class="title">ins</span><span class="params">(<span class="string">"test.txt"</span>, <span class="built_in">std</span>::ios_base::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">    ins &lt;&lt; <span class="string">"a\n"</span>;</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>linux</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[I] /m/s/T/file od -Ax -t x1 test.txt </span><br><span class="line">000000 61 0a</span><br><span class="line">000002</span><br><span class="line">[I] /m/s/T/file file test.txt</span><br><span class="line">test.txt: ASCII text</span><br></pre></td></tr></table></figure>
<ul>
<li>windows</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[I] /m/s/T/file od -Ax -t x1 test.txt </span><br><span class="line">000000 61 0a</span><br><span class="line">000003</span><br><span class="line">[I] /m/s/T/file file test.txt</span><br><span class="line">test.txt: ASCII text</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++函数参数类型]]></title>
      <url>https://qianchenglong.github.io/2016/05/28/C++%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul>
<li><p>效率</p>
</li>
<li><p>可读性</p>
</li>
</ul>
<h1 id="基本类型-int-char-…"><a href="#基本类型-int-char-…" class="headerlink" title="基本类型(int, char, …)"></a>基本类型(<code>int</code>, <code>char</code>, …)</h1><ul>
<li><p>传入，则<code>pass by value</code></p>
</li>
<li><p>传入传出，则<code>pass by pointer</code></p>
</li>
</ul>
<h1 id="非基本类型"><a href="#非基本类型" class="headerlink" title="非基本类型"></a>非基本类型</h1><h2 id="使用指针"><a href="#使用指针" class="headerlink" title="使用指针"></a>使用指针</h2><ul>
<li><p>传出或传入传出参数，可以显式地知道该值会发生变化</p>
</li>
<li><p>当参数可以接受<code>NULL</code>值时(若只作为传入，最好加上<code>const</code>)</p>
</li>
<li><p>当返回一个新对象(<code>new</code>)的引用时，意味着，调用者需要释放该对象</p>
</li>
<li><p>当作为类数据成员时</p>
</li>
</ul>
<h2 id="使用引用"><a href="#使用引用" class="headerlink" title="使用引用"></a>使用引用</h2><ul>
<li>传入参数不可以为<code>NULL</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/270408/is-it-better-in-c-to-pass-by-value-or-pass-by-constant-reference" target="_blank" rel="external">http://stackoverflow.com/questions/270408/is-it-better-in-c-to-pass-by-value-or-pass-by-constant-reference</a></li>
<li><a href="http://stackoverflow.com/questions/7058339/when-to-use-references-vs-pointers" target="_blank" rel="external">http://stackoverflow.com/questions/7058339/when-to-use-references-vs-pointers</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rsa]]></title>
      <url>https://qianchenglong.github.io/2016/05/22/rsa/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p>RSA是一种块加密，一个具体的RSA算法对应一个N(模数)</p>
<p>块加密：</p>
<ul>
<li><p>密钥长度为工作长度</p>
</li>
<li><p>明文不足，则需填充(一般都有几种填充方式)</p>
</li>
<li><p>密文长度同密钥长度一致</p>
</li>
</ul>
</li>
<li><p>N(模数)的二进制位数，称之为RSA长度(对应openssl函数,<code>RSA_size(rsa)</code>)，常用1024(128B)，2048(256B)</p>
</li>
<li><p>openssl genrsa 采用<a href="https://tools.ietf.org/html/rfc5208" target="_blank" rel="external">PKCS#8</a>，使用<a href="https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail" target="_blank" rel="external">PEM</a>格式存储</p>
</li>
<li><p>公钥(N, E)</p>
</li>
<li><p>私钥(N, D)</p>
</li>
<li><p>RSA(1024)的D：3, 65537(0x10001)，当N值大于65537时，默认用65537!</p>
</li>
</ol>
<h1 id="RSA-ASN-1定义"><a href="#RSA-ASN-1定义" class="headerlink" title="RSA ASN.1定义"></a>RSA ASN.1定义</h1><h1 id="加密和签名"><a href="#加密和签名" class="headerlink" title="加密和签名"></a>加密和签名</h1><ol>
<li><p>加密：公钥用来加密，私钥解密，保证信息被唯一持有私钥的接收(（仅你可读但别人不可读，任何人都可写）)</p>
</li>
<li><p>签名：私钥用来加密，公钥解密，保证信息是由唯一持有私钥的发送（仅你可写但别人不可写，任何人都可读）</p>
</li>
</ol>
<h1 id="填充模式"><a href="#填充模式" class="headerlink" title="填充模式"></a>填充模式</h1><ol>
<li><p><code>RSA_PKCS1_PADDING</code> (最常用的模式)</p>
</li>
<li><p><code>RSA_PKCS1_OAEP_PADDING</code></p>
</li>
<li><p><code>RSA_NO_PADDING</code></p>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="external">RSA算法原理–阮一峰</a></li>
<li><a href="https://en.wikipedia.org/wiki/65537_(number)" target="_blank" rel="external">https://en.wikipedia.org/wiki/65537_(number)</a></li>
<li><a href="https://www.openssl.org/docs/manmaster/crypto/RSA_public_encrypt.html" target="_blank" rel="external">https://www.openssl.org/docs/manmaster/crypto/RSA_public_encrypt.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图片存储]]></title>
      <url>https://qianchenglong.github.io/2016/05/15/%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<ul>
<li>客户端采用BASE64编码图片</li>
</ul>
<h1 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h1><p>服务端直接存储到数据库，客户端查询回去自行解码</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li><p>服务器端实现简单</p>
</li>
<li><p>服务器端不需要依赖具体编码方式</p>
</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>相比二进制存储，多占用了33.3%空间</li>
</ul>
<h1 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h1><p>服务器解码后，存储二进制到数据库，客户端请求时再编码返回给客户端</p>
<h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ul>
<li>节省空间</li>
</ul>
<h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li><p>服务端多做工作，而且浪费时间</p>
</li>
<li><p>依赖客户端编码方式，可能会修改代码</p>
</li>
</ul>
<h1 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h1><p>服务器解码后，以文件形式存储到目录，客户端直接GET对应资源</p>
<h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><ul>
<li><p>无需存储到数据库</p>
</li>
<li><p>客户端实现简单</p>
</li>
</ul>
<h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>不安全，头像可能被直接访问到！</li>
<li>数据迁移麻烦，万一路径地址改变，资料丢失等</li>
</ul>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>采用方案1.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-cmd]]></title>
      <url>https://qianchenglong.github.io/2016/05/12/go-cmd/</url>
      <content type="html"><![CDATA[<h1 id="build"><a href="#build" class="headerlink" title="build"></a>build</h1><pre><code>usage: go build [-o output] [-i] [build flags] [packages]
</code></pre><p>编译指定包，以及其依赖</p>
<ul>
<li>如果是<code>main</code>包，则在当前目录下生成一个可执行文件</li>
</ul>
<h1 id="run"><a href="#run" class="headerlink" title="run"></a>run</h1><pre><code>usage: go run [build flags] [-exec xprog] gofiles... [arguments...]
</code></pre><p>编译并运行<code>main</code>包</p>
<ul>
<li>如果<code>main</code>包是由多个文件构成，则需要都指定！</li>
</ul>
<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><pre><code>usage: go test [-c] [-i] [build and test flags] [packages] [flags for test binary]
</code></pre><p>自动测试指定包</p>
<ul>
<li>默认情况，会编译当前目录包以及相应测试，并运行测试</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.3.md" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.3.md</a></li>
<li><a href="http://stackoverflow.com/questions/16935965/how-to-run-test-cases-in-a-specified-file" target="_blank" rel="external">http://stackoverflow.com/questions/16935965/how-to-run-test-cases-in-a-specified-file</a></li>
<li><a href="http://stackoverflow.com/questions/19998250/proper-package-naming-for-testing-in-go-lang" target="_blank" rel="external">http://stackoverflow.com/questions/19998250/proper-package-naming-for-testing-in-go-lang</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[backtrace()]]></title>
      <url>https://qianchenglong.github.io/2016/05/12/backtrace()/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>glibc在Linux下获取调用堆栈</p>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>链接需要在<code>gcc-rdynamic</code>&lt;=&gt;<code>ld --export-dynamic</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/6934659/how-to-make-backtrace-backtrace-symbols-print-the-function-names" target="_blank" rel="external">http://stackoverflow.com/questions/6934659/how-to-make-backtrace-backtrace-symbols-print-the-function-names</a></li>
<li><a href="https://gcc.gnu.org/onlinedocs/gcc-4.8.5/gcc/Link-Options.html#Link-Options" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/gcc-4.8.5/gcc/Link-Options.html#Link-Options</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[addr2line]]></title>
      <url>https://qianchenglong.github.io/2016/05/11/addr2line/</url>
      <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>将程序地址转换为文件名和行号，结合call stack，可以在崩溃时，打印相应信息！</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><pre><code>addr2line -e a.out 0x5061ad
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[程序设计-鸭子类型]]></title>
      <url>https://qianchenglong.github.io/2016/05/08/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>“一个走起来像鸭子，游起来像鸭子，叫起来也像鸭子，那么就可认为它是一只鸭子！”</p>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>鸭子类型是一种动态类型风格</p>
</li>
<li><p>一个对象有效的语义(方法或属性)，不是由继承自特定的类或实现特定的接口，而是由它本身所具有的<strong>方法和属性的集合</strong>来决定</p>
</li>
<li><p>在一个具体的上下文中(函数)，只关心该对象是否具有相应的语义(方法或属性)，而不关心其真实类型</p>
</li>
<li><p>属于一种多态，且不需要继承，灵活性更强！</p>
</li>
<li><p>若该对象在鸭子测试中(函数使用该对象的方法或属性)，不能通过，则抛出异常(<strong>类型错误</strong>)</p>
</li>
<li><p>通过良好的文档，清晰的代码，完备的测试，来保证类型类型正常工作</p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Quaaaaaack!"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feathers</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"The duck has white and gray feathers."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"The person imitates a duck."</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feathers</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"The person takes a feather from the ground and shows it."</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"John Smith"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_the_forest</span><span class="params">(duck)</span>:</span></span><br><span class="line">    duck.quack()</span><br><span class="line">    duck.feathers()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">()</span>:</span></span><br><span class="line">    donald = Duck()</span><br><span class="line">    john = Person()</span><br><span class="line">    in_the_forest(donald)</span><br><span class="line">    in_the_forest(john)</span><br><span class="line"></span><br><span class="line">game()</span><br></pre></td></tr></table></figure>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> Caller &#123;</span><br><span class="line">  <span class="keyword">const</span> T callee_;</span><br><span class="line">  Caller(<span class="keyword">const</span> T callee) : callee_(callee) &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123; callee_.call(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Foo &#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Foo"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Bar &#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Bar"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Caller&lt;Foo&gt; foo&#123;Foo()&#125;;</span><br><span class="line">  Caller&lt;Bar&gt; bar&#123;Bar()&#125;;</span><br><span class="line">  foo.go();</span><br><span class="line">  bar.go();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/Duck_test" target="_blank" rel="external">https://en.wikipedia.org/wiki/Duck_test</a></li>
<li><a href="https://en.wikipedia.org/wiki/Duck_typing" target="_blank" rel="external">https://en.wikipedia.org/wiki/Duck_typing</a></li>
<li><a href="http://nullprogram.com/blog/2014/04/01/" target="_blank" rel="external">http://nullprogram.com/blog/2014/04/01/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-template]]></title>
      <url>https://qianchenglong.github.io/2016/05/08/C++-template/</url>
      <content type="html"><![CDATA[<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul>
<li><p>减少重复代码编写</p>
</li>
<li><p>接口统一</p>
</li>
</ul>
<h1 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h1><ul>
<li><p>因为编译器实例化，需要template实现，而实现包含了所有必须的头文件，这样增加了编译时间</p>
</li>
<li><p>实例化错误不宜阅读和定位解决</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++11-lambda]]></title>
      <url>https://qianchenglong.github.io/2016/05/08/C++11-lambda/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p><code>lambda表达式</code>实质上，是一种快速定义<strong>函数对象</strong>的语法(编译器实现)</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> cpp_bigger = [](int a, int b)&#123; return a &gt; b; &#125;;</span><br></pre></td></tr></table></figure>
<p>&lt;=&gt;</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> _CompilerInventedName</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">const</span> </span>&#123; return a &gt; b; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">_CompilerInventedName cpp_bigger;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-异常]]></title>
      <url>https://qianchenglong.github.io/2016/05/07/C++-%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><ul>
<li>抛出异常时，除了ErrorMsg之外，不带文件名，行号，<code>callstack</code>等信息，不利于定位问题和分析问题</li>
</ul>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul>
<li>相比错误代码，不需要每个调用都逐个比较，也不需要手动向上传递</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++11-override]]></title>
      <url>https://qianchenglong.github.io/2016/05/07/C++11-override/</url>
      <content type="html"><![CDATA[<h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><ul>
<li>显式说明该方法是重写虚函数，提供编译器更强的的检查，防止因为sinature不同，重新定义函数，而不是重写！</li>
</ul>
<h1 id="列子"><a href="#列子" class="headerlink" title="列子"></a>列子</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">short</span>)</span> </span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child : <span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> override </span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"D::f"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-泛型编程]]></title>
      <url>https://qianchenglong.github.io/2016/05/07/C++-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>模板类在实例化时，必须显式指定类型，而模板函数可以不用(隐式推断)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++11-using]]></title>
      <url>https://qianchenglong.github.io/2016/05/07/C++11-using/</url>
      <content type="html"><![CDATA[<h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><ol>
<li>相比<code>typedef</code>可读性更强</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PrintFunc = <span class="keyword">void</span>(*)(std::string);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    PrintFunc f = Print;</span><br><span class="line"></span><br><span class="line">    f(<span class="string">"Hello world"</span>);</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>可以支持<code>template</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> deleted_unique_ptr = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;T, <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(T *)&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    deleted_unique_ptr&lt;FILE&gt; file(fopen(<span class="string">"test"</span>, <span class="string">"w"</span>),</span><br><span class="line">    [](FILE * f) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        fclose(f);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"Hello world"</span>, file.get());</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/10747810/what-is-the-difference-between-typedef-and-using-in-c11" target="_blank" rel="external">http://stackoverflow.com/questions/10747810/what-is-the-difference-between-typedef-and-using-in-c11</a></li>
<li><a href="http://stackoverflow.com/questions/19053351/how-do-i-use-a-custom-deleter-with-a-stdunique-ptr-member" target="_blank" rel="external">http://stackoverflow.com/questions/19053351/how-do-i-use-a-custom-deleter-with-a-stdunique-ptr-member</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-int(n)]]></title>
      <url>https://qianchenglong.github.io/2016/05/06/mysql-int(n)/</url>
      <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul>
<li><p>若不指定显示宽度，则默认为该类型的最大位数(int=&gt;11)</p>
</li>
<li><p>作用相同于<code>printf</code>宽度控制，当数值位数小于指定值时，默认填充空格，大于指定值时，也不会截断！</p>
</li>
<li><p>该显示宽度是可通过结果集(Result Set)中的元数据(Metadata)获取，<strong>具体采不采用取决于应用程序</strong>!</p>
</li>
<li><p>宽度和<code>zerofill</code>对数据存储(存储形式，占用空间)没有任何影响</p>
</li>
<li><p>当列定义指定<code>zerofill</code>时，若该值小于指定宽度，<code>select</code>查询输出会填充相应个数的0</p>
</li>
</ul>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul>
<li>指定宽度和<code>zerofill</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create table t(num int(5) zerofill);</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; desc t;</span><br><span class="line">+-------+--------------------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type                     | Null | Key | Default | Extra |</span><br><span class="line">+-------+--------------------------+------+-----+---------+-------+</span><br><span class="line">| num   | int(5) unsigned zerofill | YES  |     | NULL    |       |</span><br><span class="line">+-------+--------------------------+------+-----+---------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into t values(1);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from t;</span><br><span class="line">+-------+</span><br><span class="line">| num   |</span><br><span class="line">+-------+</span><br><span class="line">| 00001 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>
<ul>
<li>不指定<code>zerofill</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; create table t1(num int(5));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into t1 values(1);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from t1;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>不指定宽度，指定<code>zerofill</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; create table t2(num int zerofill);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; insert into t2 values(1);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]&gt; select * from t2;</span><br><span class="line">+------------+</span><br><span class="line">| num        |</span><br><span class="line">+------------+</span><br><span class="line">| 0000000001 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ul>
<li><p>对于int来说，取值范围-2^(32-1) to 0 to 2^(32-1)-1 =  -2147483648 to 0 to 2147483647，最大显示宽度为11</p>
</li>
<li><p>对于unsigned int，0~4294967295，最大显示宽度为10</p>
</li>
<li><p>当指定<code>zerofill</code>时，mysql会自动追加<code>unsigned</code>属性，！</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-------+---------------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type                      | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+---------------------------+------+-----+---------+-------+</span></span><br><span class="line">| num   | int(10) unsigned zerofill | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+---------------------------+------+-----+---------+-------+</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/numeric-type-attributes.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.7/en/numeric-type-attributes.html</a></li>
<li><a href="http://stackoverflow.com/questions/5634104/what-is-the-size-of-column-of-int11-in-mysql-in-bytes" target="_blank" rel="external">http://stackoverflow.com/questions/5634104/what-is-the-size-of-column-of-int11-in-mysql-in-bytes</a></li>
<li><a href="http://stackoverflow.com/questions/5256469/what-is-the-benefit-of-zerofill-in-mysql" target="_blank" rel="external">http://stackoverflow.com/questions/5256469/what-is-the-benefit-of-zerofill-in-mysql</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/integer-types.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.7/en/integer-types.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-智能指针]]></title>
      <url>https://qianchenglong.github.io/2016/05/04/C++-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
      <content type="html"><![CDATA[<h1 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a><code>std::unique_ptr</code></h1><ul>
<li>独占对象所有权</li>
</ul>
<h2 id="释放时机"><a href="#释放时机" class="headerlink" title="释放时机"></a>释放时机</h2><ul>
<li><p>当赋值操作时</p>
</li>
<li><p>当离开作用域时</p>
</li>
<li><p>显式调用<code>reset</code></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-NULL]]></title>
      <url>https://qianchenglong.github.io/2016/05/02/mysql-NULL/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>只能通过<code>IS NULL</code>, <code>IS NOT NULL</code>(运算符), <code>ISNULL()</code>(函数)这3个来进行测试<code>NULL</code>值</p>
</li>
<li><p>与<code>NULL</code>进行任何运算(比较,算术等),结果都为<code>NULL</code>,除非该运算符特别说明!</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.0/en/working-with-null.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.0/en/working-with-null.html</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#operator_is-null" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#operator_is-null</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-单例模式]]></title>
      <url>https://qianchenglong.github.io/2016/04/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul>
<li><p>相比全局变量</p>
<ul>
<li><p>将构造函数私有，可以防止定义多个实例！</p>
</li>
<li><p>可以实现为uncopyable，禁止复制或赋值！</p>
</li>
</ul>
</li>
<li><p>更加的OO，使用起来便利，无须手动创建和释放！</p>
<ul>
<li>利用C++的确定性析构特点，可以确保程序退出时，执行析构函数，释放相应资源！</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-内存区域]]></title>
      <url>https://qianchenglong.github.io/2016/04/28/C++-%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h1 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h1><p>BSS段通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。特点是可读写的，在程序执行之前BSS段会自动清0。<br>可执行程序包括BSS段、数据段、代码段（也称文本段）。<br>BSS（Block Started by Symbol）通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。特点是:可读写的，在程序执行之前BSS段会自动清0。所以，未初始的全局变量在程序执行之前已经成0了。<br>数据段包括初始化的数据和未初始化的数据（BSS）两部分[1]  。BSS段存放的是未初始化的全局变量和静态变量。<br>UNIX下可使用size命令查看可执行文件的段大小信息。如size a.out。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-静态数据成员]]></title>
      <url>https://qianchenglong.github.io/2016/04/28/C++-%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> X</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> normalValue = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">0</span>;       <span class="comment">// declaration, with initializer</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> X::i;                 <span class="comment">// definition</span></span><br></pre></td></tr></table></figure>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>与全局变量存储在同一区域(全局/静态存储区，又叫做数据段)</p>
</li>
<li><p>在函数内用static修饰的变量，也是在<strong>全局/静态存储</strong>，只是访问的<strong>作用域</strong>被编译器限定</p>
</li>
<li><p>static数据成员只是加上了类名字限定了的全局变量！</p>
</li>
</ul>
<h1 id="为什么需要在类实现文件中单独定义static类型数据成员？"><a href="#为什么需要在类实现文件中单独定义static类型数据成员？" class="headerlink" title="为什么需要在类实现文件中单独定义static类型数据成员？"></a>为什么需要在类实现文件中单独定义static类型数据成员？</h1><ul>
<li>因为类定义在头文件中，而头文件可以在不同的object中引用，<br>这样该定义不唯一，链接器在链接时，会报重定义错误！</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/11300652/static-data-member-initialization" target="_blank" rel="external">http://stackoverflow.com/questions/11300652/static-data-member-initialization</a></li>
<li><a href="http://programmers.stackexchange.com/questions/145299/why-the-static-data-members-have-to-be-defined-outside-the-class-separately-in-c" target="_blank" rel="external">http://programmers.stackexchange.com/questions/145299/why-the-static-data-members-have-to-be-defined-outside-the-class-separately-in-c</a></li>
<li><a href="http://en.cppreference.com/w/cpp/language/static" target="_blank" rel="external">http://en.cppreference.com/w/cpp/language/static</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[daemon]]></title>
      <url>https://qianchenglong.github.io/2016/04/26/daemon/</url>
      <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>关闭打开的文件描述符(0,1,2等，可通过<code>ls /proc/pid/fd</code>查看打开的文件描述符)</p>
<p>若不关闭，虽然没有了控制终端，不会接受到相应控制信号，则仍能IO对应文件，如标准输出到启动时的终端，从终端读入！</p>
<ul>
<li>需要注意，默认为行缓冲！</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[net]]></title>
      <url>https://qianchenglong.github.io/2016/04/25/net/</url>
      <content type="html"><![CDATA[<h1 id="use-samba"><a href="#use-samba" class="headerlink" title="use(samba)"></a>use(samba)</h1><ul>
<li><p>查看帮助</p>
<pre><code>net help use
</code></pre></li>
<li><p>建立连接</p>
<pre><code>net use * /user:username \\computername\sharename password
net use * /user:pm \\192.168.1.2\pm pm0422
</code></pre></li>
<li><p>映射连接</p>
<pre><code>net use * /user:pm \\192.168.1.2\pm pm0422
</code></pre></li>
<li><p>删除连接</p>
<pre><code>net use \\computername\sharename /delete
</code></pre></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://technet.microsoft.com/en-us/library/bb490717.aspx" target="_blank" rel="external">https://technet.microsoft.com/en-us/library/bb490717.aspx</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[suse]]></title>
      <url>https://qianchenglong.github.io/2016/04/22/suse/</url>
      <content type="html"><![CDATA[<ul>
<li><p>添加软件源</p>
<pre><code>zypper ar -f &lt;URL&gt; &lt;alias&gt;
zypper ar -f http://ftp5.gwdg.de/pub/opensuse/discontinued/distribution/11.2/repo/oss/ rep
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-开发经验]]></title>
      <url>https://qianchenglong.github.io/2016/04/22/mysql-%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ul>
<li>程序中，SQL语句尽量用’`’括起来，避免关键字冲突</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-md5]]></title>
      <url>https://qianchenglong.github.io/2016/04/22/windows-md5/</url>
      <content type="html"><![CDATA[<p>certutil -hashfile SLES-11-SP2-DVD-x86_64-GM-DVD1.iso MD5</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://superuser.com/questions/245775/is-there-a-built-in-checksum-utility-on-windows-7" target="_blank" rel="external">http://superuser.com/questions/245775/is-there-a-built-in-checksum-utility-on-windows-7</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[服务器优化]]></title>
      <url>https://qianchenglong.github.io/2016/04/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h1><ul>
<li>根据协议特点，设置<strong>套接字接受缓冲区低水位标志(<code>SO_RCVLOWAT</code>，默认值为1)</strong>为对应的协议头大小</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-c-connector]]></title>
      <url>https://qianchenglong.github.io/2016/04/18/mysql-c-connector/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li>C里空指针 =&gt; mysql<code>NULL</code>值</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/mysql-fetch-row.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.7/en/mysql-fetch-row.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[select]]></title>
      <url>https://qianchenglong.github.io/2016/04/18/select/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><h2 id="fd-set实现-usr-include-sys-select-h"><a href="#fd-set实现-usr-include-sys-select-h" class="headerlink" title="fd_set实现(/usr/include/sys/select.h)"></a>fd_set实现(<code>/usr/include/sys/select.h</code>)</h2><ul>
<li><p>描述符采用整数数组实现，通过bitmap来存储对应描述符</p>
</li>
<li><p><code>FD_SETSIZE</code>默认为1024</p>
<pre><code>/usr/include/bits/typesizes.h
#define __FD_SETSIZE        1024
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c++-bind]]></title>
      <url>https://qianchenglong.github.io/2016/04/14/c++-bind/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>bind的参数是值传递！意味着，如果直接传递某个值，将会复制构造！所以若不想这样，得传递指针！</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/16016112/stdbind-of-class-member-function" target="_blank" rel="external">http://stackoverflow.com/questions/16016112/stdbind-of-class-member-function</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TIME_WAIT]]></title>
      <url>https://qianchenglong.github.io/2016/04/14/TIME_WAIT/</url>
      <content type="html"><![CDATA[<h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h1><h1 id="为什么需要？"><a href="#为什么需要？" class="headerlink" title="为什么需要？"></a>为什么需要？</h1><h1 id="如何查看"><a href="#如何查看" class="headerlink" title="如何查看?"></a>如何查看?</h1><h1 id="如何优化？"><a href="#如何优化？" class="headerlink" title="如何优化？"></a>如何优化？</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭；</span><br><span class="line">net.ipv4.tcp_fin_timeout</span><br><span class="line">#修改系統默认的 TIMEOUT 时间。</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-安装记录]]></title>
      <url>https://qianchenglong.github.io/2016/04/13/centos-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<ul>
<li><p>安装VBoxGuestAdditions</p>
</li>
<li><p>配置sudo</p>
<pre><code>visudo

wallace ALL=(ALL)       NOPASSWD: ALL
</code></pre></li>
<li><p>安装epel(<a href="http://www.cyberciti.biz/faq/installing-rhel-epel-repo-on-centos-redhat-7-x/" target="_blank" rel="external">http://www.cyberciti.biz/faq/installing-rhel-epel-repo-on-centos-redhat-7-x/</a>)</p>
<pre><code>yum install epel-release
</code></pre></li>
<li><p>添加组</p>
<pre><code>yum install libuser
lgroup -M wallace vboxsf
</code></pre></li>
<li><p>配置环境变量</p>
<pre><code>vi /etc/profile
</code></pre></li>
<li><p>配置系统语言</p>
<pre><code>echo LANG=en_US.UTF-8 &gt;/etc/locale.conf
</code></pre></li>
<li><p>配置启动时间</p>
<pre><code>vi /boot/grub2/grub.cfg

set timeout=1
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[死锁]]></title>
      <url>https://qianchenglong.github.io/2016/04/12/%E6%AD%BB%E9%94%81/</url>
      <content type="html"><![CDATA[<h1 id="产生的必要条件"><a href="#产生的必要条件" class="headerlink" title="产生的必要条件"></a>产生的必要条件</h1><ul>
<li>互斥</li>
<li>请求与保持</li>
<li>不被剥夺</li>
<li><p>循环等待</p>
<p>一直等待请求额外互斥资源</p>
</li>
</ul>
<h1 id="可能发生的场景"><a href="#可能发生的场景" class="headerlink" title="可能发生的场景"></a>可能发生的场景</h1><ul>
<li><p>在函数嵌套调用中，多次请求同一资源</p>
</li>
<li><p>不同线程中，以不同的顺序请求多个资源，而其中某个资源不足</p>
</li>
</ul>
<h1 id="调试与诊断方法"><a href="#调试与诊断方法" class="headerlink" title="调试与诊断方法"></a>调试与诊断方法</h1><ol>
<li><p><code>ps</code>查看进程PID，状态，阻塞原因</p>
</li>
<li><p><code>gdb attach</code>到目标进程</p>
</li>
<li><p>保存现场，防止后续调试破环</p>
<pre><code>generate-core-file
</code></pre></li>
<li><p>查看所有线程的调用栈</p>
<pre><code>thread apply all bt
</code></pre></li>
<li><p>切换到相应线程</p>
<pre><code>thread NUM
</code></pre></li>
<li><p>查看相应互斥量，持有情况(<code>pthread_mutex_t.__owner</code>)</p>
<pre><code>print MUTEX
</code></pre></li>
</ol>
<h1 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h1><ul>
<li>打破产生死锁的4个必要条件中的任何一个</li>
</ul>
<ul>
<li><p>利用RAII手段，确保stack mutex离开作用域时被解锁(<code>MutexGuard, std::lock_guard</code>)</p>
<ul>
<li><p>异常结束(throw)</p>
</li>
<li><p>分支跳出(break, continue, return)</p>
</li>
<li><p>意外退出点(exit)</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cpp]]></title>
      <url>https://qianchenglong.github.io/2016/04/08/cpp/</url>
      <content type="html"><![CDATA[<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>-dCHARS</p>
<p><code>CHARS</code>前面不能有空格</p>
<ul>
<li><p>M</p>
<p>处理<code>#define</code>指令</p>
</li>
<li><p>D(常用)</p>
<p>Like M except in two respects: it does not include the predefined macros, and it outputs both the #define directives and the result of preprocessing.<br>Both kinds of output go to the standard output file.</p>
</li>
<li><p>I</p>
<p>Output #include directives in addition to the result of preprocessing.</p>
</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://gcc.gnu.org/onlinedocs/cpp/Preprocessor-Output.html" target="_blank" rel="external">cpp输出格式</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-char-vs-varchar]]></title>
      <url>https://qianchenglong.github.io/2016/04/07/mysql-char-vs-varchar/</url>
      <content type="html"><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="占用空间"><a href="#占用空间" class="headerlink" title="占用空间"></a>占用空间</h2><ul>
<li><p>char(M)占用空间固定，M[0,255]个字符，具体占用字节与编码相关</p>
</li>
<li><p>varchar(M[0,65535])占用空间不固定，因为首部占用1或2B来记录长度M+1(<code>M&lt;256</code>)，占用M+2(<code>255&lt;M&lt;65536</code>)</p>
</li>
</ul>
<h2 id="关于空格"><a href="#关于空格" class="headerlink" title="关于空格"></a>关于空格</h2><ul>
<li><p>在存储字符串到char中时，会填充空格至相应长度</p>
</li>
<li><p>取出char类型值时，若<code>sql_mode</code>没有设置<code>PAD_CHAR_TO_FULL_LENGTH</code>，则会去除尾部空格</p>
<p>所以导致插入带空格的字符串，取出时却不带有空格！</p>
</li>
<li><p>varchar会存储空格和保留空格，不会转换！</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/char.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.6/en/char.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c-类型转换]]></title>
      <url>https://qianchenglong.github.io/2016/04/07/c-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h1><ul>
<li>条件表达式中有<code>singed</code>和’unsigned’时，<code>singed</code>会转化为<code>unsinged</code>(对应类型的模运算值，如1B的-1转换为255)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis]]></title>
      <url>https://qianchenglong.github.io/2016/04/05/redis/</url>
      <content type="html"><![CDATA[<h1 id="配置-etc-redis-conf"><a href="#配置-etc-redis-conf" class="headerlink" title="配置(/etc/redis.conf)"></a>配置(/etc/redis.conf)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass foobared # 设置密码</span><br></pre></td></tr></table></figure>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ul>
<li><p>启动redis</p>
<pre><code>redis-server /etc/redis.conf
</code></pre></li>
<li><p>根据pattern删除key</p>
<pre><code>redis-cli KEYS &quot;prefix:*&quot; | xargs redis-cli DEL
</code></pre></li>
</ul>
<h1 id="命令返回值"><a href="#命令返回值" class="headerlink" title="命令返回值"></a>命令返回值</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> redisReply &#123;</span><br><span class="line">    <span class="keyword">int</span> type; <span class="comment">/* REDIS_REPLY_* */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> integer; <span class="comment">/* The integer when type is REDIS_REPLY_INTEGER */</span></span><br><span class="line">    <span class="keyword">int</span> len; <span class="comment">/* Length of string */</span></span><br><span class="line">    <span class="keyword">char</span> *str; <span class="comment">/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING */</span></span><br><span class="line">    <span class="keyword">size_t</span> elements; <span class="comment">/* number of elements, for REDIS_REPLY_ARRAY */</span></span><br><span class="line">    <span class="keyword">struct</span> redisReply **element; <span class="comment">/* elements vector for REDIS_REPLY_ARRAY */</span></span><br><span class="line">&#125; redisReply;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>状态(<code>#define REDIS_REPLY_STATUS 5</code>),  <code>str</code>=&gt; value</p>
<ul>
<li><p><code>SET</code> =&gt; “OK”</p>
</li>
<li><p><code>PING</code> =&gt; “PONG”</p>
</li>
</ul>
</li>
<li><p>错误(<code>#define REDIS_REPLY_ERROR 6</code>), <code>str</code> =&gt; value</p>
</li>
<li><p>整数(<code>#define REDIS_REPLY_INTEGER 3</code>), <code>integer</code> =&gt; value</p>
<p>一些整数操作命令，如<code>INCR</code>返回增加后的键值</p>
</li>
<li><p>字符串(<code>#define REDIS_REPLY_STRING 1</code>), <code>str</code> =&gt; value</p>
<p>当请求一个字符串类型键的键值时，若每个键不存在，则返回特殊值<code>nil(#define REDIS_REPLY_NIL 4)</code></p>
</li>
<li><p>字符串数组(<code>#define REDIS_REPLY_ARRAY 2</code>), <code>str</code> =&gt; value, <code>element</code> =&gt; next</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[序列化]]></title>
      <url>https://qianchenglong.github.io/2016/04/05/%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>将某种结构化(如<code>struct</code>)的数据转化为字节流</p>
<h1 id="为什么需要序列化"><a href="#为什么需要序列化" class="headerlink" title="为什么需要序列化"></a>为什么需要序列化</h1><ul>
<li><p>网络传输(如tcp是字节流)</p>
</li>
<li><p>跨系统(不是利用程序语言本身提供的机制)存储(如存储到redis)</p>
<ul>
<li>比如c++中的<code>string</code>、<code>struct</code>等，redis中无法直接保存，需要序列化后存储，然后再利用该数据，恢复相应结构</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[libuser]]></title>
      <url>https://qianchenglong.github.io/2016/03/31/libuser/</url>
      <content type="html"><![CDATA[<p>用户，组信息管理工具</p>
<ul>
<li>/usr/bin/lchfn</li>
<li>/usr/bin/lchsh</li>
<li>/usr/sbin/lchage</li>
<li>/usr/sbin/lgroupadd</li>
<li>/usr/sbin/lgroupdel</li>
<li>/usr/sbin/lgroupmod</li>
<li><p>/usr/sbin/lid</p>
<p>查看用户组信息，组成员信息</p>
</li>
<li><p>/usr/sbin/lnewusers</p>
</li>
<li>/usr/sbin/lpasswd</li>
<li>/usr/sbin/luseradd</li>
<li>/usr/sbin/luserdel</li>
<li>/usr/sbin/lusermod</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ol>
<li><p>添加用户到组</p>
<pre><code>lgroupmod -M wallace -- vboxsf
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-unittest]]></title>
      <url>https://qianchenglong.github.io/2016/03/30/go-unittest/</url>
      <content type="html"><![CDATA[<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>-v</p>
<pre><code>打印所有输出
</code></pre></li>
</ul>
<h1 id="命令规范"><a href="#命令规范" class="headerlink" title="命令规范"></a>命令规范</h1><ul>
<li><p>文件名：要测试的文件名_test.go</p>
</li>
<li><p>函数名：Test_XXX</p>
</li>
</ul>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><p>运行指定测试</p>
<pre><code>go test login_test.go
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[aes]]></title>
      <url>https://qianchenglong.github.io/2016/03/30/aes/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p>加密和解密的工作模式须一致</p>
</li>
<li><p>key和iv(初始化向量)位数需要相同</p>
</li>
<li><p>加密iv和解密iv必须保持一致，随机iv用来使密文动态变化，增加破解难度</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gtest]]></title>
      <url>https://qianchenglong.github.io/2016/03/30/gtest/</url>
      <content type="html"><![CDATA[<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>当失败时，退出，打印堆栈</p>
<pre><code>--gtest_break_on_failure --gtest_catch_exceptions=0
</code></pre></li>
</ul>
<p>–  指定VLOG级别，默认不打印<code>VLOG</code>信息</p>
<pre><code>--v=NUM
</code></pre><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>gtest默认安装到编译器搜索路径中</p>
<pre><code>g++ hex.cpp hex_test.cpp -lgtest -lgtest_main
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-gzip]]></title>
      <url>https://qianchenglong.github.io/2016/03/28/go-gzip/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://my.oschina.net/u/1431106/blog/204512" target="_blank" rel="external">http://my.oschina.net/u/1431106/blog/204512</a></li>
<li><a href="http://stackoverflow.com/questions/16890648/how-can-i-use-golangs-compress-gzip-package-to-gzip-a-file" target="_blank" rel="external">http://stackoverflow.com/questions/16890648/how-can-i-use-golangs-compress-gzip-package-to-gzip-a-file</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-rsa]]></title>
      <url>https://qianchenglong.github.io/2016/03/28/go-rsa/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.studygolang.com/2013/01/go%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%B9%8Brsa/" target="_blank" rel="external">http://blog.studygolang.com/2013/01/go%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%B9%8Brsa/</a></li>
<li><a href="http://stackoverflow.com/questions/14404757/how-to-encrypt-and-decrypt-plain-text-with-a-rsa-keys-in-go" target="_blank" rel="external">http://stackoverflow.com/questions/14404757/how-to-encrypt-and-decrypt-plain-text-with-a-rsa-keys-in-go</a></li>
<li><a href="http://golangtc.com/t/54c0c8ff421aa95374000091" target="_blank" rel="external">http://golangtc.com/t/54c0c8ff421aa95374000091</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[openssl]]></title>
      <url>https://qianchenglong.github.io/2016/03/28/openssl/</url>
      <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><p>生成RSA私钥</p>
<pre><code>openssl genrsa -out private.pem 1024
</code></pre></li>
<li><p>根据私钥生成公钥</p>
<pre><code>openssl rsa -in private.pem -pubout -out public.pem
</code></pre></li>
<li><p>直接明文查看</p>
<pre><code>openssl rsa -in private.pem -text -noout
</code></pre></li>
<li><p>以ASN.1查看</p>
<pre><code>openssl asn1parse -in private.pem -noout
</code></pre></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[I] /tmp openssl asn1parse -in private.pem </span><br><span class="line">    0:d=0  hl=4 l= 606 cons: SEQUENCE</span><br><span class="line">    4:d=1  hl=2 l=   1 prim: INTEGER           :00</span><br><span class="line">    7:d=1  hl=3 l= 129 prim: INTEGER [N]       :AD1B7BF5AE71D005A859BC0DD73FD5B18636B0022C22621A8BF8E422E1C2D31F1CC68321C3B5092E96A471BA343E2639F2B354A438DB10C978968E58FD637E4C5D91182B1B4628946D7E6DA3665172B9808C27FFEDB6EB371A55A5B724DCC8A1E8A5C8E88F34042A4D8D9FF17803683F52BBAAEE0922B8A3D6FC1A428FFB91B9</span><br><span class="line">  139:d=1  hl=2 l=   3 prim: INTEGER [E]       :010001</span><br><span class="line">  144:d=1  hl=3 l= 128 prim: INTEGER [D]       :7D64C8517A30C56023C804B9FDEF26AB76AE4CA6F6335DDF1EFF86BA61D10FBF9CC78B9BBCB979D23E9B162AACC74C4773B045A2C3F0A3E35D2FAA237A4144ED791951CCA5F89360E6163641CAC8ED769483644B6320D2C1569960C535DD50A765C5523E12BD44241AB23A217134EFA6DDE30DBF8C8BACF6A0D86F117F1DADA5</span><br><span class="line">  275:d=1  hl=2 l=  65 prim: INTEGER           :DC514054FFE713A66213D7638E0EE9D23E69672CF35D14E9DBFBF8C4A888E1096A18BBDCEC6B11831FB3E11823BC271931C83E97DB58E71384FC33DC584F1FCB</span><br><span class="line">  342:d=1  hl=2 l=  65 prim: INTEGER           :C924D2576E99412C4F4AA946352E24EDA76DEA5BD114A8282AFE1BB7B2BAF1484046291B293D9DB7F3662849202164EC923CDDBBAB95940E083EDA5BADF11C0B</span><br><span class="line">  409:d=1  hl=2 l=  65 prim: INTEGER           :85C6C85B546F895CF41CBC227535D500966905FF235E97BE5097353CA46148D3A09A9827D35E47E9E8AC1EB7BBAB19CA9091D87FF8EE88912FA4BC10C58675F5</span><br><span class="line">  476:d=1  hl=2 l=  65 prim: INTEGER           :A37CFE4A7A66AE86695C7201D2AFD2EC27AE3B52ADBA7083558E7CD0EEC0EBE4A1F964E7E2B9663C61E5A2D0ED00B79B61B17F384EDAA12056AB5FA82CD550C9</span><br><span class="line">  543:d=1  hl=2 l=  65 prim: INTEGER           :B6E4F2280035C65B6D154BAB44E09877A61D069392B2A63C4F808F7D749CFD7FAEBE450B6E596761F5974885D9F43340FB272C1F57F168366E8F3AABDEAD6413</span><br></pre></td></tr></table></figure>
<ul>
<li><p>获取N</p>
<pre><code>openssl rsa -in private.pem -modulus -noout
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh-keygen]]></title>
      <url>https://qianchenglong.github.io/2016/03/28/ssh-keygen/</url>
      <content type="html"><![CDATA[<ul>
<li><p>将pub格式转换为pem格式</p>
<pre><code>ssh-keygen -f id_rsa.pub -e -m pem &gt;id_rsa.pub.pem
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fuser]]></title>
      <url>https://qianchenglong.github.io/2016/03/24/fuser/</url>
      <content type="html"><![CDATA[<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>根据端口杀死进程</p>
<pre><code>fuser 8080/tcp
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[glog]]></title>
      <url>https://qianchenglong.github.io/2016/03/23/glog/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>默认输出到<code>/tmp/&lt;program name&gt;.&lt;hostname&gt;.&lt;user name&gt;.log.&lt;severity level&gt;.&lt;date&gt;.&lt;time&gt;.&lt;pid&gt;</code></p>
</li>
<li><p>FATAL和CHECK失败，会打印堆栈(默认打印到stderr)，然后exit(1)</p>
</li>
</ul>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>minloglevel=NUM</p>
<pre><code>指定最小级别
</code></pre></li>
</ul>
<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><ul>
<li><p>重定向到标准出错</p>
<pre><code>GLOG_logtostderr=1 ./your_application
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://google-glog.googlecode.com/svn/trunk/doc/glog.html" target="_blank" rel="external">https://google-glog.googlecode.com/svn/trunk/doc/glog.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[util-linux]]></title>
      <url>https://qianchenglong.github.io/2016/03/23/util-linux/</url>
      <content type="html"><![CDATA[<h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><ul>
<li>/usr/bin/cal</li>
<li>/usr/bin/chfn</li>
<li>/usr/bin/chrt</li>
<li>/usr/bin/chsh</li>
<li>/usr/bin/col</li>
<li>/usr/bin/colcrt</li>
<li>/usr/bin/colrm</li>
<li>/usr/bin/column</li>
<li>/usr/bin/dmesg</li>
<li>/usr/bin/eject</li>
<li>/usr/bin/fallocate</li>
<li>/usr/bin/findmnt</li>
<li>/usr/bin/flock</li>
<li>/usr/bin/getopt</li>
<li>/usr/bin/hexdump</li>
<li>/usr/bin/i386</li>
<li>/usr/bin/ionice</li>
<li>/usr/bin/ipcmk</li>
<li>/usr/bin/ipcrm</li>
<li>/usr/bin/ipcs</li>
<li>/usr/bin/isosize</li>
<li>/usr/bin/kill</li>
<li>/usr/bin/linux32</li>
<li>/usr/bin/linux64</li>
<li>/usr/bin/logger</li>
<li>/usr/bin/login</li>
<li>/usr/bin/look</li>
<li>/usr/bin/lsblk</li>
<li>/usr/bin/lscpu</li>
<li>/usr/bin/lslocks</li>
<li>/usr/bin/lslogins</li>
<li>/usr/bin/mcookie</li>
<li>/usr/bin/more</li>
<li>/usr/bin/mount</li>
<li>/usr/bin/mountpoint</li>
<li>/usr/bin/namei</li>
<li>/usr/bin/nsenter</li>
<li>/usr/bin/prlimit</li>
<li>/usr/bin/raw</li>
<li>/usr/bin/rename</li>
<li>/usr/bin/renice</li>
<li>/usr/bin/rev</li>
<li>/usr/bin/script</li>
<li>/usr/bin/scriptreplay</li>
<li>/usr/bin/setarch</li>
<li>/usr/bin/setpriv</li>
<li>/usr/bin/setsid</li>
<li>/usr/bin/setterm</li>
<li>/usr/bin/su</li>
<li>/usr/bin/tailf</li>
<li>/usr/bin/taskset</li>
<li>/usr/bin/ul</li>
<li>/usr/bin/umount</li>
<li>/usr/bin/unshare</li>
<li>/usr/bin/utmpdump</li>
<li>/usr/bin/uuidgen</li>
<li>/usr/bin/wdctl</li>
<li>/usr/bin/whereis</li>
<li>/usr/bin/write</li>
<li>/usr/bin/x86_64</li>
<li>/usr/sbin/addpart</li>
<li>/usr/sbin/agetty</li>
<li>/usr/sbin/blkdiscard</li>
<li>/usr/sbin/blkid</li>
<li>/usr/sbin/blockdev</li>
<li>/usr/sbin/cfdisk</li>
<li>/usr/sbin/chcpu</li>
<li>/usr/sbin/clock</li>
<li>/usr/sbin/ctrlaltdel</li>
<li>/usr/sbin/delpart</li>
<li>/usr/sbin/fdformat</li>
<li>/usr/sbin/fdisk</li>
<li>/usr/sbin/findfs</li>
<li>/usr/sbin/fsck</li>
<li>/usr/sbin/fsck.cramfs</li>
<li>/usr/sbin/fsck.minix</li>
<li>/usr/sbin/fsfreeze</li>
<li>/usr/sbin/fstrim</li>
<li>/usr/sbin/hwclock</li>
<li>/usr/sbin/ldattach</li>
<li>/usr/sbin/losetup</li>
<li>/usr/sbin/mkfs</li>
<li>/usr/sbin/mkfs.cramfs</li>
<li>/usr/sbin/mkfs.minix</li>
<li>/usr/sbin/mkswap</li>
<li>/usr/sbin/nologin</li>
<li>/usr/sbin/partx</li>
<li>/usr/sbin/pivot_root</li>
<li>/usr/sbin/readprofile</li>
<li>/usr/sbin/resizepart</li>
<li>/usr/sbin/rtcwake</li>
<li>/usr/sbin/runuser</li>
<li>/usr/sbin/sfdisk</li>
<li>/usr/sbin/sulogin</li>
<li>/usr/sbin/swaplabel</li>
<li>/usr/sbin/swapoff</li>
<li>/usr/sbin/swapon</li>
<li>/usr/sbin/switch_root</li>
<li>/usr/sbin/wipefs</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[procps-ng]]></title>
      <url>https://qianchenglong.github.io/2016/03/23/procps-ng/</url>
      <content type="html"><![CDATA[<h1 id="查询命令"><a href="#查询命令" class="headerlink" title="查询命令"></a>查询命令</h1><pre><code>rpm -ql procps-ng |grep bin
</code></pre><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><ul>
<li>/usr/bin/free</li>
<li>/usr/bin/pgrep</li>
<li>/usr/bin/pkill</li>
<li>/usr/bin/pmap</li>
<li>/usr/bin/ps</li>
<li>/usr/bin/pwdx</li>
<li>/usr/bin/skill</li>
<li>/usr/bin/slabtop</li>
<li>/usr/bin/snice</li>
<li>/usr/bin/tload</li>
<li>/usr/bin/top</li>
<li>/usr/bin/uptime</li>
<li>/usr/bin/vmstat</li>
<li>/usr/bin/w</li>
<li>/usr/bin/watch</li>
<li>/usr/sbin/sysctl</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pstree]]></title>
      <url>https://qianchenglong.github.io/2016/03/23/pstree/</url>
      <content type="html"><![CDATA[<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>-a</p>
<p>输出进程的命令行参数</p>
</li>
<li><p>-p</p>
<p>输出进程PID</p>
</li>
<li><p>-u</p>
<p>输出进程使用者</p>
</li>
<li><p>-s</p>
<p>Show parent processes of the specified process.</p>
</li>
<li><p>-n</p>
<p>按PID排序</p>
</li>
<li><p>-l</p>
<p>完整显示，默认80列</p>
</li>
<li><p>-h</p>
<p>高亮当前进程及其父进程</p>
</li>
<li><p>-H PID</p>
<p>高亮PID进程及其父进程</p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>显示PID进程的族谱</p>
<pre><code>pstree -apls PID
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux头文件组织]]></title>
      <url>https://qianchenglong.github.io/2016/03/19/linux%E5%A4%B4%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87/</url>
      <content type="html"><![CDATA[<p>通过<code>yum provides FILENAME</code>来查找所属包</p>
<ul>
<li><p>glibc-headers(使用C开发库，必须安装的包)</p>
<p><code>/usr/include/sys</code>，<code>/usr/include/bits</code></p>
</li>
<li><p>kernel-headers(被glibc使用)</p>
<p><code>/usr/include/linux</code>，<code>/usr/include/asm</code></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rpm]]></title>
      <url>https://qianchenglong.github.io/2016/03/19/rpm/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查询包信息</p>
<pre><code>rpm -q glibc
</code></pre></li>
<li><p>列出包文件</p>
<pre><code>rpm -ql glibc
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yum]]></title>
      <url>https://qianchenglong.github.io/2016/03/19/yum/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查询文件所属</p>
<pre><code>yum provides /usr/include/sys/types.h
</code></pre></li>
<li><p>下载包</p>
<pre><code>yum -y install yum-utils
yumdownloader httpd
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[protobuf]]></title>
      <url>https://qianchenglong.github.io/2016/03/18/protobuf/</url>
      <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul>
<li>二进制编码，格式紧凑，编解码快，省流量</li>
</ul>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><pre><code>protoc [OPTION] PROTO_FILES
</code></pre><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><ul>
<li><p>输出c++代码</p>
<pre><code>protoc --cpp_out=. base.proto
</code></pre></li>
</ul>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul>
<li><p>基本类型(<code>uint32</code>、<code>string</code>等)提供了<code>set_</code>方法</p>
</li>
<li><p>singular(<code>单数</code>) message字段(自定义消息)，提供<code>mutalbe_</code>方法设置值，没有<code>set_</code>方法</p>
</li>
<li><p>repeated字段</p>
<ul>
<li><code>_size</code>查询数量</li>
<li>下标访问(获取，修改)</li>
<li><code>add_</code>添加(返回指针来修改数据)</li>
</ul>
</li>
</ul>
<h1 id="编码风格-https-developers-google-com-protocol-buffers-docs-style"><a href="#编码风格-https-developers-google-com-protocol-buffers-docs-style" class="headerlink" title="编码风格(https://developers.google.com/protocol-buffers/docs/style)"></a>编码风格(<a href="https://developers.google.com/protocol-buffers/docs/style" target="_blank" rel="external">https://developers.google.com/protocol-buffers/docs/style</a>)</h1><ul>
<li><p>消息类型</p>
<p>CamelCase(with an initial capital)</p>
</li>
<li><p>字段</p>
<p>underscore_separated_names</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">message SongServerRequest &#123;</span><br><span class="line">  required string song_name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C++:</span><br><span class="line">  const string&amp; song_name() &#123; ... &#125;</span><br><span class="line">  void set_song_name(const string&amp; x) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">Java:</span><br><span class="line">  public String getSongName() &#123; ... &#125;</span><br><span class="line">  public Builder setSongName(String v) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>枚举</p>
<p>Use CamelCase (with an initial capital) for enum type names and CAPITALS_WITH_UNDERSCORES for value names</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum Foo &#123;</span><br><span class="line">  FIRST_VALUE = 1;</span><br><span class="line">  SECOND_VALUE = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>service</p>
<p>CamelCase (with an initial capital) for both the service name and any RPC method names</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service FooService &#123;</span><br><span class="line">  rpc GetSomething(FooRequest) returns (FooResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2016/03/18/ssh/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[epoll]]></title>
      <url>https://qianchenglong.github.io/2016/03/15/epoll/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p><code>epoll_event</code>中的<code>epoll_data_t</code>用来存储用户自定义数据</p>
<p>当与其绑定的<code>fd</code>上发生指定的事件时，<code>epoll_wait</code>返回该<code>event</code>，用户可以拿到该数据</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tcp-read]]></title>
      <url>https://qianchenglong.github.io/2016/03/11/tcp-read/</url>
      <content type="html"><![CDATA[<pre><code>ssize_t read(int fildes, void *buf, size_t nbyte);
</code></pre><h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><ul>
<li><blockquote>
<p>0，成功读取了n字节</p>
</blockquote>
</li>
<li><p>=0，对方断开了连接</p>
</li>
<li><p>&lt;0，发生了错误</p>
<ul>
<li>EINTR   被中断，没有读取到数据</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP连接释放]]></title>
      <url>https://qianchenglong.github.io/2016/03/11/TCP%E8%BF%9E%E6%8E%A5%E9%87%8A%E6%94%BE/</url>
      <content type="html"><![CDATA[<p><img src="../img/TCP连接释放.png" alt=""></p>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>tcp是双向的，所以主动断开方，只是关闭了单向发送，仍可以接收数据，所以需要4次通信才能完成完全关闭</li>
</ul>
<h1 id="为什么需要主动关闭方需要等待2MSL，有个TIME-WAIT状态？"><a href="#为什么需要主动关闭方需要等待2MSL，有个TIME-WAIT状态？" class="headerlink" title="为什么需要主动关闭方需要等待2MSL，有个TIME_WAIT状态？"></a>为什么需要主动关闭方需要等待2MSL，有个<code>TIME_WAIT</code>状态？</h1><ol>
<li><p>确保A(主动关闭方)发送的最后一个ACK报文(针对B发过来的断开连接请求的响应)可以被B收到</p>
</li>
<li><p>确保整个通信链路中的<strong>已失效的连接请求报文</strong>已经被处理，保证后续新的TCP连接逻辑正常</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[获取errno宏定义]]></title>
      <url>https://qianchenglong.github.io/2016/03/11/%E8%8E%B7%E5%8F%96errno%E5%AE%8F%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<pre><code>cpp -dM /usr/include/errno.h | grep &apos;define E&apos; | sort -n -k 3
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/503878/how-to-know-what-the-errno-means" target="_blank" rel="external">http://stackoverflow.com/questions/503878/how-to-know-what-the-errno-means</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tcp-accept]]></title>
      <url>https://qianchenglong.github.io/2016/03/11/tcp-accept/</url>
      <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> socket, <span class="keyword">struct</span> sockaddr *<span class="keyword">restrict</span> address,</span><br><span class="line">           socklen_t *<span class="keyword">restrict</span> address_len)</span></span>;</span><br></pre></td></tr></table></figure>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p><code>address_len</code>为传入传出参数！</p>
</li>
<li><p>当监听套接字设置为非阻塞时，若<code>accept</code>未获取到连接，则不阻塞，返回失败，<code>errno</code>设置为<code>EAGAIN</code>或<code>EWOULDBLOCK</code></p>
</li>
</ul>
<h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><ul>
<li><code>EMFILE</code> 打开的文件超过限制</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改limit]]></title>
      <url>https://qianchenglong.github.io/2016/03/10/%E4%BF%AE%E6%94%B9limit/</url>
      <content type="html"><![CDATA[<ol>
<li><p>/etc/security/limits.conf</p>
<pre><code>* hard nofile 10000
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[线程]]></title>
      <url>https://qianchenglong.github.io/2016/03/10/%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h1><ol>
<li><p>提高资源利用率</p>
</li>
<li><p>提高系统吞吐量</p>
</li>
<li><p>降低编程复杂性</p>
</li>
</ol>
<h1 id="使用线程的好处"><a href="#使用线程的好处" class="headerlink" title="使用线程的好处"></a>使用线程的好处</h1><ol>
<li><p>单独的线程去处理某种事件，简化异步事件的代码，如服务端采用一对一的线程去处理IO事件</p>
</li>
<li><p>相比多进程，更加容易进行数据共享</p>
</li>
<li><p>将问题分解，改善程序的吞吐量。</p>
<p>在单线程的情况下，任务是串行化执行的，根据任务本身地的特点，分解成多个步骤，并行</p>
</li>
<li><p>对于交互程序，改善响应时间</p>
</li>
<li><p>相对于多进程，开销更小</p>
</li>
</ol>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p>线程标识采用<code>pthread_t</code>，底层类型取决于实现，相等判断需要使用<code>pthread_equal</code></p>
</li>
<li><p>创建新线程后，与主线程的调用顺序依赖于OS的线程实现和调度算法</p>
</li>
<li><p>在pthread(NTPL)实现中，默认栈大小为8M，可通过如下方式查询：</p>
<ul>
<li><p>ulimit -s</p>
</li>
<li><p><code>getrlimit</code></p>
</li>
<li><p><code>pthread_attr_getstacksize</code></p>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[poll]]></title>
      <url>https://qianchenglong.github.io/2016/03/09/poll/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>使用链表存储，所以没有数量限制</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IO模型]]></title>
      <url>https://qianchenglong.github.io/2016/03/09/IO%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul>
<li><p>阻塞IO</p>
</li>
<li><p>非阻塞IO</p>
</li>
<li><p>IO复用(select,poll,epoll)</p>
</li>
<li><p>信号驱动IO</p>
</li>
<li><p>异步IO</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[proactor]]></title>
      <url>https://qianchenglong.github.io/2016/03/08/proactor/</url>
      <content type="html"><![CDATA[<p>与Reactor模型相对应，Proactor最大的特点是使用异步I/O。所有的I/O操作都交由系统提供的异步I/O接口去执行。Proactor多路复用器等待异步I/O完成，并调用相应的用户处理函数。为了对比Reactor模型，以一个read操作为例：</p>
<p>在Reactor中：</p>
<ul>
<li>将要读的文件描述符注册到多路复用器中。</li>
<li>多路复用器等待上述描述符的可读事件以及其它所有已经注册过的事件。</li>
<li>描述符变成可读之后，多路复用器返回，并调用用户提供的处理函数，开始读文件操作。</li>
</ul>
<p>在Proactor中：</p>
<ul>
<li>用户函数启动一个异步读文件的操作。同时将这个操作注册到多路复用器上。多路复用器并不关心文件是否可读而是关心这个异步读操作是否完成。</li>
<li>异步读文件是操作系统完成，用户程序不需要关心。多路复用器等待直到有完成通知到来。</li>
<li>当操作系统完成了读文件操作——将读到的数据复制到了用户先前提供的缓冲区之后，通知多路复用器读操作已完成。</li>
<li>多路复用器再调用相应的处理程序，处理数据。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[reactor]]></title>
      <url>https://qianchenglong.github.io/2016/03/08/reactor/</url>
      <content type="html"><![CDATA[<p>将所有要处理的I/O事件注册到一个中心I/O多路复用器上，同时主线程阻塞在多路复用器上；一旦有I/O事件到来或是准备就绪(区别在于多路复用器是边沿触发还是水平触发)，多路复用器返回并将相应I/O事件分发到对应的处理器中。</p>
<p>这里有三个重要的组件：</p>
<ul>
<li>多路复用器：由操作系统提供，在linux上一般是select, poll, epoll等系统调用。</li>
<li>事件分发器：将多路复用器中返回的就绪事件分到对应的处理函数中。</li>
<li>事件处理器：负责处理特定事件的处理函数。</li>
</ul>
<h1 id="核心要点"><a href="#核心要点" class="headerlink" title="核心要点"></a>核心要点</h1><ul>
<li>监听的是IO就绪事件(proactor监听的是IO完成事件)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IO复用]]></title>
      <url>https://qianchenglong.github.io/2016/03/08/IO%E5%A4%8D%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>所谓的IO复用意思是指复用<strong>一个线程</strong>来处理多个对象的IO</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx]]></title>
      <url>https://qianchenglong.github.io/2016/03/08/nginx/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li>nginx 的进程由用户设置，单个worker进程就可以处理用户所有的事件，epoll_wait 返回大量事件(A,B,C,D,E)时，服务器会顺序执行的所有的事件，事件A没有处理完，E是不能执行的，也不用同时分配内存，这样就避免内存井喷的现象，当事件处理粒度大的时候，性能就出现瓶颈了</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[池]]></title>
      <url>https://qianchenglong.github.io/2016/03/07/%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h1 id="为什么需要各种池？-内存池、线程池、连接池等"><a href="#为什么需要各种池？-内存池、线程池、连接池等" class="headerlink" title="为什么需要各种池？(内存池、线程池、连接池等)"></a>为什么需要各种池？(内存池、线程池、连接池等)</h1><p>减少开销，避免频繁地资源申请和释放</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c++-类型转换]]></title>
      <url>https://qianchenglong.github.io/2016/02/27/c++-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a><code>static_cast</code></h1><ul>
<li>相关类型的转换，如整型到枚举，浮点到整型</li>
</ul>
<h1 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a><code>reinterpret_cast</code></h1><ul>
<li>互不相关类型转换，如整型到指针</li>
</ul>
<h1 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a><code>const_cast</code></h1><ul>
<li>去除<code>const</code>，<code>volatile</code>修饰</li>
</ul>
<h1 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a><code>dynamic_cast</code></h1><ul>
<li><p>多态类型的转换</p>
<ol>
<li>子类向基类的向上转型(Up Cast)</li>
<li>基类向子类的向下转型(Down Cast)</li>
<li>横向转型(Cross Cast)</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[boost-bind]]></title>
      <url>https://qianchenglong.github.io/2016/02/27/boost-bind/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><code>_1,_2...</code>代表的是原函数的第n个参数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; j &lt;&lt; <span class="string">" "</span> &lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    boost::function&lt;<span class="keyword">void</span> (<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)&gt; f1 = boost::bind(f, _3, _1, _2); <span class="comment">// f1(k, i ,j)</span></span><br><span class="line">    f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 3 1 2</span></span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c-结构体对齐]]></title>
      <url>https://qianchenglong.github.io/2016/02/25/c-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>自身对齐值(该数据类型的size)</p>
</li>
<li><p>该字段起始位置整除自身对齐值</p>
</li>
<li><p>结构体圆整(结构体的size整除<strong>最大</strong>内部字段的自身对齐值)</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c-基本类型size]]></title>
      <url>https://qianchenglong.github.io/2016/02/25/c-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8Bsize/</url>
      <content type="html"><![CDATA[<p>| 类型    | 32位  | 64位  |<br>|———+——-+——-|<br>| char    | 1     | 1     |<br>| short   | 2     | 2     |<br>| int     | 4     | 4     |<br>| long    | 4     | <strong>8</strong> |<br>| float   | 4     | <strong>8</strong> |<br>| double  | <strong>8</strong> | 8     |<br>| pointer | 4     | <strong>8</strong> |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[md5]]></title>
      <url>https://qianchenglong.github.io/2016/02/22/md5/</url>
      <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><ol>
<li><p>简单的密码加密(因为不可逆)</p>
</li>
<li><p>作为hash函数，用来作为key</p>
</li>
<li><p>对数据的签名，确保没有被更改(数据包，文件传输等)</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-复制构造函数]]></title>
      <url>https://qianchenglong.github.io/2016/02/21/C++-%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>由一个同类型值，创建一个新对象</p>
<h1 id="调用场景"><a href="#调用场景" class="headerlink" title="调用场景"></a>调用场景</h1><ul>
<li><p>复制一个同类型的对象</p>
</li>
<li><p>函数传递非引用实参时</p>
</li>
<li><p>函数返回非引用参数时</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[strcpy和memcpy比较]]></title>
      <url>https://qianchenglong.github.io/2016/02/21/strcpy%E5%92%8Cmemcpy%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h1 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h1><ul>
<li>strcpy是复制源字符串，直到NUL为止（包括NUL)，而memcpy是复制指定个数的字节内容<br>，不会复制到NUL就结束！</li>
</ul>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul>
<li>在字符串的复制方面，更推荐使用strcpy，前提是确保dst足够大！</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-查看mtu]]></title>
      <url>https://qianchenglong.github.io/2016/02/21/linux-%E6%9F%A5%E7%9C%8Bmtu/</url>
      <content type="html"><![CDATA[<ol>
<li><p>cat /sys/class/net/enp0s3/mtu</p>
</li>
<li><p>netstat -i</p>
</li>
<li><p>ip address show</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[链表]]></title>
      <url>https://qianchenglong.github.io/2016/02/18/%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul>
<li><p>动态存储分配</p>
</li>
<li><p>数据更新效率高，O(1)</p>
</li>
</ul>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul>
<li><p>浪费了部分空间用来存储指针域</p>
</li>
<li><p>查询效率低，O(n)</p>
</li>
</ul>
<h1 id="增加一个头节点"><a href="#增加一个头节点" class="headerlink" title="增加一个头节点"></a>增加一个头节点</h1><p>空节点，不存储数据</p>
<ul>
<li>优化链代码效率，避免了链表是否为空的判断</li>
</ul>
<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><ul>
<li><p>判断链表是否为空</p>
<p>头节点到链域为空，则链表为空</p>
</li>
<li><p>定位到尾节点</p>
<p>尾节点的特点是链域为空。</p>
<p>所以挨个遍历，当当前节点到链域为空时，说明当前节点为尾节点</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tcp]]></title>
      <url>https://qianchenglong.github.io/2016/02/18/tcp/</url>
      <content type="html"><![CDATA[<h1 id="首部"><a href="#首部" class="headerlink" title="首部"></a>首部</h1><ul>
<li><p>PSH(push)</p>
<p>置位后，数据立马发送，而不是填充到缓冲区等待发送</p>
</li>
<li><p>窗口值</p>
<p>报文发送方的<strong>接收缓冲区</strong>大小(tcp是双工的)，允许对方发送的最大数据量</p>
</li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol>
<li><p>3次握手中，为什么客户端最后还需要确认一次？</p>
<p>为了防止服务端响应了已失效的连接请求报文。</p>
<p>假设没有再次确认，当客户端发出一次连接请求时，由于某种原因，该报文被滞留。<br>后续客户端又重新发送报文，与服务端建立了连接。<br>而此时服务端收到了之前的连接请求报文，又建立了连接，此时便导致错误。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[电影网站]]></title>
      <url>https://qianchenglong.github.io/2016/01/18/%E7%94%B5%E5%BD%B1%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://www.dytt8.net/" target="_blank" rel="external">电影天堂</a></p>
</li>
<li><p><a href="http://www.bttiantang.com/" target="_blank" rel="external">bit天堂</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-最大打开文件数]]></title>
      <url>https://qianchenglong.github.io/2016/01/15/linux-%E6%9C%80%E5%A4%A7%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>linux下，默认最大打开文件数为1024(<code>ulimit -n</code>)</p>
</li>
<li><p>一个进程打开，默认占用3个文件描述符(0,1,2分别对应标准输入，标准输出，标准出错)</p>
</li>
</ul>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul>
<li><p>默认情况下，单进程最大打开文件数为<strong>1021</strong>个([3,1023])</p>
</li>
<li><p>单进程，最大连接数为<strong>1021</strong>个</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[服务端编程步骤]]></title>
      <url>https://qianchenglong.github.io/2016/01/15/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>创建监听套接字</p>
</li>
<li><p>配置监听地址信息</p>
</li>
<li><p>套接字绑定监听地址</p>
</li>
<li><p>开始监听</p>
</li>
<li><p>连接处理/数据IO</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx-gzip]]></title>
      <url>https://qianchenglong.github.io/2015/11/26/nginx-gzip/</url>
      <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>; <span class="comment"># 开启gzip</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>; <span class="comment"># 大于等于1K才压缩</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">1</span>; <span class="comment"># 压缩级别(1~10),值越大,压缩程度越高</span></span><br><span class="line">    <span class="attribute">gzip_proxied</span> any; <span class="comment"># 所有代理的返回都压缩</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/x-javascript text/css text/javascript application/json; <span class="comment"># 当Content-Type为这些值时才压缩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx_http_gzip_module.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rfc-表示要求的动词]]></title>
      <url>https://qianchenglong.github.io/2015/11/25/rfc-%E8%A1%A8%E7%A4%BA%E8%A6%81%E6%B1%82%E7%9A%84%E5%8A%A8%E8%AF%8D/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.ietf.org/rfc/rfc2119.txt" target="_blank" rel="external">https://www.ietf.org/rfc/rfc2119.txt</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http-content-type]]></title>
      <url>https://qianchenglong.github.io/2015/11/25/http-content-type/</url>
      <content type="html"><![CDATA[<h1 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h1><ul>
<li><p>数据必须是<code>Unicode</code>编码,默认编码方式为<code>UTF-8</code></p>
</li>
<li><p>因为<code>json</code>数据前2个字符总是<code>ASCII</code>字符(<code>{&quot;</code>,与<code>[空格]</code>的组合),所以可以推断出其编码方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 xx  UTF-32BE</span><br><span class="line">00 xx 00 xx  UTF-16BE</span><br><span class="line">xx 00 00 00  UTF-32LE</span><br><span class="line">xx 00 xx 00  UTF-16LE</span><br><span class="line">xx xx xx xx  UTF-8</span><br></pre></td></tr></table></figure>
</li>
<li><p>若采用<code>UTF-16</code>或<code>UTF-32</code>,则需要设置<code>content-transfer-encoding</code>为<code>binary</code>??</p>
</li>
</ul>
<p>参考:</p>
<ol>
<li><a href="http://www.ietf.org/rfc/rfc4627.txt" target="_blank" rel="external">http://www.ietf.org/rfc/rfc4627.txt</a></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/9254891/what-does-content-type-application-json-charset-utf-8-really-mean" target="_blank" rel="external">http://stackoverflow.com/questions/9254891/what-does-content-type-application-json-charset-utf-8-really-mean</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go]]></title>
      <url>https://qianchenglong.github.io/2015/11/18/go/</url>
      <content type="html"><![CDATA[<h1 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h1><ol>
<li><p>代码风格统一(命名,缩进)</p>
<ul>
<li><p>以首字母大小写区分成员是<code>public</code>还是<code>privite</code></p>
</li>
<li><p>强制缩进风格</p>
</li>
</ul>
</li>
<li><p>错误处理方式优雅统一</p>
<ul>
<li>错误作为最后一个返回值</li>
</ul>
</li>
<li><p>资源释放方式优雅统一(<code>defer</code>)</p>
</li>
<li><p>非侵入式接口</p>
</li>
<li><p>发布,运维方便</p>
</li>
<li><p>包管理机制</p>
<ul>
<li>革新了项目管理方式,项目结构和构建顺序依赖于目录组织,引用(import)关系</li>
</ul>
</li>
<li><p>垃圾自动回收</p>
</li>
<li><p>静态类型</p>
</li>
<li><p>反射</p>
<ul>
<li>常用于对象的序列化(<code>json</code>, <code>xml</code>, <code>gob</code>,…)</li>
</ul>
</li>
<li><p>函数多返回值,提供多重赋值</p>
<ul>
<li><p>优雅地同时返回结果和错误</p>
</li>
<li><p>返回多个结果不用像C/C++那样,定义额外的结构体或多个传出参数</p>
</li>
</ul>
</li>
<li><p>高效并发,方便的同步机制</p>
</li>
<li><p>自带单元测试</p>
</li>
<li><p>自带很多好用的库,如<code>log</code>,<code>encoding/json</code>,<code>net/http</code>,…</p>
</li>
<li><p>强大好用的命令行工具,如<code>gofmt</code>,<code>gocode</code>,…</p>
</li>
<li><p>方便的枚举常量定义(<code>iota</code>)</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx-CORS]]></title>
      <url>https://qianchenglong.github.io/2015/11/17/nginx-CORS/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">     if ($request_method = &apos;OPTIONS&apos;) &#123;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">        #</span><br><span class="line">        # Om nom nom cookies</span><br><span class="line">        #</span><br><span class="line">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">        #</span><br><span class="line">        # Custom headers and headers various browsers *should* be OK with but aren&apos;t</span><br><span class="line">        #</span><br><span class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">        #</span><br><span class="line">        # Tell client that this pre-flight info is valid for 20 days</span><br><span class="line">        #</span><br><span class="line">        add_header &apos;Access-Control-Max-Age&apos; 1728000;</span><br><span class="line">        add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;;</span><br><span class="line">        add_header &apos;Content-Length&apos; 0;</span><br><span class="line">        return 204;</span><br><span class="line">     &#125;</span><br><span class="line">     if ($request_method = &apos;POST&apos;) &#123;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">     &#125;</span><br><span class="line">     if ($request_method = &apos;GET&apos;) &#123;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://enable-cors.org/server_nginx.html" target="_blank" rel="external">http://enable-cors.org/server_nginx.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[跨域共享]]></title>
      <url>https://qianchenglong.github.io/2015/11/17/%E8%B7%A8%E5%9F%9F%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h1 id="预检"><a href="#预检" class="headerlink" title="预检"></a>预检</h1><ol>
<li><p>Origin HTTP请求头</p>
<ul>
<li>任何涉及CORS的请求都必须携带</li>
</ul>
</li>
<li><p>Access-Control-Request-Method HTTP请求头</p>
<ul>
<li>真实请求的方法</li>
</ul>
</li>
<li><p>Access-Contrl-Request-Headers HTTP请求头</p>
<ul>
<li>真实请求的自定义header列表</li>
</ul>
</li>
<li><p>Access-Control-Allow-Origin HTTP响应头</p>
<ul>
<li>允许进行CORS的来源域</li>
</ul>
</li>
<li><p>Access-Control-Allow-Method HTTP响应头</p>
<ul>
<li>允许进行CORS的请求方法列表(响应预检请求)</li>
</ul>
</li>
<li><p>Access-Control-Allow-Headers HTTP响应头</p>
<ul>
<li>允许进行CORS的请求头列表(响应预检请求)</li>
</ul>
</li>
<li><p>Access-Control-Max-Age HTTP响应头</p>
<ul>
<li>用在响应预检请求上,表示本次预检响应的有效时间.<br>在此时间内,浏览器都可以根据此次协商结果决定是否有必要直接发送真实请求，而无需再次发送预检请求</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js-跨域]]></title>
      <url>https://qianchenglong.github.io/2015/11/16/js-%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域?"></a>什么是跨域?</h1><p>在了解什么是跨域问题之前,先需要了解<strong>同源策略</strong></p>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源?"></a>什么是同源?</h3><p>同源是指<strong>协议</strong>,<strong>域名</strong>,<strong>端口</strong>完全一致</p>
<h3 id="为什么需要同源策略"><a href="#为什么需要同源策略" class="headerlink" title="为什么需要同源策略?"></a>为什么需要同源策略?</h3><p>为了信息安全,最基本的原则即同源的东西是安全的,除此之外都是不安全的.</p>
<p>示例:</p>
<p>一个中间层(代理服务器,路由网关,运营商等),通过IFrame把登录网银的页面嵌套起立,<br>里面加入了一段恶意代码,将用户的数据发送到指定位置.</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.jianshu.com/p/4e17445d66e2" target="_blank" rel="external">同源策略——浏览器的安全卫士</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http-OPTIONS]]></title>
      <url>https://qianchenglong.github.io/2015/11/16/http-OPTIONS/</url>
      <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><ul>
<li>获取URL支持的HTTP请求方法</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http-head]]></title>
      <url>https://qianchenglong.github.io/2015/11/16/http-head/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>HEAD方法跟GET方法相同，只不过服务器响应时不会返回消息体。<br>一个HEAD请求的响应中，HTTP头中包含的元信息应该和一个GET请求的响应消息相同。</p>
<p>一个HEAD请求的响应可被缓存，也就是说，响应中的信息可能用来更新之前缓存的实体。如果当前实体跟缓存实体的阈值不同（可通过Content-Length、Content-MD5、ETag或Last-Modified的变化来表明），那么这个缓存就被视为过期了</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>简单,快速,耗用资源少</p>
</li>
<li><p>响应可被缓存</p>
</li>
</ul>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><ul>
<li><p>测试超链接的有效性、可用性和最近的修改</p>
</li>
<li><p>用来获取资源的<strong>元数据</strong></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">wiki-超文本传输协议</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ajax]]></title>
      <url>https://qianchenglong.github.io/2015/11/16/ajax/</url>
      <content type="html"><![CDATA[<h1 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax?"></a>什么是ajax?</h1><p>全称”Asynchronous Javascript And XML”(异步JavaScript和XML)</p>
<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>在不用重新载入整个网页的前提下(刷新),获取数据,更新网页内容</p>
<h1 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h1><p>该技术在1998年前后得到了应用。允许客户端脚本发送HTTP请求（XMLHTTP）的第一个组件由Outlook Web Access小组写成。该组件原属于微软Exchange Server，并且迅速地成为了Internet Explorer 4.0的一部分。部分观察家认为，Outlook Web Access是第一个应用了Ajax技术的成功的商业应用程序，并成为包括Oddpost的网络邮件产品在内的许多产品的领头羊。但是，2005年初，许多事件使得Ajax被大众所接受。Google在它著名的交互应用程序中使用了异步通讯，如Google、Google地图、Google搜索建议、Gmail等。Ajax这个词由《Ajax: A New Approach to Web Applications》一文所创，该文的迅速流传提高了人们使用该项技术的意识。另外，对Mozilla/Gecko的支持使得该技术走向成熟，变得更为易用。</p>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>核心是<code>XMLHttpRequest</code>对象</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.w3school.com.cn/xml/xml_http.asp" target="_blank" rel="external">XMLHttpRequest 对象</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx-允许跨域]]></title>
      <url>https://qianchenglong.github.io/2015/11/16/nginx-%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Cache-Control <span class="string">"Access-Control-Allow-Origin:*"</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-interface]]></title>
      <url>https://qianchenglong.github.io/2015/11/10/go-interface/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p><code>interface</code>是一组<code>method</code>的集合(而不是<code>function</code>, 因为<code>function</code>没有<code>reciver</code>)</p>
</li>
<li><p>若某个类型实现了<code>interface</code>内所有<code>method</code>,则该类型对象与该<code>interface</code>对象转换</p>
</li>
<li><p><code>interface</code>是一种语义上的抽象,该对象提供了某种<strong>语义抽象</strong>功能,而该功能的具体实现不同</p>
<p>如<code>coder(编码器)</code>,存在编码,解码功能,但具体可能有<code>json</code>,<code>xml</code>等多种方式实现</p>
</li>
<li><p>赋值给<code>interface</code></p>
<ul>
<li><p>若为值,则该类型<code>method</code>的<code>reciver</code>也必须是值类型</p>
</li>
<li><p>若为指针值,则该类型<code>method</code>的<code>reciver</code>也必须是指针类型</p>
</li>
</ul>
<p>因为<code>method</code>的<code>reciver</code>是否为指针,代表的语义功能可能完全不一样</p>
<p><code>reciver</code>为指针类型,意味着在该<code>method</code>中,很可能会改变该对象自身(具体由实现决定)</p>
<p>若一个<code>method</code>要求的是指针类型,而在给<code>interface</code>赋值时,只是传值的话,是无法改变该对象的!</p>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.6.md" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.6.md</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-rpc]]></title>
      <url>https://qianchenglong.github.io/2015/11/09/go-rpc/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p>注册一个类型,即提供一个服务(访问该类型相关的方法)</p>
</li>
<li><p>方法的原型约定</p>
<ul>
<li>the method’s type is exported.(只有导出的,在<code>rpc</code>包中才可访问)</li>
<li>the method is exported.(只有导出的,在<code>rpc</code>包中才可访问)</li>
<li>the method has two arguments, both exported (or builtin) types.(只有导出的或内建类型,在<code>rpc</code>包中才可访问)</li>
<li>the method’s second argument is a pointer.(第二个为返回参数)</li>
<li>the method has return type error.(go风格)</li>
</ul>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://golang.org/pkg/net/rpc/" target="_blank" rel="external">https://golang.org/pkg/net/rpc/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-array]]></title>
      <url>https://qianchenglong.github.io/2015/11/06/go-array/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p>长度是数组类型的一部分</p>
</li>
<li><p>数组长度不可变</p>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.golang.org/slices" target="_blank" rel="external">http://blog.golang.org/slices</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-slice]]></title>
      <url>https://qianchenglong.github.io/2015/11/06/go-slice/</url>
      <content type="html"><![CDATA[<p>#　要点</p>
<ol>
<li><p><code>slice</code>是一个数组的封装</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">    array unsafe.Pointer</span><br><span class="line">    <span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line">    <span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>fmt.Printf(&quot;%T&quot;)</code>打印显示为<code>[]type</code>,跟数组类似,但不包括长度</p>
</li>
<li><p>作为传入参数时</p>
<ul>
<li><p>若只是改变<code>slice</code>中元素的值,不需要穿引用</p>
</li>
<li><p>若改变了<code>slice</code>长度或容量,则需要穿指针或返回新<code>slice</code></p>
</li>
</ul>
</li>
<li><p>用数组初始化<code>slice</code>时,<code>slice</code>容量等于数组的长度减去切割时的索引</p>
</li>
</ol>
<pre><code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line">slice := array[<span class="number">1</span>:<span class="number">5</span>] <span class="comment">// cap = 10 - 1 = 9, len = 5 - 1 = 4(array[1, 2, 3, 4])</span></span><br><span class="line">fmt.Printf(<span class="string">"%T %v\n"</span>, array, array)</span><br><span class="line">fmt.Printf(<span class="string">"%T %v %v %v\n"</span>, slice, slice, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice))</span><br><span class="line"></span><br><span class="line">[<span class="number">10</span>]<span class="keyword">int</span> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[]<span class="keyword">int</span> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] <span class="number">4</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.golang.org/slices" target="_blank" rel="external">http://blog.golang.org/slices</a></li>
<li><a href="https://blog.go-zh.org/go-slices-usage-and-internals" target="_blank" rel="external">https://blog.go-zh.org/go-slices-usage-and-internals</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-多列排序]]></title>
      <url>https://qianchenglong.github.io/2015/11/03/mysql-%E5%A4%9A%E5%88%97%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">order</span> <span class="keyword">by</span> A <span class="keyword">DESC</span>, B AESC</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-string]]></title>
      <url>https://qianchenglong.github.io/2015/11/02/go-string/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>a string is in effect a read-only slice of bytes</p>
</li>
<li><p><code>string</code>可以存储任意的<code>bytes</code></p>
</li>
<li><p>字符串字面值是<code>utf-8</code>编码的,所以赋给<code>string</code>时,<code>string</code>存储的也是<code>utf-8</code>编码序列</p>
</li>
<li><p><code>使用range</code>得到的是字符(<code>rune</code>)序列</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> str &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%T,%v\n"</span>, b, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>for</code>迭代,来访问<code>utf-8</code>字节(<code>byte</code>)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%v:%T, %v\n"</span>, i, str[i], str[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>rune</code>的意思的<code>code point</code>(unicode码元), 底层类型为<code>int32</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://blog.golang.org/strings" target="_blank" rel="external">https://blog.golang.org/strings</a></li>
<li><a href="http://golanghome.com/post/207" target="_blank" rel="external">http://golanghome.com/post/207</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大小端]]></title>
      <url>https://qianchenglong.github.io/2015/11/02/%E5%A4%A7%E5%B0%8F%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>字节序是一个处理器架构特性。</p>
<p>对于多字节数据，存在一个数据的字节安排问题(大小端)。</p>
<p>大小端取决与CPU架构，X86:小端，KEIL-C51:大端</p>
<h1 id="记忆方式"><a href="#记忆方式" class="headerlink" title="记忆方式"></a>记忆方式</h1><ul>
<li>大端 &lt;=&gt; 字符串顺序</li>
</ul>
<h1 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h1><p>例：0x11223344(4B)在内存中存放时</p>
<h2 id="大端："><a href="#大端：" class="headerlink" title="大端："></a>大端：</h2><p>数据的高位字节放在内存低地址，也就是说数据由高位字节向低位字节在内存中存放，<br>类似于字符串的存放，按照从左向右的顺序存放.</p>
<pre><code>内存：0  1  2  3
      11 22 33 44
</code></pre><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>直接在内存中观察方便</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li><p>不符合逻辑</p>
</li>
<li><p>不利于编码，解码</p>
</li>
</ol>
<h2 id="小端："><a href="#小端：" class="headerlink" title="小端："></a>小端：</h2><p>数据的高位字节放在内存高地址，也就是数据从低位字节向高位字节在内存中存放</p>
<pre><code>内存：0  1  2  3
      44 33 22 11
</code></pre><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol>
<li>这种存放方式比较符合逻辑</li>
<li>利于读入时的解码(转换成对应数据类型的值)，如int i = 0x11223344，按ANSI<br>存放在文件中，再次读入时，需要根据ASCII码把对应的值转换成int型，容易处理，因为先<br>读入的是低位字节</li>
</ol>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>直接在内存中观察时，不方便</li>
</ol>
<h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><ol>
<li>以上数字都是十六进制形式；</li>
<li>假设变量地址为0</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编码-utf-8]]></title>
      <url>https://qianchenglong.github.io/2015/11/02/%E7%BC%96%E7%A0%81-utf-8/</url>
      <content type="html"><![CDATA[<h1 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h1><ul>
<li><p>对于UTF-8编码中的任意字节B，如果B的第一位为0，则B为ASCII码，并且B独立的表示一个字符；</p>
</li>
<li><p>如果B的第一位为1，第二位为0，则B为一个非ASCII字符（该字符由多个字节表示）中的一个字节，并且不是字符的第一个字节编码；</p>
</li>
<li><p>如果B的前两位为1，第三位为0，则B为一个非ASCII字符（该字符由多个字节表示）中的第一个字节，并且该字符由两个字节表示；</p>
</li>
<li><p>如果B的前三位为1，第四位为0，则B为一个非ASCII字符（该字符由多个字节表示）中的第一个字节，并且该字符由三个字节表示；</p>
</li>
<li><p>如果B的前四位为1，第五位为0，则B为一个非ASCII字符（该字符由多个字节表示）中的第一个字节，并且该字符由四个字节表示；</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="external">https://zh.wikipedia.org/wiki/UTF-8</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-系统变量]]></title>
      <url>https://qianchenglong.github.io/2015/11/02/mysql-%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查询系统变量</p>
<pre><code>select @@character_set_server;
</code></pre></li>
<li><p>通过<code>show</code></p>
<pre><code>show variables like &apos;max_allowed_packet&apos;;
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/show-variables.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.7/en/show-variables.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-dsn]]></title>
      <url>https://qianchenglong.github.io/2015/11/02/go-dsn/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/go-sql-driver/mysql#dsn-data-source-name" target="_blank" rel="external">https://github.com/go-sql-driver/mysql#dsn-data-source-name</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-中文编码]]></title>
      <url>https://qianchenglong.github.io/2015/11/02/mysql-%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>存储使用<code>UTF-8</code>(中文占用3B,英文占用1B)</li>
</ul>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p><code>char(n)</code>或<code>vchar(n)</code>中<code>n</code>指的是字符容量,具体占用字节空间取决于编码集</p>
</li>
<li><p>字符</p>
<ul>
<li><p>一个汉字即一个字符</p>
</li>
<li><p>一个英文字母即一个字符</p>
</li>
</ul>
</li>
<li><p><code>char_length</code>   获取字符串的字符数目</p>
</li>
<li><p><code>length</code>    获取字节数(所占空间大小)</p>
</li>
</ul>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'character%';</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">mysql&gt; select char_length('a');</span><br><span class="line">+------------------+</span><br><span class="line">| char_length('a') |</span><br><span class="line">+------------------+</span><br><span class="line">|                1 |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select length('a');</span><br><span class="line">+-------------+</span><br><span class="line">| length('a') |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select char_length('汉');</span><br><span class="line">+--------------------+</span><br><span class="line">| char_length('汉')  |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select length('汉');</span><br><span class="line">+---------------+</span><br><span class="line">| length('汉')  |</span><br><span class="line">+---------------+</span><br><span class="line">|             3 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.0/en/string-functions.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.0/en/string-functions.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-忽略客户端编码设定]]></title>
      <url>https://qianchenglong.github.io/2015/11/02/mysql-%E5%BF%BD%E7%95%A5%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A0%81%E8%AE%BE%E5%AE%9A/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip-character-set-client-handshake</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-使用pptpd搭建vpn]]></title>
      <url>https://qianchenglong.github.io/2015/10/30/ubuntu-%E4%BD%BF%E7%94%A8pptpd%E6%90%AD%E5%BB%BAvpn/</url>
      <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>安装<code>pptpd</code></p>
<pre><code>apt-get install pptpd
</code></pre></li>
<li><p><code>vi /etc/pptpd.conf</code></p>
<pre><code>option /etc/ppp/pptpd-option                    #指定PPP选项文件的位置
debug                                           #启用调试模式
localip 192.168.0.1                             #VPN服务器的虚拟ip
remoteip 192.168.0.200-238,192.168.0.245        #分配给VPN客户端的虚拟ip
</code></pre></li>
<li><p><code>vi /etc/ppp/pptpd-options</code></p>
<pre><code>name pptpd                      #pptpd服务的名称
refuse-pap                      #拒绝pap身份认证模式
refuse-chap                     #拒绝chap身份认证模式
refuse-mschap                   #拒绝mschap身份认证模式
require-mschap-v2               #允许mschap-v2身份认证模式
require-mppe-128                #允许mppe 128位加密身份认证模式
ms-dns 8.8.8.8                  #使用Google DNS
ms-dns 8.8.4.4                  #使用Google DNS
proxyarp                        #arp代理
debug                           #调试模式
dump                            #服务启动时打印出所有配置信息
lock                            #锁定TTY设备
nobsdcomp                       #禁用BSD压缩模式
</code></pre></li>
<li><p>添加用户<code>vi /etc/ppp/chap-secrets</code></p>
<pre><code>#格式：用户名   服务类型   密码   分配的ip地址
test    *    1234    *
</code></pre></li>
<li><p>重启PPTPD服务</p>
<pre><code>service pptpd restart
</code></pre></li>
<li><p>配置网络和路由规则,设置ipv4转发</p>
<pre><code>sed -i &apos;s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g&apos; /etc/sysctl.conf
sysctl -p

iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE
</code></pre></li>
<li><p>设置MTU来确保过大的包不会被丢弃(可选)</p>
<pre><code>iptables -I FORWARD -s 192.168.0.0/24 -p tcp --syn -i ppp+ -j TCPMSS --set-mss 1300
</code></pre></li>
<li><p>备份iptables</p>
<pre><code>iptables-save &gt; /etc/iptables.rule
</code></pre></li>
<li><p>开机自动加载</p>
<pre><code>vi /etc/network/interfaces

pre-up iptables-restore &lt; /etc/iptables.rule
</code></pre></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.fens.me/ubuntu-vpn-pptp/" target="_blank" rel="external">http://blog.fens.me/ubuntu-vpn-pptp/</a></li>
<li><a href="http://blueve.me/archives/1087" target="_blank" rel="external">http://blueve.me/archives/1087</a></li>
<li><a href="http://www.777s.me/centos-pptp.html" target="_blank" rel="external">http://www.777s.me/centos-pptp.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx-add-header]]></title>
      <url>https://qianchenglong.github.io/2015/10/29/nginx-add-header/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_header Cache-Control &quot;no-cache&quot;;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[后台-域名]]></title>
      <url>https://qianchenglong.github.io/2015/10/29/%E5%90%8E%E5%8F%B0-%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h1><ul>
<li>基础域名 <code>base.com</code></li>
</ul>
<h1 id="域名配置相关"><a href="#域名配置相关" class="headerlink" title="域名配置相关"></a>域名配置相关</h1><p><img src="../img/后台-域名-002.png" alt=""></p>
<h1 id="官网-配置www"><a href="#官网-配置www" class="headerlink" title="官网(配置www)"></a>官网(配置www)</h1><p>[www].基础域名</p>
<h1 id="后台接口"><a href="#后台接口" class="headerlink" title="后台接口"></a>后台接口</h1><p>[用途].[项目简称].api.[基础域名]</p>
<p>用途:</p>
<pre><code>-   开发 `dev` `dev.app.api.base.com`
-   测试 `test` `test.app.api.base.com`
-   生产 为空 `app.api.base.com`
</code></pre><p>实例:</p>
<p><img src="../img/后台-域名-01.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[scp]]></title>
      <url>https://qianchenglong.github.io/2015/10/29/scp/</url>
      <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><pre><code>scp [参数] [原路径] [目标路径]
</code></pre><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>拷贝远程文件到本地</p>
<pre><code>scp wallace@192.168.1.1:/opt/a .
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-pointer]]></title>
      <url>https://qianchenglong.github.io/2015/10/28/go-pointer/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>在访问<code>filed</code>时,<code>pointer to struct</code>会自动解引用</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">p := &amp;person&#123;<span class="string">"a"</span>&#125;</span><br><span class="line">p.name <span class="comment">// &lt;=&gt; (*p).name</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在调用<code>method</code>时,<code>struct</code>(<code>reciver</code>)会自动转换(取地址,解引用)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (d Dog) Bite(target <span class="keyword">string</span>) &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%v bite %v\n"</span>, d.name, target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (d *Dog) Drink(target <span class="keyword">string</span>) &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%v drink %v\n"</span>, d.name, target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    a := Dog&#123;<span class="string">"a"</span>&#125;</span><br><span class="line">    b := &amp;Dog&#123;<span class="string">"b"</span>&#125;</span><br><span class="line">    a.Bite(<span class="string">"b"</span>)</span><br><span class="line">    b.Bite(<span class="string">"a"</span>) <span class="comment">// &lt;=&gt; (*b).Bite("a")</span></span><br><span class="line"></span><br><span class="line">    a.Drink(<span class="string">"water"</span>) <span class="comment">// &lt;=&gt; (&amp;a).Drink("water")</span></span><br><span class="line">    b.Drink(<span class="string">"beer"</span>)  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>function</code>参数不会转换</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/20849751/rule-for-go-pointers-references-dereferencing" target="_blank" rel="external">http://stackoverflow.com/questions/20849751/rule-for-go-pointers-references-dereferencing</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-make]]></title>
      <url>https://qianchenglong.github.io/2015/10/28/go-make/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>专为用来创建<code>slice</code>,<code>map</code>,<code>channel</code>这3中类型</p>
<ul>
<li>因为这3中类型依赖于底层数据结构存储,所以必须初始化!</li>
</ul>
</li>
<li><p>返回<code>T</code>类型,而不是<code>*T</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://golang.org/doc/effective_go.html#allocation_make" target="_blank" rel="external">https://golang.org/doc/effective_go.html#allocation_make</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-内存分配]]></title>
      <url>https://qianchenglong.github.io/2015/10/28/go-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p>在go中,变量定义时,存储到stack还是heap上,由编译器确定</p>
<ul>
<li>若该变量在离开该作用域,仍被其他引用访问到(通过指针),则存储到heap</li>
</ul>
</li>
</ol>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> f() *<span class="keyword">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"Hello world"</span></span><br><span class="line">    <span class="keyword">return</span> &amp;s</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    r := f()</span><br><span class="line">    fmt.Printf(<span class="string">"%T %v %v\n"</span>, r, r, *r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>与C/C++不同,在go中,可以返回函数内定义的变量地址(因为存储到heap中)</li>
</ol>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ol>
<li>在go中,不用关心变量存储位置</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://golang.org/doc/faq#stack_or_heap" target="_blank" rel="external">https://golang.org/doc/faq#stack_or_heap</a></li>
<li><a href="http://stackoverflow.com/questions/10866195/stack-vs-heap-allocation-of-structs-in-go-and-how-they-relate-to-garbage-collec?rq=1" target="_blank" rel="external">http://stackoverflow.com/questions/10866195/stack-vs-heap-allocation-of-structs-in-go-and-how-they-relate-to-garbage-collec?rq=1</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-new]]></title>
      <url>https://qianchenglong.github.io/2015/10/27/go-new/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>填充零值(不会进一步初始化),返回指针</p>
</li>
<li><p>可用来简化定义内部类型(<code>int</code>, <code>string</code>…),因为<code>&amp;int</code>是非法的</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j <span class="keyword">int</span></span><br><span class="line">i = &amp;j</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://golang.org/doc/effective_go.html#allocation_new" target="_blank" rel="external">https://golang.org/doc/effective_go.html#allocation_new</a></li>
<li><a href="http://stackoverflow.com/questions/9320862/go-why-would-i-make-or-new" target="_blank" rel="external">http://stackoverflow.com/questions/9320862/go-why-would-i-make-or-new</a></li>
<li><a href="http://stackoverflow.com/questions/13244947/is-there-a-difference-between-new-and-regular-allocation?lq=1" target="_blank" rel="external">http://stackoverflow.com/questions/13244947/is-there-a-difference-between-new-and-regular-allocation?lq=1</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-struct]]></title>
      <url>https://qianchenglong.github.io/2015/10/22/go-struct/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p>结构体指针用来实现类似C++的方法,通过指针才可以修改数据</p>
<pre><code>func (data *Data)
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-net-http]]></title>
      <url>https://qianchenglong.github.io/2015/10/21/go-net-http/</url>
      <content type="html"><![CDATA[<h1 id="http的几个数据结构"><a href="#http的几个数据结构" class="headerlink" title="http的几个数据结构"></a>http的几个数据结构</h1><ul>
<li><p>Request</p>
<p>客户端发起的http请求,包含请求的URL(资源标识),方法,内容,cooike等</p>
</li>
<li><p>Response</p>
<p>服务端发送的响应(HTTP头,辅助说明响应内容)</p>
</li>
<li><p>Conn</p>
<p>客户端跟服务器的连接</p>
</li>
<li><p>Handler</p>
<p>URL的处理逻辑</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p><img src="../img/go-net-http-01.png" alt=""></p>
<ol>
<li><p>创建Listen Socket, 监听指定的端口, 等待客户端请求到来</p>
</li>
<li><p>Listen Socket接受客户端的请求, 得到Client Socket, 接下来通过Client Socket与客户端通信</p>
</li>
<li><p>处理客户端的请求, 首先从Client Socket读取HTTP请求的协议头, 如果是POST方法, 还可能要读取客户端提交的数据, 然后交给相应的handler处理请求, handler处理完毕准备好客户端需要的数据, 通过Client Socket写给客户端</p>
</li>
</ol>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol>
<li><p>通过<code>http.HandleFunc(pattern string, handler func(ResponseWriter, *Request))</code>处理指定请求(根据URL路由)</p>
</li>
<li><p>通过<code>htpp.ListenAndServe(addr string, handler Handler)</code>注册处理器</p>
<ul>
<li><p><code>Handler</code>实现了<code>http.ServeHTTP(ResponseWriter, *Request)</code>接口</p>
</li>
<li><p>该接口根据URL,请求参数等来路由,比如jsonrpc中根据<code>method</code>来路由</p>
</li>
</ul>
</li>
<li><p>通过<code>http.Handle(pattern string, handler Handler)</code>注册处理器</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-limit]]></title>
      <url>https://qianchenglong.github.io/2015/10/21/mysql-limit/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p><code>limit [M,]N</code></p>
<ul>
<li><p><code>M</code>:偏移量,第M+1条</p>
</li>
<li><p><code>N</code>:数量</p>
</li>
</ul>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ol>
<li><p>获取指定数目列</p>
<pre><code>select * from t_stock_base limit 1;
</code></pre></li>
<li><p>获取排序结果中的指定序号,指定书目列</p>
<pre><code>select * from t_stock_base order by stockid limit 1,2;
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-查询技巧]]></title>
      <url>https://qianchenglong.github.io/2015/10/21/mysql-%E6%9F%A5%E8%AF%A2%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<ol>
<li><p>关联查询时,使用<code>INNER JOIN &lt;table&gt; USING (&lt;column&gt;)</code></p>
<ul>
<li><code>select</code>结果列,去除了关联列,避免了使用<code>a.column</code></li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-windows下科学上网]]></title>
      <url>https://qianchenglong.github.io/2015/10/20/go-windows%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<h1 id="通过设置环境变量代理"><a href="#通过设置环境变量代理" class="headerlink" title="通过设置环境变量代理"></a>通过设置环境变量代理</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> HTTP_PROXY=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br><span class="line"><span class="built_in">set</span> HTTPS_PROXY=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-datetime]]></title>
      <url>https://qianchenglong.github.io/2015/10/20/mysql-datetime/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p>mysql中有<code>DATE, TIME, DATETIME, TIMESTAMP, YEAR</code>5种时间类型</p>
</li>
<li><p>时间类型的零值<code>0000-00-00 00:00:00</code></p>
</li>
<li><p>mysql输出时间值时,默认为标准格式<code>2006-01-02 15:04:05</code></p>
</li>
<li><p>mysql读入时间值时(赋值, 比较等操作),会尝试转换各种值如<code>整数20151020</code>, <code>&quot;2015-10-20&quot;</code>等(<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html" target="_blank" rel="external">详见</a>)</p>
</li>
</ol>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><ol>
<li><p>格式化时间值</p>
<pre><code>select date_format(&apos;2015-10-20 16:00:04&apos;, &quot;%Y%m&quot;);
</code></pre></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-types.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.5/en/date-and-time-types.html</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.5/en/storage-requirements.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.5/en/storage-requirements.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http-content-encoding]]></title>
      <url>https://qianchenglong.github.io/2015/10/19/http-content-encoding/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>用来说明内容编码</li>
</ul>
<h1 id="常见值"><a href="#常见值" class="headerlink" title="常见值"></a>常见值</h1><ul>
<li><p>gzip(用于文本压缩传输)</p>
</li>
<li><p>MIME</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http]]></title>
      <url>https://qianchenglong.github.io/2015/10/19/http/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>http是请求-应答协议,只能客户端主动发起请求,服务端只负责应答</p>
</li>
<li><p>http请求包:状态行,头部,内容</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http-chunked]]></title>
      <url>https://qianchenglong.github.io/2015/10/19/http-chunked/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>在不指定<code>Content-Length</code>的情况下,来传输数据,常用来配合<code>gzip</code>使用,边压缩边传输</p>
</li>
<li><p>用一系列分块来传输。每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的 CRLF（\r\n），<br>也不包括分块数据结尾的 CRLF。最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81" target="_blank" rel="external">wiki-chunked</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-prepare-update部分更新]]></title>
      <url>https://qianchenglong.github.io/2015/10/19/mysql-prepare-update%E9%83%A8%E5%88%86%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>有的时候<code>prepare update</code>只需要部分更新,其他字段保留原来的值,例如<br><code>update set A=?, B=?</code>,这里只更新A,但是<code>prepare</code>语句执行的时候,<br>必须需要带2个参数.</p>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><p><code>update set A=COALESCE(?, A), B=COALESCE(?, B)</code></p>
<p>prepare(NULL, 1) =&gt; 则只更新B</p>
<p>prepare(1, NULL) =&gt; 则只更新A</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#function_coalesce" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#function_coalesce</a></li>
<li><a href="http://www.perlmonks.org/?node_id=302181" target="_blank" rel="external">http://www.perlmonks.org/?node_id=302181</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Exchange ActiveSync]]></title>
      <url>https://qianchenglong.github.io/2015/10/19/Exchange-ActiveSync/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>是微软开发地一种同步协议</p>
</li>
<li><p>用来同步通讯录,日历,邮件</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-fmt]]></title>
      <url>https://qianchenglong.github.io/2015/10/16/go-fmt/</url>
      <content type="html"><![CDATA[<h1 id="包内特征"><a href="#包内特征" class="headerlink" title="包内特征"></a>包内特征</h1><ul>
<li><p>3种IO函数</p>
<ul>
<li><p>输出</p>
<ol>
<li><p><code>Print</code>用默认格式打印值,中间用空格分隔</p>
</li>
<li><p><code>Println</code>追加换行</p>
</li>
<li><p><code>Printf</code>自定义格式化</p>
</li>
</ol>
</li>
<li><p>输入</p>
</li>
</ul>
</li>
<li><p>IO源</p>
<ol>
<li><p>默认<code>stdin</code>, <code>stdout</code></p>
</li>
<li><p><code>S</code>族(<code>fmt.Sprint</code>, <code>fmt.Sprintln</code>, <code>fmt.Sprintf</code>),<code>string</code></p>
</li>
<li><p><code>F</code>族(<code>fmt.Fprint</code>, <code>fmt.Fprintln</code>, <code>fmt.Fprintf</code>),<code>io.Writer</code></p>
</li>
</ol>
</li>
</ul>
<h1 id="格式化控制"><a href="#格式化控制" class="headerlink" title="格式化控制"></a>格式化控制</h1><ul>
<li><p>%v  默认格式</p>
</li>
<li><p>%+v 打印结构体字段名</p>
</li>
<li><p>%T  类型</p>
</li>
<li><p>%q  转换为字符串字面值,将非打印字符转义(<code>\xXX</code>)</p>
</li>
<li><p>%q  转换为字符串字面值,将非打印字符转义(<code>\xXX</code>),将<code>utf-8</code>编码的字符转换为<code>\uXXYY</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://golang.org/pkg/fmt/" target="_blank" rel="external">https://golang.org/pkg/fmt/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-time]]></title>
      <url>https://qianchenglong.github.io/2015/10/15/go-time/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>go采用一种独特地时间格式化格式,与传统的C风格不同</p>
</li>
<li><p>格式化标志中带有前导0时(比如月,日,分等),输出也会带有前导0</p>
</li>
</ul>
<h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><ul>
<li><p>年</p>
<ul>
<li><p><code>2006</code> 4位数</p>
</li>
<li><p><code>06</code>    年(2位数)</p>
</li>
</ul>
</li>
<li><p>月 <code>01</code></p>
</li>
<li><p>日 <code>02</code></p>
</li>
<li><p><code>15</code>:24h制时, <code>03</code>:12h制时</p>
</li>
<li><p>分 <code>04</code></p>
</li>
<li><p>秒 <code>05</code></p>
</li>
<li><p>周几 <code>Mon</code>,<code>Monday</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://golang.org/pkg/time/" target="_blank" rel="external">https://golang.org/pkg/time/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[date]]></title>
      <url>https://qianchenglong.github.io/2015/10/15/date/</url>
      <content type="html"><![CDATA[<ul>
<li><p>20060102150405(<code>golang style</code>)</p>
<pre><code>date  +&quot;%Y%m%d%H%M%S&quot;
</code></pre></li>
<li><p><code>epoch time</code>=&gt;ASCII time</p>
<pre><code>date -d @1234567890
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-windows环境搭建]]></title>
      <url>https://qianchenglong.github.io/2015/10/14/go-windows%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ol>
<li><p><a href="https://golang.org/dl/" target="_blank" rel="external">官网</a></p>
</li>
<li><p>解压到<code>E:\Soft\go\bin\go1.5.1.windows-amd64</code></p>
</li>
<li><p>设置环境变量</p>
<pre><code>GOROOT=E:\Soft\go\bin\go1.4.2.windows-amd64\go
GOPATH=E:\Soft\go\gopath
PATH+=%GOROOT%\bin
PATH+=%GOPATH%\bin
</code></pre></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://golang.org/doc/install?download=go1.5.1.windows-amd64.zip" target="_blank" rel="external">https://golang.org/doc/install?download=go1.5.1.windows-amd64.zip</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-go]]></title>
      <url>https://qianchenglong.github.io/2015/10/14/vim-go/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="https://github.com/fatih/vim-go" target="_blank" rel="external">vim-go</a></p>
<p>集成了众多go插件</p>
</li>
<li><p><a href="https://github.com/golang/lint" target="_blank" rel="external">lint</a></p>
<p>代码质量检查</p>
</li>
<li><p><a href="https://github.com/jstemmer/gotags" target="_blank" rel="external">gotags</a></p>
<p>生成tag文件</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-gorilla-rpc]]></title>
      <url>https://qianchenglong.github.io/2015/10/13/go-gorilla-rpc/</url>
      <content type="html"><![CDATA[<h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><ol>
<li>外部接口</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s := rpc.NewServer() <span class="comment">// 定义一个rpc server</span></span><br><span class="line"></span><br><span class="line">s.RegisterCodec(json2.NewCustomCodec(&amp;rpc.CompressionSelector&#123;&#125;), <span class="string">"application/json"</span>)</span><br><span class="line"><span class="comment">// 定义一个codec(用来响应请求)</span></span><br><span class="line"><span class="comment">// 为rpc注册(当收到的http,`Content-Type`为`application/json`时,调用该codec响应处理)</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/gorilla/rpc" target="_blank" rel="external">https://github.com/gorilla/rpc</a></li>
<li><a href="http://www.gorillatoolkit.org/pkg/rpc" target="_blank" rel="external">http://www.gorillatoolkit.org/pkg/rpc</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-json]]></title>
      <url>https://qianchenglong.github.io/2015/10/13/go-json/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>编码解码是相对于<code>json</code>字符串(<code>utf-8</code>编码的slice)来讲的</p>
<ul>
<li><p>编码=&gt;将<code>go</code>数据类型值转换为<code>json</code>字符串</p>
</li>
<li><p>解码=&gt;将<code>json</code>字符串转换为<code>go</code>中数据类型值</p>
</li>
</ul>
</li>
</ul>
<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><ul>
<li><p><code>Marshal(v interface{}) ([]byte, error)</code></p>
<p>编码</p>
</li>
<li><p><code>Unmarshal(data []byte, v interface{}) error</code></p>
<p>解码</p>
</li>
<li><p><code>NewDecoder(r io.Reader) *Decoder</code> <code>(dec *Decoder) Decode(v interface{}) error</code></p>
<p>从实现了<code>io.Reader</code>接口中的对象读取<code>json</code>字符串来解码</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md" target="_blank" rel="external">build-web-application-with-golang 7.2 JSON处理</a></li>
<li><a href="https://golang.org/pkg/encoding/json/" target="_blank" rel="external">https://golang.org/pkg/encoding/json/</a></li>
<li><a href="https://godoc.org/github.com/bitly/go-simplejson" target="_blank" rel="external">https://godoc.org/github.com/bitly/go-simplejson</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-alias]]></title>
      <url>https://qianchenglong.github.io/2015/10/10/mysql-alias/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>对目标列使用,</p>
<ul>
<li>输出列名可读性更强</li>
</ul>
</li>
<li><p>对表名使用</p>
<ul>
<li><p>简写表名</p>
</li>
<li><p>同名表关联</p>
</li>
</ul>
</li>
<li><p>在select的目标输出列中(<code>select_expr</code>)</p>
<ul>
<li><p>别名可以在<code>GROUP BY</code>,<code>ORDER BY</code>,<code>HAVING</code>中使用</p>
</li>
<li><p>标准SQl不允许在<code>WHERE</code>中使用</p>
<p>因为<code>WHERE</code>是执行的,而<code>SELECT</code>目标列是基于<code>WHERE</code>结果的,<br>所以<code>WHERE</code>中不能使用还没产生的别名!</p>
</li>
</ul>
</li>
<li><p><code>AS</code>可以省略</p>
<pre><code>select id userid from user;
select a.id from user a;
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.0/en/problems-with-alias.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.0/en/problems-with-alias.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库-命名规范]]></title>
      <url>https://qianchenglong.github.io/2015/10/10/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="表名采用小写下划线"><a href="#表名采用小写下划线" class="headerlink" title="表名采用小写下划线"></a>表名采用小写下划线</h1><p>如<code>auth_user</code></p>
<h1 id="列名采用小写下划线"><a href="#列名采用小写下划线" class="headerlink" title="列名采用小写下划线"></a>列名采用小写下划线</h1><p>如<code>is_superuser</code></p>
<h1 id="关于id主键"><a href="#关于id主键" class="headerlink" title="关于id主键"></a>关于<code>id</code>主键</h1><ol>
<li><p><code>表名_id</code>(优先采用)</p>
<ul>
<li><p>输出目标列时,不用alias,对前端人员来说,附带一个表名,会使数据库可读性更强</p>
<pre><code>select user_id from user
</code></pre></li>
<li><p>在多表查询,关联条件时,比较清晰</p>
<pre><code>select order.user_id, name, order_id from user, order where order.user_id = user.user_id
</code></pre></li>
</ul>
</li>
<li><p><code>id</code></p>
<ul>
<li><p>若需要引用某个表的<code>id</code>列,该列名还需要附带表名</p>
<pre><code>select user_id from order;
</code></pre></li>
<li><p>输出目标列时,每个都需要alias,非常麻烦!</p>
<pre><code>select user.id as user_id, order.id as order_id from user, order where user.id = order.user_id
</code></pre></li>
</ul>
</li>
</ol>
<p>参考:</p>
<ol>
<li><a href="http://stackoverflow.com/questions/3933803/database-design-primary-key-naming-conventions?rq=1" target="_blank" rel="external">http://stackoverflow.com/questions/3933803/database-design-primary-key-naming-conventions?rq=1</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-decimal]]></title>
      <url>https://qianchenglong.github.io/2015/10/09/mysql-decimal/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ol>
<li><p><code>decimal</code>是使用字符存储数字的,所以不存在精度丢失问题</p>
</li>
<li><p><code>decimal(M, N)</code></p>
<ul>
<li><p>M说明存储数位长度(包括小数部分, 又叫精度, precision),取值范围1~65</p>
</li>
<li><p>N说明小数位数(scale, 标度),取值范围0~30,必须不大于M</p>
</li>
</ul>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.1/en/precision-math-decimal-characteristics.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.1/en/precision-math-decimal-characteristics.html</a></li>
<li><a href="http://stackoverflow.com/questions/2377174/how-do-i-interpret-precision-and-scale-of-a-number-in-a-database" target="_blank" rel="external">http://stackoverflow.com/questions/2377174/how-do-i-interpret-precision-and-scale-of-a-number-in-a-database</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[app-后台经验]]></title>
      <url>https://qianchenglong.github.io/2015/09/30/app-%E5%90%8E%E5%8F%B0%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ol>
<li><p>业务逻辑实现难易程度,拓展性等跟<strong>表结构设计</strong>相关</p>
</li>
<li><p>API优雅跟<strong>SQL语句的熟练,精妙程度</strong>相关</p>
</li>
<li><p>不要为了一点性能或存储空间而增加程序或逻辑的复杂度</p>
<p>如用<code>int</code>来存储小数, 存储和读取都需要转换,还需要知道精度,增加复杂度,<strong>得不偿失</strong></p>
</li>
</ol>
<h1 id="语言设计"><a href="#语言设计" class="headerlink" title="语言设计"></a>语言设计</h1><ul>
<li>定义重要类型的别名，如<code>typedef uint32_t uid_t</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sql]]></title>
      <url>https://qianchenglong.github.io/2015/09/30/sql/</url>
      <content type="html"><![CDATA[<h1 id="update"><a href="#update" class="headerlink" title="update"></a>update</h1><ul>
<li><p>当需要部分更新时,不要使用多表关联更新</p>
<p>因为可能部分关联失败,导致需要更新的数据没有更新</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> product a, <span class="keyword">order</span> b <span class="keyword">set</span> ... <span class="keyword">where</span> a.product_id = b.product_id</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-数据库备份恢复]]></title>
      <url>https://qianchenglong.github.io/2015/09/28/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
      <content type="html"><![CDATA[<h1 id="备份恢复指定表"><a href="#备份恢复指定表" class="headerlink" title="备份恢复指定表"></a>备份恢复指定表</h1><pre><code>mysqldump -uwallace -pwallace stock_app t_banner_100 &gt;stock_app.t_banner_100

mysql -uroot -pxianji -hsz003-db -P3309 stock_app &lt;stock_app.t_banner_100
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-database]]></title>
      <url>https://qianchenglong.github.io/2015/09/25/go-database/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p><code>go</code>官方没有直接提供数据库驱动,而是定义了一些标准接口(<code>database/sql</code>)</p>
</li>
<li><p>第三方驱动通过包初始化函数<code>init()</code>调用<code>sql.Register(name string, driver driver.Driver)</code>完成注册</p>
</li>
</ul>
<h2 id="重要类型"><a href="#重要类型" class="headerlink" title="重要类型"></a>重要类型</h2><h2 id="driver-Conn"><a href="#driver-Conn" class="headerlink" title="driver.Conn"></a><code>driver.Conn</code></h2><p>Conn是一个数据库连接的接口定义，他定义了一系列方法，这个Conn只能应用在一个goroutine里面，不能使用在多个goroutine里面</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Conn <span class="keyword">interface</span> &#123;</span><br><span class="line">    Prepare(query <span class="keyword">string</span>) (Stmt, error)</span><br><span class="line">    Close() error</span><br><span class="line">    Begin() (Tx, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Prepare函数返回与当前连接相关的执行Sql语句的准备状态，可以进行查询、删除等操作。</p>
</li>
<li><p>Close函数关闭当前的连接，执行释放连接拥有的资源等清理工作.</p>
</li>
<li><p>Begin函数返回一个代表事务处理的Tx，通过它你可以进行查询,更新等操作，或者对事务进行回滚、递交。</p>
</li>
</ul>
<h2 id="driver-Stmt"><a href="#driver-Stmt" class="headerlink" title="driver.Stmt"></a><code>driver.Stmt</code></h2><p>Stmt是一种准备好的状态，和Conn相关联，而且只能应用于一个goroutine中，不能应用于多个goroutine</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stmt <span class="keyword">interface</span> &#123;</span><br><span class="line">    Close() error</span><br><span class="line">    NumInput() <span class="keyword">int</span></span><br><span class="line">    Exec(args []Value) (Result, error)</span><br><span class="line">    Query(args []Value) (Rows, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Close函数关闭当前的链接状态，但是如果当前正在执行query，query还是有效返回rows数据</p>
</li>
<li><p>NumInput函数返回当前预留参数的个数，当返回&gt;=0时数据库驱动就会智能检查调用者的参数。当数据库驱动包不知道预留参数的时候，返回-1</p>
</li>
<li><p>Exec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据</p>
</li>
<li><p>Query函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集</p>
</li>
</ul>
<h2 id="driver-Tx"><a href="#driver-Tx" class="headerlink" title="driver.Tx"></a><code>driver.Tx</code></h2><p>事务处理一般就两个过程，递交或者回滚</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Tx <span class="keyword">interface</span> &#123;</span><br><span class="line">    Commit() error</span><br><span class="line">    Rollback() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="driver-Execer"><a href="#driver-Execer" class="headerlink" title="driver.Execer"></a><code>driver.Execer</code></h2><p>这是一个Conn可选择实现的接口</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Execer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Exec(query <span class="keyword">string</span>, args []Value) (Result, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这个接口没有定义，那么在调用DB.Exec,就会首先调用Prepare返回Stmt，然后执行Stmt的Exec，然后关闭Stmt。</p>
<h2 id="driver-Result"><a href="#driver-Result" class="headerlink" title="driver.Result"></a><code>driver.Result</code></h2><p>这个是执行Update/Insert等操作返回的结果接口定义</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Result <span class="keyword">interface</span> &#123;</span><br><span class="line">    LastInsertId() (<span class="keyword">int64</span>, error)</span><br><span class="line">    RowsAffected() (<span class="keyword">int64</span>, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>LastInsertId函数返回由数据库执行插入操作得到的自增ID号。</p>
</li>
<li><p>RowsAffected函数返回query操作影响的数据条目数。</p>
</li>
</ul>
<h2 id="driver-Rows"><a href="#driver-Rows" class="headerlink" title="driver.Rows"></a><code>driver.Rows</code></h2><p>Rows是执行查询返回的结果集接口定义</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Rows <span class="keyword">interface</span> &#123;</span><br><span class="line">    Columns() []<span class="keyword">string</span></span><br><span class="line">    Close() error</span><br><span class="line">    Next(dest []Value) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Columns函数返回查询数据库表的字段信息，这个返回的slice和sql查询的字段一一对应，而不是返回整个表的所有字段。</p>
</li>
<li><p>Close函数用来关闭Rows迭代器。</p>
</li>
<li><p>Next函数用来返回下一条数据，把数据赋值给dest。dest里面的元素必须是driver.Value的值除了string，返回的数据里面所有的string都必须要转换成[]byte。如果最后没数据了，Next函数最后返回io.EOF。</p>
</li>
</ul>
<h2 id="driver-RowsAffected"><a href="#driver-RowsAffected" class="headerlink" title="driver.RowsAffected"></a><code>driver.RowsAffected</code></h2><p>RowsAffected其实就是一个int64的别名，但是他实现了Result接口，用来底层实现Result的表示方式</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RowsAffected <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (RowsAffected) LastInsertId() (<span class="keyword">int64</span>, error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (v RowsAffected) RowsAffected() (<span class="keyword">int64</span>, error)</span><br></pre></td></tr></table></figure>
<h2 id="driver-Value"><a href="#driver-Value" class="headerlink" title="driver.Value"></a><code>driver.Value</code></h2><p>Value其实就是一个空接口，他可以容纳任何的数据</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Value <span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>drive的Value是驱动必须能够操作的Value，Value要么是nil，要么是下面的任意一种</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int64</span></span><br><span class="line"><span class="keyword">float64</span></span><br><span class="line"><span class="keyword">bool</span></span><br><span class="line">[]<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">string</span>   [*]除了Rows.Next返回的不能是<span class="keyword">string</span>.</span><br><span class="line">time.Time</span><br></pre></td></tr></table></figure>
<h2 id="driver-ValueConverter"><a href="#driver-ValueConverter" class="headerlink" title="driver.ValueConverter"></a><code>driver.ValueConverter</code></h2><p>ValueConverter接口定义了如何把一个普通的值转化成driver.Value的接口</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ValueConverter <span class="keyword">interface</span> &#123;</span><br><span class="line">    ConvertValue(v <span class="keyword">interface</span>&#123;&#125;) (Value, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在开发的数据库驱动包里面实现这个接口的函数在很多地方会使用到，这个ValueConverter有很多好处：</p>
<ul>
<li>转化driver.value到数据库表相应的字段，例如int64的数据如何转化成数据库表uint16字段</li>
<li>把数据库查询结果转化成driver.Value值</li>
<li>在scan函数里面如何把driver.Value值转化成用户定义的值</li>
</ul>
<h2 id="driver-Valuer"><a href="#driver-Valuer" class="headerlink" title="driver.Valuer"></a><code>driver.Valuer</code></h2><p>Valuer接口定义了返回一个driver.Value的方式</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Valuer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Value() (Value, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很多类型都实现了这个Value方法，用来自身与driver.Value的转化。</p>
<h1 id="使用相关"><a href="#使用相关" class="headerlink" title="使用相关"></a>使用相关</h1><h2 id="sql-Stmt"><a href="#sql-Stmt" class="headerlink" title="sql.Stmt"></a><code>sql.Stmt</code></h2><p><code>sql.DB.Prepare</code>返回的语句操作</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(s *Stmt) Exec(args ...<span class="keyword">interface</span>&#123;&#125;) (Result, error) <span class="comment">// 带参数执行prepare语句(insert, update...)</span></span><br><span class="line">(s *Stmt) Query(args ...<span class="keyword">interface</span>&#123;&#125;) (*Rows, error) <span class="comment">// 带参数执行select语句, 返回结果集</span></span><br><span class="line">(s *Stmt) QueryRow(args ...<span class="keyword">interface</span>&#123;&#125;) *Row <span class="comment">// 带参数执行select语句,通过scan获取单行结果!(函数糖)</span></span><br><span class="line">(s *Stmt) Close() error <span class="comment">// 释放资源</span></span><br></pre></td></tr></table></figure>
<h2 id="sql-Row"><a href="#sql-Row" class="headerlink" title="sql.Row"></a><code>sql.Row</code></h2><p><code>QueryRow返回</code>,结合<code>scan</code>用来获取单行查询结果</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/05.1.md" target="_blank" rel="external">go web编程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[app后台-升级经验]]></title>
      <url>https://qianchenglong.github.io/2015/09/24/app%E5%90%8E%E5%8F%B0-%E5%8D%87%E7%BA%A7%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ul>
<li><p>使用<code>git-flow</code>开发</p>
</li>
<li><p>文档化<strong>升级步骤</strong></p>
</li>
<li><p>每个新版本开发时,用<strong>升级文档</strong>记录下,涉及到的数据库更新,配置文件更新,部署环境更新等操作</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-error]]></title>
      <url>https://qianchenglong.github.io/2015/09/24/go-error/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p><code>error</code>是一个预定义的<code>interface</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最常用的一个实现是<code>errors</code>中的<code>errorString</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">errors.New(<span class="string">"error message"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>fmt</code>包中,通过反射得知是<code>error</code>类型时,则调用<code>error() string</code>方法</p>
</li>
<li><p>在<code>fmt</code>包中,提供了<code>Errorf(format string, a ...interface{}) error</code>来方便错误信息输出</p>
</li>
<li><p>在精细化的情况下(调用者需要知道错误(该错误是重新定义的的,包含其他信息)的详细信息,不只是错误字符串),<br>这时可以通过<strong>类型断言</strong>来单独处理指定错误</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := dec.Decode(&amp;val); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> serr, ok := err.(*json.SyntaxError); ok &#123;</span><br><span class="line">        line, col := findLine(f, serr.Offset)</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"%s:%d:%d: %v"</span>, f.Name(), line, col, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">_, err := my.DB.Exec(sql)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> driverErr, ok := err.(*mysql.MySQLError); ok &#123; <span class="comment">// Now the error number is accessible directly</span></span><br><span class="line">            <span class="keyword">if</span> driverErr.Number == <span class="number">1062</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> errDuplicate</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &amp;json2.Error&#123;Code: <span class="number">100</span>, Message: <span class="string">"a"</span>&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.golang.org/error-handling-and-go" target="_blank" rel="external">http://blog.golang.org/error-handling-and-go</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-http中获取客户端IP]]></title>
      <url>https://qianchenglong.github.io/2015/09/23/go-http%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AFIP/</url>
      <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.Request.RemoteAddr</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/27234861/correct-way-of-getting-clients-ip-addresses-from-http-request-golang" target="_blank" rel="external">http://stackoverflow.com/questions/27234861/correct-way-of-getting-clients-ip-addresses-from-http-request-golang</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-string操作]]></title>
      <url>https://qianchenglong.github.io/2015/09/23/go-string%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<ul>
<li><p>字符串分割</p>
<pre><code>func SplitAfter(s, sep string) []string
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[app开发-认证]]></title>
      <url>https://qianchenglong.github.io/2015/09/23/app-%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://ruby-china.org/topics/24571" target="_blank" rel="external">手机 App 如何保持会话</a></li>
<li><a href="http://anjianshi.net/post/yan-jiu-bi-ji/auth_store" target="_blank" rel="external">登录信息存储的最佳实践</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-int与string转换]]></title>
      <url>https://qianchenglong.github.io/2015/09/23/go-int%E4%B8%8Estring%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="int-gt-string"><a href="#int-gt-string" class="headerlink" title="int =&gt; string"></a>int =&gt; string</h1><p>第一种: strconv.Itoa(10)</p>
<p>第二种: fmt.Sprintf(“%d”, 10)</p>
<p>第三种: fmt.Sprint(10)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-import]]></title>
      <url>https://qianchenglong.github.io/2015/09/23/go-import/</url>
      <content type="html"><![CDATA[<h1 id="正则文法"><a href="#正则文法" class="headerlink" title="正则文法"></a>正则文法</h1><pre><code>ImportDecl       = &quot;import&quot; ( ImportSpec | &quot;(&quot; { ImportSpec &quot;;&quot; } &quot;)&quot; ) .
ImportSpec       = [ &quot;.&quot; | PackageName ] ImportPath .
ImportPath       = string_lit .
</code></pre><h1 id="导入路径-ImportPath"><a href="#导入路径-ImportPath" class="headerlink" title="导入路径(ImportPath)"></a>导入路径(ImportPath)</h1><ul>
<li>相对路径</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./test"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>绝对路径(<code>gopath</code>)</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br></pre></td></tr></table></figure>
<h1 id="包名-PackageName"><a href="#包名-PackageName" class="headerlink" title="包名(PackageName)"></a>包名(PackageName)</h1><ul>
<li><code>.</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> . <span class="string">"fmt"</span></span><br></pre></td></tr></table></figure>
<p>这样导入后,在使用的时候无须包名</p>
<ul>
<li><code>_</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br></pre></td></tr></table></figure>
<p>不直接使用该包内的导出标识符</p>
<ul>
<li><code>别名</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> f <span class="string">"fmt"</span></span><br></pre></td></tr></table></figure>
<p>通过别名访问(“f.Println”)</p>
<ul>
<li>默认形式</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://golang.org/ref/spec#Import_declarations" target="_blank" rel="external">https://golang.org/ref/spec#Import_declarations</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[产品部署目录]]></title>
      <url>https://qianchenglong.github.io/2015/09/22/%E4%BA%A7%E5%93%81%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h1 id="部署目录结构"><a href="#部署目录结构" class="headerlink" title="部署目录结构"></a>部署目录结构</h1><p>部署目录 := 起始目录/项目名称/版本号/构建类型</p>
<p>构建类型 := 开发 | 测试 | 生产</p>
<p>开发 := debug</p>
<p>测试 := test</p>
<p>生产 := release</p>
<h2 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;PROJECT_NAME&#125;</span>/<span class="variable">$&#123;PROJECT_VERSION&#125;</span>/<span class="variable">$&#123;CMAKE_BUILD_TYPE&#125;</span></span><br></pre></td></tr></table></figure>
<p>cmake</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[程序配置数据用文件还是数据库]]></title>
      <url>https://qianchenglong.github.io/2015/09/22/%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%94%A8%E6%96%87%E4%BB%B6%E8%BF%98%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>| 对比点             | 文件                 | 数据库   |<br>|——————–+———————-+———-|<br>| 程序实现           | 简单                 | 相对复杂 |<br>| 数据读写操作       | 简单                 | 相对复杂 |<br>| 是否利于版本回退   | 是(可以纳入版本控制) | 否       |<br>| 部署是否方便       | 是                   | 否       |<br>| 是否方便集中式管理 | 否                   | 是       |</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>综合考虑,优先使用配置文件方式</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.perlmonks.org/?node_id=394211" target="_blank" rel="external">Storing config data - RDBMS vs File?</a></li>
<li><a href="http://programmers.stackexchange.com/questions/179572/should-i-use-a-config-file-or-database-for-storing-business-rules" target="_blank" rel="external">Should I use a config file or database for storing business rules?</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-library]]></title>
      <url>https://qianchenglong.github.io/2015/09/21/go-library/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="https://github.com/gorilla/sessions" target="_blank" rel="external">https://github.com/gorilla/sessions</a></p>
<p>http session实现</p>
</li>
<li><p><a href="https://github.com/golang/oauth2" target="_blank" rel="external">OAuth</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-redis]]></title>
      <url>https://qianchenglong.github.io/2015/09/18/go-redis/</url>
      <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/astaxie/goredis" target="_blank" rel="external">https://github.com/astaxie/goredis</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-package]]></title>
      <url>https://qianchenglong.github.io/2015/09/18/go-package/</url>
      <content type="html"><![CDATA[<ul>
<li><p>包内的首字母大写为可导出符号,在其他包中使用</p>
</li>
<li><p><code>_ import *</code>表示导入该包,但不直接使用该包内的可导出符号(如使用<code>go-sql-driver/mysql</code>)</p>
</li>
<li><p>导入包时,go会自动执行包内的<code>init()</code></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-mysql]]></title>
      <url>https://qianchenglong.github.io/2015/09/18/go-mysql/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><code>nil</code> &lt;=&gt; <code>NULL</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://go-database-sql.org/index.html" target="_blank" rel="external">go-database-sql</a></li>
<li><a href="https://golang.org/pkg/database/sql" target="_blank" rel="external">https://golang.org/pkg/database/sql</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-tab]]></title>
      <url>https://qianchenglong.github.io/2015/09/18/vim-tab/</url>
      <content type="html"><![CDATA[<h1 id="相关选项"><a href="#相关选项" class="headerlink" title="相关选项"></a>相关选项</h1><ul>
<li><code>tabstop</code> 一个tab在显示时对应多少空格,默认为8</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-modeline]]></title>
      <url>https://qianchenglong.github.io/2015/09/18/vim-modeline/</url>
      <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">vim</span>: <span class="keyword">syntax</span>=nginx <span class="keyword">ts</span>=<span class="number">4</span> <span class="keyword">sw</span>=<span class="number">4</span> <span class="keyword">sts</span>=<span class="number">4</span> sr et</span><br></pre></td></tr></table></figure>
<h1 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">vim</span>: <span class="keyword">syntax</span>=apache <span class="keyword">ts</span>=<span class="number">4</span> <span class="keyword">sw</span>=<span class="number">4</span> <span class="keyword">sts</span>=<span class="number">4</span> sr et</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-reflect]]></title>
      <url>https://qianchenglong.github.io/2015/09/18/go-reflect/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>从根本上说,反射只是一个机制,用来检查存储在接口内的类型和值,<br>所以在反射中,有2个类型分别对应(<code>reflect.Type</code>, <code>reflect.Value</code>),<br>分别由<code>reflect.TypeOf(i interface{}) Type</code>和<code>reflect</code></li>
</ul>
<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><ul>
<li><p><code>Indirect(v Value) Value</code></p>
<ul>
<li>若<code>v</code>是<code>nil pointer</code>,则返回<code>zero value</code></li>
<li>若<code>v</code>是<code>not nil pointer</code>,则返回其指向的值</li>
<li>若<code>v</code>不是指针,则返回其本身</li>
</ul>
<p>有些接口同时支持指针值和非指针值,通过这个帮助函数,可以简化代码<br>可参考<code>goriila/rpc</code>中,<code>(m *serviceMap) register(rcvr interface{}, name string)</code>中,获取<code>rcvr</code>的类型名</p>
</li>
</ul>
<h2 id="reflect-Value"><a href="#reflect-Value" class="headerlink" title="reflect.Value"></a><code>reflect.Value</code></h2><ul>
<li><p><code>(v Value) Elem() Value</code></p>
<ul>
<li><p><code>v</code>要求是<code>interface</code>或<code>pointer</code>,其他则<code>panic</code></p>
</li>
<li><p><code>interface</code>则返回其动态类型值</p>
</li>
<li><p><code>pointer</code>则返回指向的值</p>
</li>
<li><p>若<code>v</code>是<code>nil</code>,则返回零值</p>
</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.golang.org/laws-of-reflection" target="_blank" rel="external">http://blog.golang.org/laws-of-reflection</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mock-server]]></title>
      <url>https://qianchenglong.github.io/2015/09/17/mock-server/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://editor.swagger.io/" target="_blank" rel="external">swagger</a></p>
<p>多语言</p>
</li>
<li><p><a href="http://www.mock-server.com/" target="_blank" rel="external">MockServer</a></p>
</li>
<li><p><a href="https://github.com/typicode/json-server/" target="_blank" rel="external">https://github.com/typicode/json-server/</a></p>
</li>
<li><p><a href="https://github.com/Jayin/json-file-server" target="_blank" rel="external">https://github.com/Jayin/json-file-server</a></p>
</li>
<li><p><a href="https://github.com/tomashanacek/mock-server" target="_blank" rel="external">https://github.com/tomashanacek/mock-server</a></p>
<p>python</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.infoq.com/cn/articles/auto-test-mock-server/" target="_blank" rel="external">自动化测试基础设施（一）——为功能测试构建通用mock server系统</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-global]]></title>
      <url>https://qianchenglong.github.io/2015/09/17/python-global/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var = 1</span><br><span class="line"></span><br><span class="line">def fun():</span><br><span class="line">    var = 2</span><br><span class="line">    print(var)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    fun()</span><br><span class="line">    print(var)</span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt; main()</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>在pytho中函数中,python将<code>var</code>处理成同名的局部变量!</p>
<p>所以,当执行复合赋值运算时,会报错!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var = 1</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    var += 2</span><br><span class="line">    print(var)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; main()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in main</span><br><span class="line">UnboundLocalError: local variable &apos;var&apos; referenced before assignment</span><br></pre></td></tr></table></figure>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>添加<code>global</code>声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var = 1</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    global var</span><br><span class="line">    var += 2</span><br><span class="line">    print(var)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; main()</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/10851906/python-3-unboundlocalerror-local-variable-referenced-before-assignment?lq=1" target="_blank" rel="external">http://stackoverflow.com/questions/10851906/python-3-unboundlocalerror-local-variable-referenced-before-assignment?lq=1</a></li>
<li><a href="http://segmentfault.com/q/1010000000195730" target="_blank" rel="external">python中在哪些情况下必须使用global来声明全局变量？</a></li>
<li><a href="http://stackoverflow.com/questions/8934772/assigning-to-variable-from-parent-function-local-variable-referenced-before-as" target="_blank" rel="external">http://stackoverflow.com/questions/8934772/assigning-to-variable-from-parent-function-local-variable-referenced-before-as</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-struct-tag]]></title>
      <url>https://qianchenglong.github.io/2015/09/16/go-struct-tag/</url>
      <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p><code>struct</code>中可以附加一个<code>tag</code>,用来定制一些行为</p>
<p>如在<code>encoding/json</code>中,因为go,默认首字母大写为导出的,而希望编码为json字符串时,<br>首字母为小写.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    FirstName    <span class="keyword">string</span>    <span class="string">`json:"first_name"`</span></span><br><span class="line">    LastName     <span class="keyword">string</span>    <span class="string">`json:"last_name"`</span></span><br><span class="line">    MiddleName   <span class="keyword">string</span>    <span class="string">`json:"middle_name,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li><p>附加<code>omitempty</code>时,当值为<code>null</code>时,不包含该字段</p>
</li>
<li><p>附加<code>string</code>时,不管原类型,都转换为<code>json string</code></p>
</li>
<li><p>附加<code>json:&quot;-&quot;</code>,不转换该字段</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/10858787/what-are-the-uses-for-tags-in-go" target="_blank" rel="external">http://stackoverflow.com/questions/10858787/what-are-the-uses-for-tags-in-go</a></li>
<li><a href="http://golang.org/pkg/reflect/#StructTag" target="_blank" rel="external">http://golang.org/pkg/reflect/#StructTag</a></li>
<li><a href="https://groups.google.com/forum/#!topic/golang-china/jDyG0r_atxQ" target="_blank" rel="external">https://groups.google.com/forum/#!topic/golang-china/jDyG0r_atxQ</a></li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.2.md</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库设计]]></title>
      <url>https://qianchenglong.github.io/2015/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h1><ol>
<li><p>创建型记录,需附带创建时间,便于分析统计</p>
</li>
<li><p>需要计算类的字段,默认值不要为<code>NULL</code>,否则会导致计算结果为<code>0</code></p>
</li>
<li><p>尽量将字段设置为<code>NOT NULL</code></p>
<ul>
<li><p>多占用额外存储空间</p>
</li>
<li><p>影响查询效率</p>
</li>
</ul>
</li>
</ol>
<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul>
<li>标识符不使用常见的一些语言的关键字(如<code>class</code>, <code>type</code>等)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jsonrpc]]></title>
      <url>https://qianchenglong.github.io/2015/09/15/jsonrpc/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.jsonrpc.org/specification" target="_blank" rel="external">jsonrpc2.0</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jsonrpc框架]]></title>
      <url>https://qianchenglong.github.io/2015/09/10/jsonrpc%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<ul>
<li><a href="http://www.gorillatoolkit.org/pkg/rpc" target="_blank" rel="external">gorilla</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[curl]]></title>
      <url>https://qianchenglong.github.io/2015/09/10/curl/</url>
      <content type="html"><![CDATA[<ul>
<li><p>发送jsonrpc</p>
<pre><code>curl -X POST -H &quot;Content-Type: application/json&quot; -d &apos;{&quot;method&quot;:&quot;HelloService.Say&quot;,&quot;params&quot;:[{&quot;Who&quot;:&quot;Test&quot;}], &quot;id&quot;:&quot;54321&quot;, &quot;jsonrpc&quot;: &quot;2.0&quot;}&apos; http://:6061/rpc
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http-常见错误代码分析]]></title>
      <url>https://qianchenglong.github.io/2015/09/10/http-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>| 错误代码 | 原因                                 | 解决                               |<br>|———-+————————————–+————————————|<br>| 415      | 请求的资源类型与提供的资源类型不匹配 | 设置<code>Content-Type</code>为服务器接受类型 |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[install]]></title>
      <url>https://qianchenglong.github.io/2015/09/09/install/</url>
      <content type="html"><![CDATA[<ul>
<li><p>-D</p>
<p>所有的参数都被当作要创建的目录名,用来创建不存在的目录</p>
</li>
<li><p>-C, –compare</p>
<p>比较文件内容,再决定更新</p>
</li>
<li><p>-m, –mode=MODE</p>
<p>指定权限</p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>安装文件</p>
<pre><code>install -v --compare -D --mode=755 log.py /data/gpxj_server/yun_tong_xun/bin/log.py
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python3-md5]]></title>
      <url>https://qianchenglong.github.io/2015/09/06/python3-md5/</url>
      <content type="html"><![CDATA[<ol>
<li>方法1</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">hashlib.md5(b&apos;Hello world&apos;).hexdigest()</span><br></pre></td></tr></table></figure>
<ol>
<li>方法2</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(b&apos;Hello world&apos;)</span><br><span class="line">md5.hexdigest()</span><br></pre></td></tr></table></figure>
<ol>
<li>方法3</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.new(&apos;md5&apos;, b&apos;Hello world&apos;)</span><br><span class="line">md5.hexdigest()</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/3/library/hashlib.html" target="_blank" rel="external">https://docs.python.org/3/library/hashlib.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python3-base64]]></title>
      <url>https://qianchenglong.github.io/2015/09/06/python3-base64/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">base64.b64encode(b&apos;Hello world&apos;)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/3/library/base64.html#module-base64" target="_blank" rel="external">https://docs.python.org/3/library/base64.html#module-base64</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rpc框架]]></title>
      <url>https://qianchenglong.github.io/2015/09/02/rpc%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<ul>
<li><a href="https://thrift.apache.org/" target="_blank" rel="external">thrift</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go-使用gdb调试]]></title>
      <url>https://qianchenglong.github.io/2015/09/02/go-%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>编译</p>
<pre><code>go build -gcflags &quot;-N -l&quot; test.go
</code></pre></li>
<li><p>调试</p>
<pre><code>gdb test
</code></pre></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://golang.org/doc/gdb" target="_blank" rel="external">http://golang.org/doc/gdb</a></li>
<li><a href="http://blog.kenshinx.me/blog/go-gdb/" target="_blank" rel="external">mac下用gdb调试Go程序</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ps]]></title>
      <url>https://qianchenglong.github.io/2015/09/01/ps/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li><p>破折号开头的为UNIX风格</p>
</li>
<li><p>不带破折号开头的为BSD风格</p>
</li>
<li><p>gnu long option，双破折号开头</p>
</li>
</ul>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>-e</p>
<p>同<code>-A</code>完全一样，选择所有进程</p>
</li>
<li><p>-f</p>
<p>输出所有信息</p>
</li>
<li><p>-j</p>
<p>jobs格式，输出<code>PGID   SID  C STIME</code></p>
</li>
<li><p>-o format(<code>/STANDARD FORMAT SPECIFIERS</code>)</p>
<p>指定输出格式(列)</p>
<ul>
<li><p>pid</p>
</li>
<li><p>lstart 长格式启动时间</p>
</li>
<li><p>cmd 启动命令</p>
</li>
<li><p>wchan 内核阻塞</p>
</li>
</ul>
</li>
<li><p>L   Show threads, possibly with LWP and NLWP columns.</p>
</li>
</ul>
<p><strong>OUTPUT MODIFIERS</strong></p>
<ul>
<li><p>–forest</p>
<p>进程树</p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>查看当前用户进程</p>
<pre><code>ps -f
</code></pre></li>
<li><p>指定进程启动的时间</p>
<pre><code>ps -eo pid,lstart,cmd|grep user_manage
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-环境变量]]></title>
      <url>https://qianchenglong.github.io/2015/09/01/linux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h1 id="相关配置文件加载顺序"><a href="#相关配置文件加载顺序" class="headerlink" title="相关配置文件加载顺序"></a>相关配置文件加载顺序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/enviroment =&gt; /etc/profile =&gt; /etc/bash.bashrc =&gt; /etc/profile =&gt; /etc/profile.d/*.sh</span><br><span class="line">=&gt; ~/.profile(~/.bash_profile, ~/.bash_login) =&gt; ~/.bashrc =&gt; ~/.bash_aliases =&gt; /etc/bash_completion</span><br></pre></td></tr></table></figure>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li><p>/etc/enviroment</p>
<p>在系统一些核心组件加载完成后最先调用,系统级别的公共环境变量</p>
</li>
</ul>
<ul>
<li><p>/etc/profile</p>
<p>在login shell时读取, 相当于是应用级的公共环境变量</p>
</li>
<li><p>~/.profile</p>
<p>在shell被打开时, 次于/etc/profile执行, 相当于是应用级的用户环境变量</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gcc-调试编译]]></title>
      <url>https://qianchenglong.github.io/2015/08/26/gcc-%E8%B0%83%E8%AF%95%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<ul>
<li><p>打印编译详细过程</p>
<p>-v</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gcc-链接库顺序]]></title>
      <url>https://qianchenglong.github.io/2015/08/26/gcc-%E9%93%BE%E6%8E%A5%E5%BA%93%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>在gcc编译时,链接库的指定顺序会影响编译行为!</p>
<p>gcc手册说明:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-l library</span><br><span class="line">       Search the library named library when linking.  (The second alternative with the library as a separate argument is only for POSIX compliance and is not</span><br><span class="line">       recommended.)</span><br><span class="line"></span><br><span class="line">       It makes a difference where in the command you write this option; the linker searches and processes libraries and object files in the order they are</span><br><span class="line">       specified.  Thus, foo.o -lz bar.o searches library z after file foo.o but before bar.o.  If bar.o refers to functions in z, those functions may not be</span><br><span class="line">       loaded.</span><br><span class="line"></span><br><span class="line">       The linker searches a standard list of directories for the library, which is actually a file named liblibrary.a.  The linker then uses this file as if</span><br><span class="line">       it had been specified precisely by name.</span><br><span class="line"></span><br><span class="line">       The directories searched include several standard system directories plus any that you specify with -L.</span><br><span class="line"></span><br><span class="line">       Normally the files found this way are library files---archive files whose members are object files.  The linker handles an archive file by scanning</span><br><span class="line">       through it for members which define symbols that have so far been referenced but not defined.  But if the file that is found is an ordinary object file,</span><br><span class="line">       it is linked in the usual fashion.  The only difference between using an -l option and specifying a file name is that -l surrounds library with lib and</span><br><span class="line">       .a and searches several directories.</span><br></pre></td></tr></table></figure>
<p>理解:</p>
<p>假设C依赖库A,B,库B依赖于库A,则链接的时候要写为:</p>
<p>   gcc -o C -lB -lA</p>
<p>若写成:</p>
<p>   gcc -o C -lA -lB</p>
<h1 id="链接时-符号寻找过程"><a href="#链接时-符号寻找过程" class="headerlink" title="链接时,符号寻找过程"></a>链接时,符号寻找过程</h1><ol>
<li><p>根据库路径列表,依次找到需要链接的库</p>
<ul>
<li>若一个库在该路径列表中存在多个,则使用第一个找到的</li>
</ul>
</li>
<li><p>从左向右,依次找寻符号定义</p>
<ul>
<li><code>gcc -o C -lB -lA</code>,符号搜寻过程是C=&gt;B, B=&gt;A</li>
</ul>
</li>
</ol>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论!"></a>结论!</h1><p>在项目开发过层中尽量让lib是垂直关系,避免循环依赖,越是底层的库,越是往后面写</p>
<pre><code>g++ ...  obj($?) -l(上层逻辑lib) -l(中间封装lib) -l(基础lib) -l(系统lib) -o $@
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cnblogs.com/OCaml/archive/2012/06/18/2554086.html" target="_blank" rel="external">折腾gcc/g++链接时.o文件及库的顺序问题</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-C开发]]></title>
      <url>https://qianchenglong.github.io/2015/08/26/mysql-C%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h1 id="编译器参数"><a href="#编译器参数" class="headerlink" title="编译器参数"></a>编译器参数</h1><pre><code>mysql_config --cflags --libs
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[arch-修改键盘映射]]></title>
      <url>https://qianchenglong.github.io/2015/08/26/arch-%E4%BF%AE%E6%94%B9%E9%94%AE%E7%9B%98%E6%98%A0%E5%B0%84/</url>
      <content type="html"><![CDATA[<h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><pre><code>vi /etc/vconsole.conf

KEYMAP=us
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://wiki.archlinux.org/index.php/Keyboard_Configuration_in_Console_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Keyboard_Configuration_in_Console_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-mysql_use_result-VS-mysql_store_result]]></title>
      <url>https://qianchenglong.github.io/2015/08/17/mysql-mysql_use_result-VS-mysql_store_result/</url>
      <content type="html"><![CDATA[<h1 id="mysql-use-result"><a href="#mysql-use-result" class="headerlink" title="mysql_use_result"></a>mysql_use_result</h1><p>保留了如何从服务器取结果集</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li><p>客户端占用内存小</p>
</li>
<li></li>
</ul>
<h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li><p>不能随机访问结果行</p>
</li>
<li><p>必须访问完,才能获取行数</p>
</li>
<li><p>客户端对结果处理必须得快,否则对服务端造成压力</p>
</li>
<li><p>必须从服务端获取所有结果,即使已经找到需要的行</p>
</li>
</ul>
<h1 id="mysql-store-result"><a href="#mysql-store-result" class="headerlink" title="mysql_store_result"></a>mysql_store_result</h1><p>将sql执行结果全部获取到客户端</p>
<h2 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h2><ul>
<li><p>能直接获取结果行数</p>
</li>
<li><p>能随机访问结果行</p>
</li>
</ul>
<h2 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li>客户端占用内存大,可能内存溢出</li>
</ul>
<h1 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h1><ul>
<li>都需要调用<code>mysql_free_result</code>释放内存</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>mysql-manual.23.8.6</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[条件变量]]></title>
      <url>https://qianchenglong.github.io/2015/08/17/%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h1 id="为什么需要条件变量"><a href="#为什么需要条件变量" class="headerlink" title="为什么需要条件变量"></a>为什么需要条件变量</h1><ul>
<li><code>mutex</code>只能保证互斥地操作共享资源,不能及时通知其他线程某一条件已经满足</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[虚假唤醒]]></title>
      <url>https://qianchenglong.github.io/2015/08/17/%E8%99%9A%E5%81%87%E5%94%A4%E9%86%92/</url>
      <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>在使用条件变量时,有可能<code>pthread_cond_wait</code>返回时,条件并不满足</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><ul>
<li>在多核CPU上无法完全实现条件操作语义</li>
</ul>
<h1 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_lock(&amp;lock);</span><br><span class="line"><span class="keyword">while</span> (condition_is_false) &#123;</span><br><span class="line">    pthread_cond_wait(&amp;cond, &amp;lock);</span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.fenesky.com/blog/2014/06/22/cond-spurious-wakeup.html" target="_blank" rel="external">http://www.fenesky.com/blog/2014/06/22/cond-spurious-wakeup.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pthread-主线程等待线程组结束]]></title>
      <url>https://qianchenglong.github.io/2015/08/15/pthread-%E4%B8%BB%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E7%BA%BF%E7%A8%8B%E7%BB%84%E7%BB%93%E6%9D%9F/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUM; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;tid[i], NULL, counter, (void *)&amp;i) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"pthread_create error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUM; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pthread_join(tid[i], NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"pthread_join error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/11624545/how-to-make-main-thread-wait-for-all-child-threads-finish" target="_blank" rel="external">http://stackoverflow.com/questions/11624545/how-to-make-main-thread-wait-for-all-child-threads-finish</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程同步]]></title>
      <url>https://qianchenglong.github.io/2015/08/15/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><ol>
<li><p>子线程升序打印线程编号(主线程传进去的)</p>
</li>
<li><p>子线程升序打印全局变量</p>
</li>
</ol>
<h1 id="未同步前"><a href="#未同步前" class="headerlink" title="未同步前"></a>未同步前</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_NUM 10   <span class="comment">// 线程个数</span></span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;  <span class="comment">// 共享资源</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">counter</span><span class="params">(<span class="keyword">void</span> *arg)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = *(int *)(arg);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);   <span class="comment">// 处理其他无需同步的操作</span></span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"线程编号: "</span> &lt;&lt; num &lt;&lt; <span class="string">":"</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    return (void*)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid[THREAD_NUM];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUM; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pthread_create(&amp;tid[i], NULL, counter, (void *)&amp;i) != <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">"pthread_create error"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="../img/多线程同步-01.png" alt=""></p>
<h2 id="原因及解决"><a href="#原因及解决" class="headerlink" title="原因及解决"></a>原因及解决</h2><ul>
<li><p>创建子线程后,线程调度顺序不可预测(可能主线程先运行,也可能子线程先运行)</p>
<p>解决: 同步主线程和子线程的运行顺序,使子线程运行后,主线程在运行</p>
</li>
<li><p>子线程对共享资源操作未同步</p>
<p>解决: 对共享资源采取同步手段(互斥锁)</p>
</li>
</ul>
<h1 id="同步后"><a href="#同步后" class="headerlink" title="同步后"></a>同步后</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[systemd-coredump]]></title>
      <url>https://qianchenglong.github.io/2015/08/15/systemd-coredump/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查看core文件</p>
<pre><code>coredumpctl list
</code></pre></li>
<li><p>导出core文件</p>
<pre><code>coredumpctl -o core dump PID
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用coredump调试]]></title>
      <url>https://qianchenglong.github.io/2015/08/15/%E4%BD%BF%E7%94%A8coredump%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<ol>
<li><p>打开coredump生成功能</p>
<pre><code>ulimit -c unlimited
</code></pre></li>
<li><p>查看core文件位置</p>
<pre><code>cat /proc/sys/kernel/core_pattern
</code></pre></li>
<li><p>使用gdb调试</p>
<pre><code>gdb -c core文件 程序
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pthread]]></title>
      <url>https://qianchenglong.github.io/2015/08/14/pthread/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>线程共享进程所有资源(文本段,数据段,堆,文件描述符等)</p>
</li>
<li><p>线程句柄<code>pthread_t</code>是一个结构,跟具体实现相关,不能直接拿来比较,需要使用<code>pthread_equal</code></p>
</li>
</ul>
<h1 id="重要API"><a href="#重要API" class="headerlink" title="重要API"></a>重要API</h1><p>| 名称           | 功能                                                                               |<br>|—————-+————————————————————————————|<br>| pthread_create | 创建线程                                                                           |<br>| pthread_self   | 获取线程ID                                                                         |<br>| pthread_join   | 阻塞等待指定线程退出,获取其退出状态                                                |<br>| pthread_exit   | 线程主动退出                                                                       |<br>| pthread_cancel | 请求取消同一线程中的其他线程                                                       |<br>| pthread_detach | 使该进程处于分离状态(线程一旦终止,资源立马回收,不可调用pthread_join获取其退出状态) |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[virtualbox-在win下服务启动]]></title>
      <url>https://qianchenglong.github.io/2015/08/11/virtualbox-%E5%9C%A8win%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<pre><code>&quot;C:\Program Files\Oracle\VirtualBox\VBoxManage.exe&quot; startvm &quot;Arch-2015-06-19&quot; --type headless
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[actor模型]]></title>
      <url>https://qianchenglong.github.io/2015/08/10/actor%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>当一个参与者接收到一则消息，它可以做出一些决策、创建更多的参与者、发送更多的消息、决定要如何回答接下来的消息。</p>
</li>
<li><p>actor是一个计算实体，当其收到消息时，可以并发执行如下操作：</p>
<ol>
<li><p>发送有限数量的消息给其他actor</p>
</li>
<li><p>创建有限数量的新actor</p>
</li>
<li><p>指定收到下一消息时的行为</p>
</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-十六进制编辑]]></title>
      <url>https://qianchenglong.github.io/2015/08/05/vim-%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E7%BC%96%E8%BE%91/</url>
      <content type="html"><![CDATA[<ul>
<li><p>十六进制编辑</p>
<pre><code>:%!xxd 
</code></pre></li>
<li><p>返回到文本编辑</p>
<pre><code>:%!xxd -r
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-找出高亮定义位置]]></title>
      <url>https://qianchenglong.github.io/2015/08/05/vim-%E6%89%BE%E5%87%BA%E9%AB%98%E4%BA%AE%E5%AE%9A%E4%B9%89%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<pre><code>:verbose hi ProtoType
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[apache-fastcgi配置]]></title>
      <url>https://qianchenglong.github.io/2015/08/05/mod_fcgid%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ul>
<li><p>可执行</p>
<pre><code>Options +ExecCGI
</code></pre></li>
<li><p>该目录下所有文件作为fastcgi程序执行</p>
<pre><code>SetHandler fcgid-script
</code></pre></li>
<li><p>指定文件拓展名作为fastcgi程序执行</p>
<pre><code>AddHandler fastcgi-script fcg fcgi fpl
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lsof]]></title>
      <url>https://qianchenglong.github.io/2015/08/05/lsof/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查看哪个进程打开了指定端口</p>
<pre><code>lsof -i :8000
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[netstat]]></title>
      <url>https://qianchenglong.github.io/2015/08/05/netstat/</url>
      <content type="html"><![CDATA[<ul>
<li><p>-t  查看tcp</p>
</li>
<li><p>-x  查看unix域套接字</p>
</li>
<li><p>-l  只查看listen端口</p>
</li>
<li><p>-n  端口数字显示，不解释其所代表服务，以便加快速度</p>
</li>
<li><p>-p  查看所属进程</p>
</li>
</ul>
<h1 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h1><p>Recv-Q：表示收到的数据已经在本地接收缓冲，但是还有多少没有被进程取走<br>Send-Q：对方没有收到的数据或者说没有Ack的，还在发送缓冲区</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><p>查看tcp监听端口</p>
<pre><code>netstat -tln
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mod_fcgid]]></title>
      <url>https://qianchenglong.github.io/2015/08/05/mod_fcgid/</url>
      <content type="html"><![CDATA[<h1 id="通信机制"><a href="#通信机制" class="headerlink" title="通信机制"></a>通信机制</h1><p>unix域套接字</p>
<pre><code>netstat -lxnp
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-管道]]></title>
      <url>https://qianchenglong.github.io/2015/08/05/linux-%E7%AE%A1%E9%81%93/</url>
      <content type="html"><![CDATA[<h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><ul>
<li><p>只能在具有亲缘关系的进程间使用</p>
</li>
<li><p>历史上,都是半双工的</p>
</li>
</ul>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>对管道写,不大于PIPE_BUF(<code>/usr/include/linux/limits.h</code> =&gt; 4K)时,可以保证不会与其他进程的写操作穿插(原子写)</li>
</ul>
<h1 id="与普通文件差异"><a href="#与普通文件差异" class="headerlink" title="与普通文件差异"></a>与普通文件差异</h1><ul>
<li><p>管道的缓冲区固定大小(4K),不会像文件一样无限增长</p>
<ul>
<li>当管道满时,调用write会被阻塞</li>
<li>当管道空时,调用read也会被阻塞</li>
</ul>
</li>
<li><p>管道读是一次性的,一旦被读,就被丢弃</p>
</li>
</ul>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>在Linux中，管道的实现并没有使用专门的数据结构，而是借助了文件系统的file结构和VFS的索引节点inode。<br>通过将两个 file 结构指向同一个临时的 VFS 索引节点，而这个 VFS 索引节点又指向一个物理页面而实现的。</p>
<p><img src="../img/管道_01.png" alt=""></p>
<p>图中有两个 file 数据结构，但它们定义文件操作例程地址是不同的.<br>其中一个是向管道中写入数据的例程地址，而另一个是从管道中读出数据的例程地址。<br>这样，用户程序的系统调用仍然是通常的文件操作，而内核却利用这种抽象机制实现了管道这一特殊操作。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://oss.org.cn/kernel-book/ch07/7.1.1.htm" target="_blank" rel="external">http://oss.org.cn/kernel-book/ch07/7.1.1.htm</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gdb]]></title>
      <url>https://qianchenglong.github.io/2015/08/04/gdb/</url>
      <content type="html"><![CDATA[<h1 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h1><ul>
<li><p>自定义初始化设置</p>
<pre><code>~/.gdbinit
</code></pre></li>
<li><p>载入配置文件</p>
<pre><code>source ~/.gdbinit
</code></pre></li>
</ul>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><ul>
<li><p>通过文件名</p>
<pre><code>gdb &lt;program&gt;
</code></pre></li>
<li><p>使用core调试</p>
<pre><code>gdb -c &lt;core-file-name&gt; &lt;program&gt;
</code></pre></li>
<li><p>attach到指定进程</p>
<pre><code>gdb -p &lt;pid&gt;
gdb attach &lt;pid&gt;
</code></pre></li>
</ul>
<h1 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h1><ul>
<li><p>查看所有线程调用栈</p>
<pre><code>thread apply all bt
</code></pre></li>
<li><p>调试指定线程</p>
<pre><code>thread &lt;thread-num&gt;
</code></pre></li>
<li><p>锁定线程(阻止线程切换)</p>
<pre><code>set scheduler-locking on
</code></pre></li>
</ul>
<h1 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h1><ul>
<li><p>运行到指定行</p>
<pre><code>until $line-number
</code></pre></li>
</ul>
<h1 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h1><ul>
<li><p>在指定文件指定行</p>
<pre><code>break filename:linenum
</code></pre></li>
<li><p>删除断点</p>
<pre><code>clear linenum
</code></pre></li>
</ul>
<h1 id="栈切换"><a href="#栈切换" class="headerlink" title="栈切换"></a>栈切换</h1><ul>
<li><p>根据编号切换</p>
<pre><code>frame n
</code></pre></li>
<li><p>向上</p>
<pre><code>up &lt;num&gt;
</code></pre></li>
</ul>
<h1 id="查询类"><a href="#查询类" class="headerlink" title="查询类"></a>查询类</h1><ul>
<li><p>打印调用栈</p>
<pre><code>bt
where
</code></pre></li>
<li><p>打印当前帧(查询当前执行语句位置)</p>
<pre><code>frame
</code></pre></li>
<li><p>打印当前行</p>
<pre><code>list *$pc
</code></pre></li>
<li><p>x(examine)</p>
<p>x /[nfu] ADDRESS(<strong>若ADDRESS是一个变量，则认为变量值为要查看的地址</strong>)<br>n用来指定重复的次数，就是指定显示格式和size确定的一个单位多少次<br>#n默认为1</p>
<p>f用来指定显示的格式，同print一样</p>
<pre><code>Format letters
o(octal), x(hex), d(decimal), u(unsigned decimal), t(binary),
f(float), a(address), i(instruction), c(char) and s(string)
</code></pre><p>u(unit)，指定一个单位的长度</p>
<pre><code>Size letters
b(byte), h(halfword, 2B), w(word, 4B), g(giant, 8 bytes)
</code></pre><p>x/3uh 0x54320</p>
<pre><code>从0x54320开始，以(h)2B为单位，(u)无符号十进制输出，显示3uh个这样的单
位，总共显示2 × 3 = 6B的内存
</code></pre><p>x /10s *argv    查看环境变量</p>
</li>
</ul>
<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><ul>
<li><p>set args ARG-list</p>
<p>设置程序的命令行参数，依次传给argv[1],…<br>#需要在文件载入之后，程序开始执行之前</p>
</li>
<li><p>set print pretty</p>
<p>可爱的打印出结构体</p>
</li>
</ul>
<h1 id="gdb打印STLhttps-sourceware-org-gdb-wiki-STLSupport"><a href="#gdb打印STLhttps-sourceware-org-gdb-wiki-STLSupport" class="headerlink" title="gdb打印STLhttps://sourceware.org/gdb/wiki/STLSupport"></a>gdb打印STL<a href="https://sourceware.org/gdb/wiki/STLSupport" target="_blank" rel="external">https://sourceware.org/gdb/wiki/STLSupport</a></h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c++-文件读写]]></title>
      <url>https://qianchenglong.github.io/2015/07/29/c++-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
      <content type="html"><![CDATA[<h1 id="fstream"><a href="#fstream" class="headerlink" title="fstream"></a>fstream</h1><ul>
<li><p>默认读写打开</p>
<ul>
<li>从文件开始读</li>
<li>从文件末尾写</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[后台开发经验]]></title>
      <url>https://qianchenglong.github.io/2015/07/28/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ol>
<li><p>撤单回退资金,双重校验(传入的UID, 订单关联的UID)</p>
</li>
<li><p>增量拉取</p>
<ul>
<li><p>确定前端排序规则(排序键)</p>
</li>
<li><p>传入(排序键值, 拉取个数)</p>
</li>
</ul>
</li>
<li><p>错误处理</p>
<ul>
<li>请求参数严格校验(防止执行时导致内部错误)</li>
<li>SQL错误结合接口意义,返回客户端错误提示</li>
</ul>
</li>
<li><p>保持app原版本兼容时,相关数据表,追加版本号</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c-获取各种级别时间值]]></title>
      <url>https://qianchenglong.github.io/2015/07/27/c-%E8%8E%B7%E5%8F%96%E5%90%84%E7%A7%8D%E7%BA%A7%E5%88%AB%E6%97%B6%E9%97%B4%E5%80%BC/</url>
      <content type="html"><![CDATA[<ul>
<li><p>秒级别</p>
<pre><code>time()
</code></pre></li>
<li><p>微秒</p>
<pre><code>gettimeofday()
</code></pre></li>
</ul>
<ul>
<li><p>纳秒</p>
<pre><code>clock_gettime()
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-日期加减操作]]></title>
      <url>https://qianchenglong.github.io/2015/07/24/python-%E6%97%A5%E6%9C%9F%E5%8A%A0%E5%87%8F%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datetime.date.today() + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">today = datetime.date.today() + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">period = int(today.strftime(<span class="string">"%Y%m%d"</span>))</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/1506901/cleanest-and-most-pythonic-way-to-get-tomorrows-date" target="_blank" rel="external">http://stackoverflow.com/questions/1506901/cleanest-and-most-pythonic-way-to-get-tomorrows-date</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git-常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/07/24/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>–git-dir 指定<code>.git</code>目录</p>
</li>
<li><p>–work-dir 指定工作目录</p>
</li>
</ul>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><p>丢弃未缓存的修改</p>
<pre><code>git checkout -- order.cpp
</code></pre></li>
<li><p>默认推送所有分支和tag</p>
<pre><code>git push --all origin -u
</code></pre></li>
<li><p>迁出到指定目录</p>
<pre><code>git --work-tree=../v0.03 checkout v0.03 .
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-进程后台运行]]></title>
      <url>https://qianchenglong.github.io/2015/07/23/linux-%E8%BF%9B%E7%A8%8B%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</url>
      <content type="html"><![CDATA[<ul>
<li><p>nohub</p>
<p>nohup ping www.google.com &amp;</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[boost-lexical_cast]]></title>
      <url>https://qianchenglong.github.io/2015/07/23/boost-lexical_cast/</url>
      <content type="html"><![CDATA[<ul>
<li><p>不能转换空字符串!(需要捕获异常)</p>
<pre><code>try {
    boost::lexical_cast&lt;int&gt;(&quot;&quot;);
} catch (boost::bad_lexical_cast &amp;e) {
    ;
}
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[bash-获得脚本文件所在目录]]></title>
      <url>https://qianchenglong.github.io/2015/07/23/bash-%E8%8E%B7%E5%BE%97%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname <span class="variable">$0</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-修改环境变量后立即生效]]></title>
      <url>https://qianchenglong.github.io/2015/07/22/windows-%E4%BF%AE%E6%94%B9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E7%AB%8B%E5%8D%B3%E7%94%9F%E6%95%88/</url>
      <content type="html"><![CDATA[<ul>
<li><p>打开cmd</p>
<pre><code>set path=&quot;&quot;
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-安装go]]></title>
      <url>https://qianchenglong.github.io/2015/07/22/linux-%E5%AE%89%E8%A3%85go/</url>
      <content type="html"><![CDATA[<ol>
<li><p>下载对应二进制包(<a href="https://golang.org/dl/" target="_blank" rel="external">官网</a>)</p>
</li>
<li><p>解压安装</p>
<p>tar -C /opt/go-$VERSION -xvf go$VERSION.$OS-$ARCH.tar.gz</p>
</li>
<li><p>修改环境变量</p>
<p>vi /etc/profile</p>
<p>export GOROOT=/opt/go-$VERSION<br>export PATH=$PATH:$GOROOT/bin</p>
</li>
<li><p>生效</p>
<ul>
<li><p><code>source /etc/profile</code></p>
</li>
<li><p>重启sshd</p>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-修改环境变量后及时生效]]></title>
      <url>https://qianchenglong.github.io/2015/07/22/linux-%E4%BF%AE%E6%94%B9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8F%8A%E6%97%B6%E7%94%9F%E6%95%88/</url>
      <content type="html"><![CDATA[<h1 id="source-etc-profile"><a href="#source-etc-profile" class="headerlink" title="source /etc/profile"></a><code>source /etc/profile</code></h1><h1 id="重启对应的父进程"><a href="#重启对应的父进程" class="headerlink" title="重启对应的父进程"></a>重启对应的父进程</h1><ul>
<li>对ssh来说,重启sshd</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sql-数据更新]]></title>
      <url>https://qianchenglong.github.io/2015/07/20/sql-%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li><p>记录不存在,则插入</p>
</li>
<li><p>记录若存在,则更新指定值</p>
</li>
</ul>
<h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><ul>
<li>数据必须存在唯一性</li>
</ul>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="1-INSERT-ON-DUPLICATE-KEY-UPDATE"><a href="#1-INSERT-ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="1.INSERT ... ON DUPLICATE KEY UPDATE"></a>1.<code>INSERT ... ON DUPLICATE KEY UPDATE</code></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">"A"</span>, <span class="number">19</span>) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">name</span>=<span class="keyword">VALUES</span>(<span class="keyword">name</span>), age=<span class="keyword">VALUES</span>(age)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-字符串]]></title>
      <url>https://qianchenglong.github.io/2015/07/16/mysql-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><ul>
<li><p><code>char(N)</code>, <code>varchar(N)</code>,N指的是<strong>特定字符集下的</strong>字符长度</p>
<ul>
<li>latin1下,char(1)占1字节</li>
<li>utf-8下,char(1)占1~4字节,汉字一般占3字节</li>
</ul>
</li>
</ul>
<h1 id="长度判断"><a href="#长度判断" class="headerlink" title="长度判断"></a>长度判断</h1><ul>
<li><p><code>length()</code> 获取字符串占用多少字节</p>
</li>
<li><p><code>char_length()</code> 获取字符串长度(特定字符集下的字符个数)</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sql-经验]]></title>
      <url>https://qianchenglong.github.io/2015/07/15/sql-%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ol>
<li><p>除非查询所有字段，否则避免使用select *</p>
<ul>
<li>增加IO，增加查询时间</li>
<li>增加网络传输，浪费用户流量</li>
<li>增加不安全性，客户端看见了所有字段</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-IP类型.md]]></title>
      <url>https://qianchenglong.github.io/2015/07/15/mysql-IP%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<ul>
<li><p>int</p>
</li>
<li><p>字符串转int</p>
<pre><code>select inet_aton(&apos;192.168.0.1&apos;);
</code></pre></li>
<li><p>int转字符串</p>
<pre><code>select inet_ntoa(&apos;3232235521&apos;);
</code></pre></li>
<li><p>判断IP段</p>
<pre><code>select inet_aton(&apos;192.168.0.0&apos;) &lt;= inet_aton(&apos;192.168.0.1&apos;);
select inet_aton(&apos;192.168.1.1&apos;) &lt;= inet_aton(&apos;192.168.0.255&apos;);
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数字签名]]></title>
      <url>https://qianchenglong.github.io/2015/07/14/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1><p>| 名词           | 解释             |<br>|—————-+——————|<br>| 受信任的发送方 | 拥有密钥的发送方 |</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ul>
<li>发送方</li>
</ul>
<p>原文 =&gt; HASH =&gt; 加密(RSA) =&gt; 签名</p>
<ul>
<li>接收方</li>
</ul>
<p>除sign外的数据 =&gt; HASH ==? 发送过来的sign =&gt; 解密(RSA)</p>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul>
<li><p>保证数据是从指定源发送的</p>
<p>因为受信任的发送方才有密钥，只有该密钥加密的数据才能正确地被接收方解密</p>
</li>
<li><p>防止数据在途中被第三方修改，保证了数据的完整性</p>
<p>因为签名是基于全文HASH后得到的，任何修改原文操作，在没有密钥的情况下，无法重新签名，<br>也就意味着该数据无效！</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-常用变量]]></title>
      <url>https://qianchenglong.github.io/2015/07/13/cmake-%E5%B8%B8%E7%94%A8%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<ul>
<li><p><code>CMAKE_INSTALL_RPATH_USE_LINK_PATH</code></p>
<pre><code>使用`make install`安装时，不去除RPATH
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编译apache]]></title>
      <url>https://qianchenglong.github.io/2015/07/11/%E7%BC%96%E8%AF%91apache/</url>
      <content type="html"><![CDATA[<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><ul>
<li><p>pcre</p>
</li>
<li><p>apr</p>
</li>
<li><p>apr-util</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="编译安装pcre"><a href="#编译安装pcre" class="headerlink" title="编译安装pcre"></a>编译安装pcre</h2><pre><code>wget http://sourceforge.net/projects/pcre/files/pcre/8.37/pcre-8.37.tar.bz2
tar xvf pcre-8.37.tar.bz2
cd pcre-8.37
./configure --prefix=/opt/pcre-8.37
make
make install
</code></pre><h2 id="编译安装apache"><a href="#编译安装apache" class="headerlink" title="编译安装apache"></a>编译安装apache</h2><pre><code>wget http://mirrors.hust.edu.cn/apache//httpd/httpd-2.4.12.tar.bz2
wget http://apache.fayea.com//apr/apr-1.5.2.tar.bz2
wget http://apache.fayea.com//apr/apr-util-1.5.4.tar.bz2
tar xvf httpd-2.4.12.tar.bz2
tar xvf apr-1.5.2.tar.bz2 -C httpd-2.4.12/srclib
tar xvf apr-util-1.5.4.tar.bz2 -C httpd-2.4.12/srclib
mv httpd-2.4.12/srclib/apr-1.5.2 httpd-2.4.12/srclib/apr
mv httpd-2.4.12/srclib/apr-util-1.5.4 httpd-2.4.12/srclib/apr-util
cd httpd-2.4.12
./configure --prefix=/opt/httpd-2.4.12 --with-pcre=/opt/pcre-8.37
make
make install
</code></pre><p>参考：</p>
<ol>
<li><a href="http://httpd.apache.org/docs/2.4/install.html" target="_blank" rel="external">http://httpd.apache.org/docs/2.4/install.html</a></li>
</ol>
<h2 id="编译安装mod-fcgid-官网"><a href="#编译安装mod-fcgid-官网" class="headerlink" title="编译安装mod_fcgid(官网)"></a>编译安装mod_fcgid(<a href="http://httpd.apache.org/download.cgi#mod_fcgid" target="_blank" rel="external">官网</a>)</h2><pre><code>wget http://mirrors.cnnic.cn/apache/httpd/mod_fcgid/mod_fcgid-2.3.9.tar.bz2
tar xvf mod_fcgid-2.3.9.tar.bz2
cd mod_fcgid-2.3.9
APXS=/opt/httpd-2.4.12/bin/apxs ./configure.apxs
make
make install
</code></pre><p>参考：</p>
<ol>
<li>README-FCGID</li>
</ol>
<h2 id="编译安装mod-wsgi-官网"><a href="#编译安装mod-wsgi-官网" class="headerlink" title="编译安装mod_wsgi(官网)"></a>编译安装mod_wsgi(<a href="https://code.google.com/p/modwsgi/" target="_blank" rel="external">官网</a>)</h2><pre><code>git clone https://github.com/GrahamDumpleton/mod_wsgi.git
cd mod_wsgi/
./configure --with-apxs=/opt/httpd-2.4.12/bin/apxs --with-python=/usr/bin/python3
make
make install
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[thinkpad-安装系统]]></title>
      <url>https://qianchenglong.github.io/2015/07/09/thinkpad-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<ol>
<li><p>开机按<code>Enter</code> =&gt; <code>F1</code>进入BIOS</p>
</li>
<li><p>【starup】=&gt; <code>legacy ONLY</code></p>
</li>
<li><p>【security】 =&gt; <code>disabled</code></p>
</li>
<li><p>保存退出</p>
</li>
<li><p>开机<code>F12</code>选择对应启动</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[truncate和delete区别]]></title>
      <url>https://qianchenglong.github.io/2015/07/09/truncate%E5%92%8Cdelete%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<ol>
<li><p>truncate属于DDL，delete输入DML</p>
</li>
<li><p>truncate不可回滚，delete可回滚</p>
</li>
<li><p>delete可接where子句</p>
</li>
<li><p>truncate执行更快</p>
</li>
<li><p>truncate回收表空间，占用系统日志资源更少</p>
</li>
<li><p>truncate不触发delete触发器</p>
</li>
<li><p>truncate不能被授权</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sql-语句分类]]></title>
      <url>https://qianchenglong.github.io/2015/07/09/sql-%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h1 id="数据查询语言-Data-Query-Language-DQL"><a href="#数据查询语言-Data-Query-Language-DQL" class="headerlink" title="数据查询语言(Data Query Language, DQL)"></a>数据查询语言(Data Query Language, DQL)</h1><p>查询数据</p>
<ul>
<li><code>select</code></li>
</ul>
<h1 id="数据操纵语言-Data-Manipulation-Language-DML"><a href="#数据操纵语言-Data-Manipulation-Language-DML" class="headerlink" title="数据操纵语言(Data Manipulation Language, DML)"></a>数据操纵语言(Data Manipulation Language, DML)</h1><p>对数据的修改操作</p>
<ul>
<li><code>insert</code></li>
<li><code>update</code></li>
<li><code>delete</code></li>
</ul>
<h1 id="数据定义语言-Data-Definition-Language-DDl"><a href="#数据定义语言-Data-Definition-Language-DDl" class="headerlink" title="数据定义语言(Data Definition Language, DDl)"></a>数据定义语言(Data Definition Language, DDl)</h1><p>定义，修改，删除数据库实体(表，视图，触发器等)</p>
<ul>
<li><code>create</code></li>
<li><code>alter</code></li>
<li><code>drop</code></li>
<li><code>truncate</code></li>
</ul>
<h1 id="数据控制语言-Data-Control-Language-DCL"><a href="#数据控制语言-Data-Control-Language-DCL" class="headerlink" title="数据控制语言(Data Control Language, DCL)"></a>数据控制语言(Data Control Language, DCL)</h1><p>用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等</p>
<ul>
<li><p><code>grant</code></p>
</li>
<li><p><code>deny</code></p>
</li>
<li><p><code>revoke</code></p>
</li>
<li><p><code>rollback</code></p>
</li>
<li><p><code>commit</code></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-事务]]></title>
      <url>https://qianchenglong.github.io/2015/07/09/mysql-%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<ul>
<li><p>当连接设置为自动提交时，所有修改语句永久生效，不可回滚！</p>
</li>
<li><p>当事务未提交时，数据只对当前连接可见！</p>
</li>
<li><p>mysql默认自动提交</p>
</li>
</ul>
<pre><code>SELECT @@autocommit;
</code></pre><ul>
<li><p>设置为手动提交</p>
<pre><code>SET autocommit=0;
</code></pre></li>
<li><p>手动提交</p>
<pre><code>commit;
</code></pre></li>
<li><p>回滚</p>
<pre><code>rollback;
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zetcode.com/databases/mysqltutorial/transactions/#autocommit" target="_blank" rel="external">http://zetcode.com/databases/mysqltutorial/transactions/#autocommit</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sudo赋权]]></title>
      <url>https://qianchenglong.github.io/2015/07/09/sudo%E8%B5%8B%E6%9D%83/</url>
      <content type="html"><![CDATA[<pre><code>usermod -a -G sudo mzs0207
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs-调试]]></title>
      <url>https://qianchenglong.github.io/2015/07/08/nodejs-%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<ol>
<li><p>安装</p>
<pre><code>npm install -g node-inspector
</code></pre></li>
<li><p>运行</p>
<pre><code>node-inspector
</code></pre></li>
<li><p>打开调试页面</p>
<pre><code>http://127.0.0.1:8080/?ws=127.0.0.1:8080&amp;port=5858
</code></pre></li>
<li><p>调试程序</p>
<pre><code>node --debug *.js
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-执行注释头]]></title>
      <url>https://qianchenglong.github.io/2015/07/08/python-%E6%89%A7%E8%A1%8C%E6%B3%A8%E9%87%8A%E5%A4%B4/</url>
      <content type="html"><![CDATA[<p>在python文件开头指定python版本，windows下也可用(<strong>文件关联使用py.exe打开</strong>)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#! /usr/bin/env python2</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.zhihu.com/question/22846291" target="_blank" rel="external">http://www.zhihu.com/question/22846291</a></li>
<li><a href="https://docs.python.org/3/using/windows.html#python-launcher-for-windows" target="_blank" rel="external">https://docs.python.org/3/using/windows.html#python-launcher-for-windows</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-运行指定python版本]]></title>
      <url>https://qianchenglong.github.io/2015/07/08/windows-%E8%BF%90%E8%A1%8C%E6%8C%87%E5%AE%9Apython%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<ul>
<li><p>python2</p>
<pre><code>py -2 *.py
</code></pre></li>
<li><p>python3</p>
<pre><code>py -3 *.py
</code></pre><p>py –help</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/3809314/how-to-install-both-python-2-x-and-python-3-x-in-windows-7" target="_blank" rel="external">http://stackoverflow.com/questions/3809314/how-to-install-both-python-2-x-and-python-3-x-in-windows-7</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-后台执行外部程序]]></title>
      <url>https://qianchenglong.github.io/2015/07/08/vim-%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<pre><code>call system(&apos;cmd&apos;)
</code></pre><p>a</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Crypto++使用]]></title>
      <url>https://qianchenglong.github.io/2015/07/08/Crypto++%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><pre><code>g++ *.c -lcryptopp -lpthread
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[注册表运行vbs]]></title>
      <url>https://qianchenglong.github.io/2015/07/07/%E6%B3%A8%E5%86%8C%E8%A1%A8%E8%BF%90%E8%A1%8Cvbs/</url>
      <content type="html"><![CDATA[<pre><code>wscript.exe E:\OS\Windows\bin\mklink.vbs &quot;%1&quot;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-常用命令行参数]]></title>
      <url>https://qianchenglong.github.io/2015/07/01/mysql-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<ul>
<li><p>–skip-column-names</p>
<p>结果列不输出列名</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jsoncpp]]></title>
      <url>https://qianchenglong.github.io/2015/07/01/jsoncpp/</url>
      <content type="html"><![CDATA[<h1 id="主要的类"><a href="#主要的类" class="headerlink" title="主要的类"></a>主要的类</h1><p>| 类名         | 作用                                                                                                                                           |<br>|————–+————————————————————————————————————————————————|<br>| Json::Value  | 可以表示里所有的类型                                                                                                                           |<br>| Json::Reader | 将json文件流或字符串解析到Json::Value, 主要函数有Parse                                                                                         |<br>| Json::Writer | 与Json::Reader相反，将Json::Value转化成字符串流，注意它的两个子类：Json::FastWriter和Json::StyleWriter，分别输出不带格式的json和带格式的json。 |</p>
<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><ul>
<li><p>判断json中是否有指定成员</p>
<pre><code>bool isMember(&quot;id&quot;)
</code></pre></li>
<li><p>取指定值，若不存在，则使用默认值</p>
<pre><code>Value get(ArrayIndex index, const Value &amp;defaultValue)
</code></pre><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1></li>
<li><p>文件需要是<code>UTF-8</code>不带BOM!</p>
</li>
<li><p>下标访问时，若该元素不存在，则返回值为<code>json::Value::nullValue</code></p>
</li>
<li><p><code>json::Value::nullValue</code>转换为空字符串<code>&quot;&quot;</code>(<code>\X00</code>)</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++11-枚举类型转换]]></title>
      <url>https://qianchenglong.github.io/2015/07/01/C++11-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="boost-lexcial-cast"><a href="#boost-lexcial-cast" class="headerlink" title="boost::lexcial_cast"></a><code>boost::lexcial_cast</code></h1><p>##优点</p>
<ul>
<li>可直接与string互转</li>
<li>方法一致，易用</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>需要为枚举类型重载IO</li>
</ul>
<h1 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a><code>static_cast</code></h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>直接可用</li>
</ul>
<h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>与string转换需要二次转换(先转为整型<code>underlying_type</code>，再转换为string)，难用</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-获取变量类型名]]></title>
      <url>https://qianchenglong.github.io/2015/07/01/C++-%E8%8E%B7%E5%8F%96%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%90%8D/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(a).name() &lt;&lt; <span class="string">":"</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p><code>./a.out | c++filt  -t</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/4465872/why-does-typeid-name-return-weird-characters-using-gcc-and-how-to-make-it-prin" target="_blank" rel="external">http://stackoverflow.com/questions/4465872/why-does-typeid-name-return-weird-characters-using-gcc-and-how-to-make-it-prin</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[爬虫优化经验]]></title>
      <url>https://qianchenglong.github.io/2015/06/30/%E7%88%AC%E8%99%AB%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ul>
<li>URL中host使用IP，域名解析，重定向等费时间(还需要设置header[“host”]为原域名)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-项目中使用protobbuf]]></title>
      <url>https://qianchenglong.github.io/2015/06/26/cmake-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8protobbuf/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cmake.org/cmake/help/v3.0/module/FindProtobuf.html" target="_blank" rel="external">http://www.cmake.org/cmake/help/v3.0/module/FindProtobuf.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++11-字符串与数字转换]]></title>
      <url>https://qianchenglong.github.io/2015/06/26/C++11-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="数字-gt-字符串"><a href="#数字-gt-字符串" class="headerlink" title="数字 =&gt; 字符串"></a>数字 =&gt; 字符串</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">float</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">double</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> val)</span></span>;</span><br></pre></td></tr></table></figure>
<h1 id="字符串-gt-数字"><a href="#字符串-gt-数字" class="headerlink" title="字符串 =&gt; 数字"></a>字符串 =&gt; 数字</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stoi</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, size_t *idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">stol</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, size_t *idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">stoul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, size_t *idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">stoll</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, size_t *idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">stoull</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, size_t *idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">stof</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, size_t *idx = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">stod</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, size_t *idx = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">stold</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, size_t *idx = <span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul>
<li><p>优先使用<code>boost::lexical_cast</code></p>
<ul>
<li><p>效率更高</p>
</li>
<li><p>接口统一，代码优雅</p>
</li>
<li><p>locale敏感</p>
</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/23582089/is-boostlexical-cast-redundant-with-c11-stoi-stof-and-family" target="_blank" rel="external">http://stackoverflow.com/questions/23582089/is-boostlexical-cast-redundant-with-c11-stoi-stof-and-family</a></li>
<li><a href="http://www.boost.org/doc/libs/1_55_0/doc/html/boost_lexical_cast/performance.html#boost_lexical_cast.performance.tests_description" target="_blank" rel="external">http://www.boost.org/doc/libs/1_55_0/doc/html/boost_lexical_cast/performance.html#boost_lexical_cast.performance.tests_description</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-数据类型]]></title>
      <url>https://qianchenglong.github.io/2015/06/26/mysql-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h1><ul>
<li><p>用来存储字节字符串，不像char类型，存储对应的字符编码值</p>
</li>
<li><p>可以指定存储长度</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UUID]]></title>
      <url>https://qianchenglong.github.io/2015/06/26/UUID/</url>
      <content type="html"><![CDATA[<h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><p>通用唯一识别码 (Universally Unique Identifier)</p>
<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>是让分布式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定</p>
<h1 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h1><ul>
<li>标准 4B-2B-2B-2B-6B(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)</li>
<li>微软(GUID) 4B-2B-2B-8B(xxxxxxxx-xxxx- xxxx-xxxxxxxxxxxxxxxx)</li>
</ul>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>MAC地址：故意情况下可重复；<br>机器标识：Java下就是JVM标识，故意情况下可重复；<br>纳秒级当前时间：故意情况下可重复；<br>随机数：小概率重复；<br>自增序列数（或时钟序列）：循环溢出时重复；</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysq-hex与unhex]]></title>
      <url>https://qianchenglong.github.io/2015/06/26/mysq-hex%E4%B8%8Eunhex/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li><p>hex</p>
<p>字符串转换为对应的ASCII码的16进制<strong>字符串</strong></p>
<p>数字转换为16进制<strong>字符串</strong></p>
</li>
<li><p>unhex</p>
<p>将16进制数转换为字符串</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[arch-安装yaourt]]></title>
      <url>https://qianchenglong.github.io/2015/06/26/arch-%E5%AE%89%E8%A3%85yaourt/</url>
      <content type="html"><![CDATA[<ol>
<li><p>添加源仓库到pacman</p>
<pre><code>vi /etc/pacman.conf

[archlinuxfr]
SigLevel = Never
Server = http://repo.archlinux.fr/$arch
</code></pre></li>
<li><p>更新安装</p>
<pre><code>pacman -Sy yaourt
</code></pre></li>
<li><p>安装拓展</p>
<pre><code>yaourt -S aurvote customizepkg rsync
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[arch-将吃豆人放入pacman]]></title>
      <url>https://qianchenglong.github.io/2015/06/26/arch-%E5%B0%86%E5%90%83%E8%B1%86%E4%BA%BA%E6%94%BE%E5%85%A5pacman/</url>
      <content type="html"><![CDATA[<ol>
<li><p><code>vi /etc/pacman.conf</code></p>
<pre><code># Misc options
Color
ILoveCandy
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysq-常用语句]]></title>
      <url>https://qianchenglong.github.io/2015/06/25/mysql-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<ul>
<li><p>获取排序中指定序号列</p>
<pre><code>SELECT stockid, close/10000, pctchg/100, transday FROM stock_app.t_k_line_day WHERE stockid=? ORDER BY transday DESC LIMIT 1,1
</code></pre></li>
<li><p>mysql下使用update set from select</p>
<pre><code>UPDATE friends INNER JOIN users ON friends.friendid=users.userid 
SET friends.friendname=users.username
</code></pre></li>
<li><p>判断等于NULL</p>
<pre><code>is NULL
</code></pre></li>
<li><p>取指定数目数据</p>
<pre><code>select transday,preclose from t_k_line_day where &apos;601866.SH&apos; = stockid order by transday desc limit 10;
</code></pre></li>
<li><p>修改列名和定义</p>
<pre><code>alter table t_day_recommand change column proce price selectprice int(11);
</code></pre></li>
<li><p>修改列定义</p>
<pre><code>alter table t_day_recommand modify column inperiod int(11) DEFAULT NULL AFTER period;
</code></pre></li>
<li><p>添加列</p>
<pre><code>alter table t_product add column `issue_index` bigint NOT NULL COMMENT &apos;发行点数, 用来计算份数&apos; after issue_time;
</code></pre></li>
<li><p>命令行执行sql</p>
<pre><code>mysql -e &quot;select * ....&quot;
</code></pre></li>
<li><p>选择最大值，作为某个比较条件！</p>
<pre><code>select a.period, a.stockid, b.stockname, c.preclose, 
    (select count(userid) as count from t_follow_buy where stockid = a.stockid and status = 1) as followcount, 
    (a.highestprice - a.selectprice) / a.selectprice as maxincrease
    from stock_app.t_day_recommand a, stock_app.t_stock_base b, stock_app.t_realtime_quotation c 
    where a.priority = 0 and a.stockid = b.stockid and a.stockid = c.stockid and a.period = (select max(period) from t_day_recommand)
    ;
</code></pre></li>
<li><p>update select</p>
<pre><code>UPDATE table1 alias
SET (column_name,column_name ) = (
SELECT (column_name, column_name)
FROM table2
WHERE column_name = alias.column_name)
WHERE column_name = VALUE
</code></pre></li>
<li><p>update table by select</p>
<pre><code>UPDATE table1 dest, (SELECT * FROM table2 where id=x) src 
SET dest.col1 = src.col1 where dest.id=x ;
</code></pre></li>
<li><p>Insert to table or update if exists</p>
<pre><code>INSERT INTO table (id, name, age) VALUES(1, &quot;A&quot;, 19) ON DUPLICATE KEY UPDATE    
name=VALUES(name), age=VALUES(age)
</code></pre><ol>
<li><a href="http://stackoverflow.com/questions/4205181/insert-to-table-or-update-if-exists-mysql" target="_blank" rel="external">http://stackoverflow.com/questions/4205181/insert-to-table-or-update-if-exists-mysql</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.1/en/insert-on-duplicate.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.1/en/insert-on-duplicate.html</a></li>
</ol>
</li>
<li><p>查看mysql用户登录</p>
<pre><code>select host,user from mysql.user;
</code></pre></li>
<li><p>获取最近天的数据</p>
<pre><code>SELECT *
FROM t_k_line_minute
WHERE stockid=&quot;000300.SH&quot; AND DATE(transminute) = (select max(date(transminute)) from t_k_line_minute where stockid = &apos;000300.SH&apos;)
;
</code></pre></li>
<li><p>删除二进制日志</p>
<pre><code>PURGE BINARY LOGS TO &apos;mysql-bin.03&apos;;
PURGE BINARY LOGS BEFORE 201506150000;
</code></pre></li>
<li><p>查看warnings</p>
<pre><code>show warnings;
</code></pre></li>
<li><p>删除原有主键，增加ID主键</p>
<pre><code>alter table TABLENAME drop primary key;
alter table TABLENAME add column id bigint unsigned primary key auto_increment;
</code></pre></li>
<li><p>授权</p>
<pre><code>grant all privileges on nxb.* to &apos;dbgateway&apos;@&apos;%&apos; identified by &apos;xianji&apos;;
</code></pre></li>
<li><p>insert by select</p>
<pre><code>insert into banner_2_0_0 select * from t_banner_100;
</code></pre></li>
<li><p>修改数据库属性</p>
<pre><code>ALTER DATABASE db_aofei_test CHARACTER SET utf8 COLLATE utf8_unicode_ci;
</code></pre></li>
<li><p>设置auto_increment起始值</p>
<pre><code>ALTER TABLE tbl AUTO_INCREMENT = 100;
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库中间件]]></title>
      <url>https://qianchenglong.github.io/2015/06/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><ul>
<li><p><a href="https://github.com/alibaba/tb_tddl" target="_blank" rel="external">阿里</a></p>
</li>
<li><p><a href="https://github.com/58code/Oceanus" target="_blank" rel="external">58</a></p>
<p><a href="http://www.oschina.net/p/oceanus" target="_blank" rel="external">实现思路</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库-主键]]></title>
      <url>https://qianchenglong.github.io/2015/06/25/%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%BB%E9%94%AE/</url>
      <content type="html"><![CDATA[<h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><ul>
<li><p>维持实体完整性</p>
</li>
<li><p>大大加快查询速度</p>
</li>
<li><p>查询结果，默认按着主键排序</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-字符串转数字]]></title>
      <url>https://qianchenglong.github.io/2015/06/25/mysql-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<ul>
<li><p>SELECT CAST(‘123’ AS SIGNED);</p>
</li>
<li><p>SELECT CONVERT(‘123’,SIGNED);</p>
</li>
<li><p>SELECT ‘123’+0;</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VirtualBox共享文件夹配置]]></title>
      <url>https://qianchenglong.github.io/2015/06/24/arch-VirtualBox%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>ArchLinux</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>安装模块</p>
<pre><code>pacman -S virtualbox-guest-modules
</code></pre></li>
<li><p>手动载入模块</p>
<pre><code>modprobe -a vboxsf
</code></pre><p>若提示<code>Module not found</code>，则执行：</p>
<pre><code>depmod $(uname -r)
</code></pre></li>
<li><p>开机自动载入模块</p>
<pre><code>echo vboxsf &gt;/etc/modules-load.d/virtualbox.conf
</code></pre></li>
<li><p>创建挂载点</p>
<pre><code>mkdir /data
</code></pre></li>
<li><p>在虚拟机控制中，加入共享文件夹</p>
<pre><code>E_DRIVE
</code></pre></li>
<li><p>挂载</p>
<ul>
<li><p>手动挂载</p>
<pre><code>mount -t vboxsf E_DRIVE /data
</code></pre></li>
<li><p>自动挂载</p>
<pre><code>/etc/fstab

E_DRIVE /data vboxsf
</code></pre></li>
</ul>
</li>
</ol>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul>
<li><p>挂载失败</p>
<p>错误提示：</p>
<pre><code>[cpp] view plaincopy
mount: wrong fs type, bad option, bad superblock on E_DRIVE,
       missing codepage or helper program, or other error
       (for several filesystems (e.g. nfs, cifs) you might
       need a /sbin/mount.&lt;type&gt; helper program)
       In some cases useful info is found in syslog - try
       dmesg | tail or so
</code></pre><p>解决过程：</p>
<ol>
<li><p>dmesg | tail</p>
<p>   sf_read_super_aux err=-22</p>
</li>
<li><p>查看vboxsf链接</p>
<pre><code>vincent@vincent-VirtualBox:/mnt$ ls -al /sbin/mount.vboxsf
lrwxrwxrwx 1 root root 40 Jun 19 09:38 /sbin/mount.vboxsf -&gt; /usr/lib/VBoxGuestAdditions/mount.vboxsf
</code></pre></li>
<li><p>发现链接不对，重新链接</p>
<pre><code>ln -s /opt/VBoxGuestAdditions-4.3.10/lib/VBoxGuestAdditions/mount.vboxsf /sbin/mount.vboxsf
</code></pre></li>
</ol>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://wiki.archlinux.org/index.php/VirtualBox#Installation_steps_for_Arch_Linux_guests" target="_blank" rel="external">https://wiki.archlinux.org/index.php/VirtualBox#Installation_steps_for_Arch_Linux_guests</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[django-manage常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/06/24/django-manage%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查看某个命令帮助</p>
<pre><code>./manage.py help command
</code></pre></li>
<li><p>生成migrate操作</p>
<pre><code>python manage.py makemigrations
</code></pre></li>
<li><p>执行migrate操作</p>
<pre><code>./manage.py migrate
</code></pre></li>
<li><p>生成多个数据库(1次migrate执行一个数据库)</p>
<pre><code>./manage.py migrate
./manage.py migrate --database=stock_app
</code></pre></li>
<li><p>创建用户</p>
<pre><code>./manage.py createsuperuser
</code></pre></li>
<li><p>修改用户密码</p>
<pre><code>./manager.py changepasswd USERNAME
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[djanggo-中文化]]></title>
      <url>https://qianchenglong.github.io/2015/06/24/django-%E4%B8%AD%E6%96%87%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>修改<code>settings.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-CN'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[arch-安装纪录]]></title>
      <url>https://qianchenglong.github.io/2015/06/24/arch-%E5%AE%89%E8%A3%85%E7%BA%AA%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="建立网络连接"><a href="#建立网络连接" class="headerlink" title="建立网络连接"></a>建立网络连接</h1><h2 id="有线"><a href="#有线" class="headerlink" title="有线"></a>有线</h2><h3 id="默认开启了dhcpcd服务"><a href="#默认开启了dhcpcd服务" class="headerlink" title="默认开启了dhcpcd服务"></a>默认开启了dhcpcd服务</h3><ol>
<li><p>检查网络状态</p>
<pre><code>ping jd.com
</code></pre></li>
</ol>
<h3 id="若DHCP失败静态分配IP"><a href="#若DHCP失败静态分配IP" class="headerlink" title="若DHCP失败静态分配IP"></a>若DHCP失败静态分配IP</h3><ol>
<li><p>查看以太网接口名</p>
<pre><code>ip link
</code></pre></li>
<li><p>启动网络接口</p>
<pre><code>ip link set &lt;interface-name&gt; up
</code></pre></li>
<li><p>添加IP</p>
<pre><code>ip addr add &lt;ip-address&gt;/&lt;mask-bits&gt; dev &lt;interface-name&gt;
</code></pre></li>
<li><p>添加网关</p>
<pre><code>ip route add default via &lt;gateway-ip&gt;
</code></pre></li>
<li><p>配置DNS</p>
<pre><code>vim /etc/resolv.conf

nameserver 8.8.8.8
</code></pre></li>
</ol>
<h2 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h2><ol>
<li><p>查看网卡接口</p>
<pre><code>iwconfig
</code></pre></li>
<li><p>启动网卡接口</p>
<pre><code>ip link set &lt;interface-name&gt; up
</code></pre></li>
<li><p>连接网络</p>
<pre><code>wifi-menu &lt;interface-name&gt;
</code></pre></li>
</ol>
<h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><ul>
<li><p>硬盘分区</p>
<pre><code>cfdisk /dev/sda
</code></pre></li>
<li><p>格式化分区</p>
<pre><code>mkfs.ext4 /dev/sdaX
</code></pre></li>
<li><p>挂载分区</p>
<pre><code>mount /dev/sdaX /mnt
</code></pre></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>修改软件源</p>
<pre><code>vi  /etc/pacman.d/mirrorlist

Server = http://mirrors.163.com/archlinux/$repo/os/$arch
</code></pre></li>
<li><p>安装基本系统</p>
<pre><code>pacstrap /mnt base base-devel
</code></pre></li>
<li><p>生成fstab</p>
<pre><code>genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab
</code></pre></li>
</ul>
<h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><p>chroot到新系统</p>
<pre><code>arch-chroot /mnt
</code></pre><h2 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h2><ol>
<li><p>启用locale</p>
<pre><code>vi /etc/locale.gen

en_US.UTF-8 UTF-8
zh_CN.GB18030 GB18030
zh_CN.GBK GBK
zh.CN.UTF-8 UTF-8
zh_CN GB2312
</code></pre></li>
<li><p>生成本地语言</p>
<pre><code>locale-gen
</code></pre></li>
<li><p>[设置系统默认语言]</p>
<p>   vi /etc/locale.conf</p>
<p>   LANG=zh_CN.UTF-8<br>   LC_TIME=en_GB.UTF-8</p>
</li>
</ol>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><ol>
<li><p>设置时区</p>
<pre><code>echo Asia/Shanghai &gt;/etc/timezone
</code></pre></li>
<li><p>链接时区</p>
<pre><code>ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</code></pre></li>
<li><p>系统时间保存到bios</p>
<pre><code>hwclock --systohc --localtime
</code></pre></li>
</ol>
<h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><pre><code>echo Arch &gt;/etc/hostname
</code></pre><h2 id="创建初始ramdisk环境"><a href="#创建初始ramdisk环境" class="headerlink" title="创建初始ramdisk环境"></a>创建初始ramdisk环境</h2><pre><code>mkinitcpio -p linux
</code></pre><h2 id="设置Root密码并创建一般用户"><a href="#设置Root密码并创建一般用户" class="headerlink" title="设置Root密码并创建一般用户"></a>设置Root密码并创建一般用户</h2><pre><code>passwd
useradd -m  -s /bin/bash qian
passwd qian
</code></pre><h2 id="启动加载器"><a href="#启动加载器" class="headerlink" title="启动加载器"></a>启动加载器</h2><ul>
<li><p>grub[优先]</p>
<pre><code>pacman -S　grub-biso os-prober
grub-install --target=i386-pc --recheck /dev/sda
grub-mkconfig -o /boot/grub/grub.cfg
</code></pre></li>
<li><p>syslinux</p>
<ol>
<li><p>安装</p>
<pre><code>pacman -S syslinux
syslinux-install_update -ima
</code></pre></li>
<li><p>配置</p>
<pre><code>vi /boot/syslinux/syslinux.cfg
</code></pre></li>
</ol>
</li>
</ul>
<h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><ul>
<li><p>配置无线</p>
<p>pacman -S wierless_tools wpa_supplicant wpa_actiond dialog</p>
</li>
<li><p>配置有线</p>
<ul>
<li><p>dhcp</p>
<ul>
<li><p>通过dhcpcd服务</p>
<pre><code>systemctl enable dhcpcd@interface_name.service
</code></pre></li>
<li><p>通过netctl</p>
<pre><code>cd /etc/netctl
cp examples/ethernet-dhcp my_network
vi my_network(修改接口名称)
netctl enbale my_network
</code></pre></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="安装图形界面"><a href="#安装图形界面" class="headerlink" title="安装图形界面"></a>安装图形界面</h2><ul>
<li><p>安装Xorg和gnome</p>
<pre><code>pacman -S　xorg gnome
</code></pre></li>
<li><p>开机自动启动GUI</p>
<pre><code>systemctl enable gdm.service
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-安装常见错误]]></title>
      <url>https://qianchenglong.github.io/2015/06/24/windows-%E5%AE%89%E8%A3%85%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h1 id="win7"><a href="#win7" class="headerlink" title="win7"></a>win7</h1><ul>
<li><p>win7 安装 找不到任何设备驱动程序</p>
<pre><code>不要使用USB3.0安装
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/06/24/%E6%A0%91%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<p>一般比较普遍的就是四种方法：（具体见 SQL Anti-patterns这本书）<br>Adjacency List：每一条记录存parent_id<br>Path Enumerations：每一条记录存整个tree path经过的node枚举<br>Nested Sets：每一条记录存 nleft 和 nright<br>Closure Table：维护一个表，所有的tree path作为记录进行保存。</p>
<p>各种方法的常用操作代价见下图</p>
<p>推荐一本书 SQL Anti-patterns，<br>见：<a href="http://www.ppurl.com/2010/06/sql-antipatterns-avoiding-the-pitfalls-of-database-programming.html" target="_blank" rel="external">http://www.ppurl.com/2010/06/sql-antipatterns-avoiding-the-pitfalls-of-database-programming.html</a><br>其中对于树形结构在关系型数据库中的存储做了分析。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tomcat部署war包]]></title>
      <url>https://qianchenglong.github.io/2015/06/18/tomcat%E9%83%A8%E7%BD%B2war%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>ubuntu-14.04</p>
</li>
<li><p>tomcat7</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>复制war包到<code>/var/lib/tomcat/webapps</code></p>
</li>
<li><p>修改配置文件</p>
<pre><code>&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;
            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;
        +++ &lt;Context docBase=&quot;/var/lib/tomcat7/webapps/chaojizhun.war&quot; path=&quot;/chaojizhun&quot; reloadable=&quot;true&quot;/&gt;
&lt;/Host&gt;
</code></pre></li>
<li><p>重启tomcat</p>
<pre><code>/etc/init.d/tomcat7 restart
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rsync]]></title>
      <url>https://qianchenglong.github.io/2015/06/18/rsync/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>远程同步</p>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><ul>
<li><p>使用密码文件认证</p>
<pre><code>rsync -avzP --password-file=/cygdrive/E/Soft/rsync/bin/cwRsync_5.4.1_x86_Free/rsyncd.scrt  /cygdrive/E/Work/project/gupiaoxianji/xianji-server/data wallace@%SERVER%::dbdata
</code></pre></li>
<li><p>–exclude={.ccache,build}</p>
<p>排除多个目录</p>
</li>
<li><p>–chown=www-data:www-data</p>
<p>修改文件所有者</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[find]]></title>
      <url>https://qianchenglong.github.io/2015/06/18/find/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>查找文件，非常强大！</p>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><ul>
<li><p>-mtime</p>
<ul>
<li>n 在n天之前<strong>一天内</strong>的文件</li>
<li>+n 在n天之前,<strong>不包含从现在到n天</strong>这段时间</li>
<li>-n n天内</li>
</ul>
<p><img src="../img/find_01.png" alt=""></p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>查找/下最近1天修改过文件</p>
<pre><code>find / -mtime 0
</code></pre></li>
<li><p>在多个目录下查找</p>
<pre><code>find foo bar baz -name &quot;*.rb&quot;
</code></pre></li>
<li><p>多个模式匹配(运算符优先级！)</p>
<pre><code>find . -type f \( -name &quot;*.cpp&quot; -o -name &quot;*.h&quot; \) -exec ls &apos;{}&apos; \;
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[column]]></title>
      <url>https://qianchenglong.github.io/2015/06/18/column/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>将记录表格化输出</p>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><ul>
<li><p>-s</p>
<p>指定分隔字符【集】，如’,;’</p>
</li>
<li><p>-t</p>
<p>表格化打印</p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>查看最近1天内修改过的文件，表格化打印</p>
<pre><code>find . -mtime -1|xargs stat -c&quot;%n,%.19y&quot;|column -s, -t
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[stat]]></title>
      <url>https://qianchenglong.github.io/2015/06/18/stat/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>查看文件信息</p>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><ul>
<li><p>-c  –format=FORMAT</p>
<ul>
<li><p>%n 文件名</p>
</li>
<li><p>%y 修改时间，易读格式</p>
</li>
</ul>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>指定显示文件修改时间长度</p>
<pre><code>find . -mtime -1|xargs stat -c&quot;%n %.19y&quot;|column -t
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[du]]></title>
      <url>https://qianchenglong.github.io/2015/06/18/du/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>用来查看目录项磁盘使用情况。</p>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><ul>
<li><p>-a</p>
<p>也输出文件，不只是目录</p>
</li>
<li><p>-h</p>
<p>容易理解的格式输出</p>
</li>
<li><p>-s, –summarize</p>
<p>等价于–max-depth=0，只输出本目录</p>
</li>
<li><p>–max-depth=N</p>
<p>最大深度，与find一样</p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>只查看该文件或目录</p>
<pre><code>du -hs
</code></pre></li>
<li><p>查看目录的各目录项，不递归下去</p>
<pre><code>du -ah --max-depth=1
</code></pre></li>
<li><p>查看目录下*.c文件并排序输出到文件</p>
<pre><code>du --max-depth 1 -ah | grep &apos;.*\.c&apos; | sort -h &gt; study
</code></pre></li>
<li><p>功能：方便的查看文件内存使用情况</p>
<pre><code>du -ah --max-depth=1 | sort -hr
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sort]]></title>
      <url>https://qianchenglong.github.io/2015/06/18/sort/</url>
      <content type="html"><![CDATA[<h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><ul>
<li><p>-b</p>
<p>忽略前导空白</p>
</li>
<li><p>-d</p>
<p>用来排序目录，只考虑空白符和字符？</p>
</li>
<li><p>-n</p>
<p>根据字符串形式对应的数字排序</p>
</li>
<li><p>-h</p>
<p>根据易读格式排序，也就是使用了B,K,M等</p>
</li>
<li><p>-r</p>
<p>结果逆序输出</p>
</li>
<li><p>-s</p>
<p>稳定排序</p>
</li>
<li><p>-u</p>
<p>去除键重复的记录</p>
</li>
<li><p>-o FILENAME</p>
<p>输出到指定文件，避免重定向到同一文件时造成的内容截断</p>
</li>
<li><p>-t, –field-separator=SEP</p>
<p>使用指定分隔符来分割记录</p>
</li>
<li><p>-k, –key=KEYDEF</p>
<p>指定排序键，可以多次指定</p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>按第3字段的数字值排序输出</p>
<pre><code>cat /etc/passwd|sort -t&apos;:&apos; -n -k3,3 |less
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-安装virtualbox增强功能]]></title>
      <url>https://qianchenglong.github.io/2015/06/17/centos-%E5%AE%89%E8%A3%85virtualbox%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>CentOS-7.0.1</p>
</li>
<li><p>VirtualBox-4.3.28</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>更新内核</p>
<p>yum update kernel<br>reboot</p>
</li>
<li><p>安装依赖</p>
<pre><code>rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
yum install gcc kernel-devel kernel-headers dkms make bzip2 perl
</code></pre></li>
<li><p>在虚拟机控制器中，添加<code>VBoxGuestAdditions.iso</code></p>
</li>
<li><p>挂载光盘</p>
<pre><code>mkdir /mnt/cdrom
mount /dev/cdrom /mnt/cdrom
</code></pre></li>
<li><p>编译安装</p>
<pre><code>cd /mnt/cdrom &amp;&amp; ./VBoxLinuxAdditions.run
</code></pre></li>
<li><p>重启生效</p>
<pre><code>reboot
</code></pre></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.if-not-true-then-false.com/2010/install-virtualbox-guest-additions-on-fedora-centos-red-hat-rhel/comment-page-7/" target="_blank" rel="external">http://www.if-not-true-then-false.com/2010/install-virtualbox-guest-additions-on-fedora-centos-red-hat-rhel/comment-page-7/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grub2-修改配置]]></title>
      <url>https://qianchenglong.github.io/2015/06/17/grub2-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>修改配置文件</p>
<pre><code>vi /etc/default/grub
/etc/grub.d/
</code></pre></li>
<li><p>更新配置</p>
<pre><code>grub2-mkconfig -o /boot/grub2/grub.cfg
</code></pre></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://help.ubuntu.com/community/Grub2/Setup" target="_blank" rel="external">https://help.ubuntu.com/community/Grub2/Setup</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[muduo-编译安装]]></title>
      <url>https://qianchenglong.github.io/2015/06/17/muduo-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>CentOS-7.0.1</p>
</li>
<li><p>muduo-2.5</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>下载</p>
<pre><code>wget https://github.com/chenshuo/muduo/archive/master.zip
</code></pre></li>
<li><p>解压</p>
<pre><code>unzip master.zip
</code></pre></li>
<li><p>编译</p>
<pre><code>cd muduo-master &amp;&amp; sh build.sh
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-智能指针之boost.scroped_ptr]]></title>
      <url>https://qianchenglong.github.io/2015/06/16/C++-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B9%8Bboost.shared_ptr/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li><p>提供一种强大的垃圾回收机制</p>
</li>
<li><p>copyable，可存放到容器中，可多次引用</p>
</li>
<li><p>当引用计数为0时，自动析构</p>
</li>
</ul>
<h1 id="使用误区"><a href="#使用误区" class="headerlink" title="使用误区"></a>使用误区</h1><ul>
<li><p>不能使用同一个对象指针来构造</p>
<pre><code>A *a = new A(1);

boost::shared_ptr&lt;A&gt; p1(a);
boost::shared_ptr&lt;A&gt; p2(a);
// 应该这样
// boost::shared_ptr&lt;A&gt; p1(new A(1));
// boost::shared_ptr&lt;A&gt; p2(p1);
</code></pre></li>
</ul>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>非常强大，多多使用！</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/shared_ptr.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> id): id_(new <span class="keyword">int</span>(id))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> id_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *id_;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    A *a = new A(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    boost::<span class="built_in">shared_ptr</span>&lt;A&gt; p1(a);</span><br><span class="line">    boost::<span class="built_in">shared_ptr</span>&lt;A&gt; p2(p1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *(p1-&gt;id_) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-智能指针之boost.scroped_ptr]]></title>
      <url>https://qianchenglong.github.io/2015/06/16/C++-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B9%8Bboost.scroped_ptr/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li>提供一种垃圾回收机制，当变量(<code>new</code>分配的)离开其作用域，自动执行<code>delete</code></li>
</ul>
<h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ul>
<li>noncopyable，意味着不能存放到容器，或多次引用</li>
</ul>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>当不需要传递所有权时，可使用</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/scoped_ptr.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> id): id_(id)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> id_;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    boost::scoped_ptr&lt;A&gt; i(new A(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i-&gt;id_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-智能指针之auto_ptr]]></title>
      <url>https://qianchenglong.github.io/2015/06/16/C++-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B9%8Bauto_ptr/</url>
      <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li>提供一种简单的垃圾回收机制，当变量(<code>new</code>分配的)离开其作用域，自动执行<code>delete</code></li>
</ul>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>基于RAII(资源申请即初始化)，利用C++确定性析构，保证变量当离开作用域时，自动执行析构函数来释放内存</p>
<h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ul>
<li><p>不能将同一个对象存储到多个<code>auto_ptr</code>，会导致多次析构，从而崩溃</p>
<pre><code>A *p = new A();
std::auto_ptr&lt;A&gt; a(p);
std::auto_ptr&lt;A&gt; b(p);
</code></pre></li>
<li><p>不能管理数据对象，因为<code>~auto_ptr</code>是<code>delete</code>而不是<code>delete []</code></p>
<pre><code>int *p=new int[10];
auto_ptr&lt;int&gt;ap(p);
</code></pre></li>
</ul>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>C++11已经抛弃它，boost也有更好的替代品，决不使用！</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">auto_ptr</span>&lt;A&gt; a(new A());</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cplusplus.com/reference/memory/auto_ptr/?kw=auto_ptr" target="_blank" rel="external">http://www.cplusplus.com/reference/memory/auto_ptr/?kw=auto_ptr</a></li>
<li><a href="http://baike.baidu.com/view/3511189.htm" target="_blank" rel="external">http://baike.baidu.com/view/3511189.htm</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[查看boost版本号]]></title>
      <url>https://qianchenglong.github.io/2015/06/16/%E6%9F%A5%E7%9C%8Bboost%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
      <content type="html"><![CDATA[<pre><code>vi /usr/include/boost/version.hpp
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[apache-建立虚拟站点]]></title>
      <url>https://qianchenglong.github.io/2015/06/15/apache-%E5%BB%BA%E7%AB%8B%E8%99%9A%E6%8B%9F%E7%AB%99%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>ubuntu-14.04</li>
<li>apache-2.4.7</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://wiki.ubuntu.org.cn/Apache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%8C%87%E5%8D%97" target="_blank" rel="external">http://wiki.ubuntu.org.cn/Apache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%8C%87%E5%8D%97</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-14-04-lts" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-14-04-lts</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-安装]]></title>
      <url>https://qianchenglong.github.io/2015/06/15/mysql-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="ubuntu-ubuntu-14-04-mysql-5-5"><a href="#ubuntu-ubuntu-14-04-mysql-5-5" class="headerlink" title="ubuntu(ubuntu-14.04, mysql-5.5)"></a>ubuntu(ubuntu-14.04, mysql-5.5)</h1><ul>
<li><p>[删除原有]</p>
<p>sudo apt-get remove –purge mysql-server-5.5 mysql-client-5.5<br>sudo apt-get purge mysql-common<br>sudo apt-get autoremove<br>sudo apt-get clean</p>
</li>
<li><p>安装</p>
<pre><code>apt-get install mysql-server-5.5 mysql-client-5.5
</code></pre></li>
</ul>
<h1 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h1><pre><code>sudo yum install mariadb-server

sudo systemctl start mariadb
</code></pre><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ol>
<li><p><code>mysql ERROR: 1050  Table &#39;plugin&#39; already exists</code></p>
<p>没有卸载干净，执行上面清理命令</p>
<p>参考：</p>
<pre><code>1.  &lt;http://askubuntu.com/questions/86939/error-while-installing-mysql-server-5-1&gt;
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[samba-常见问题]]></title>
      <url>https://qianchenglong.github.io/2015/06/11/samba-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="诊断流程"><a href="#诊断流程" class="headerlink" title="诊断流程"></a>诊断流程</h1><ol>
<li><p>首先确定samba服务是否运行，smb和nmb两个进程。</p>
</li>
<li><p>看一下服务器samba配置文件/etc/samba/smb.conf的workgroup，它必须与Win的工作组一致，一般Win的工作组是WORKGROUP。</p>
</li>
<li><p>看配置文件里的interfaces是否正确，hosts allow的ip段是否覆盖Win的ip地址。</p>
</li>
<li><p>服务器上启用user安全级别时，是否添加了共享用户，是否允许共享用户浏览。</p>
</li>
<li><p>防火墙的规则设置是否正确。</p>
</li>
<li><p>SELinux是否阻止你访问samba共享的目录。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sql-连接]]></title>
      <url>https://qianchenglong.github.io/2015/06/11/sql-%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul>
<li><p>SQL通过<strong>连接</strong>将多个表关联起来,是实现数据组合最重要的一环!</p>
</li>
<li><p>所以<strong>连接</strong>的本质是通过一些生成手段来获取目标集合,再通过对<strong>连接</strong>生成的集合(临时表)加以筛选,得到目标数据</p>
</li>
</ul>
<h1 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h1><h2 id="内连接-INNER-JOIN"><a href="#内连接-INNER-JOIN" class="headerlink" title="内连接(INNER JOIN)"></a>内连接(INNER JOIN)</h2><p>只返回两个表中连接条件成立的行</p>
<h2 id="外连接-OUTER-JOIN"><a href="#外连接-OUTER-JOIN" class="headerlink" title="外连接(OUTER JOIN)"></a>外连接(OUTER JOIN)</h2><p>外连接并不要求连接的两表的每一条记录在对方表中都一条匹配的记录.</p>
<h3 id="全外连接-FULL-OUTER-JOIN"><a href="#全外连接-FULL-OUTER-JOIN" class="headerlink" title="全外连接(FULL OUTER JOIN)"></a>全外连接(FULL OUTER JOIN)</h3><p>保留2边都不匹配的数据</p>
<h3 id="左连接-LEFT-OUTER-JOIN-sql中简写LEFT-JOIN"><a href="#左连接-LEFT-OUTER-JOIN-sql中简写LEFT-JOIN" class="headerlink" title="左连接(LEFT OUTER JOIN, sql中简写LEFT JOIN)"></a>左连接(LEFT OUTER JOIN, sql中简写<code>LEFT JOIN</code>)</h3><p>保留左边不匹配的数据</p>
<h3 id="右外连接-RIGHT-OUTER-JOIN"><a href="#右外连接-RIGHT-OUTER-JOIN" class="headerlink" title="右外连接(RIGHT OUTER JOIN)"></a>右外连接(RIGHT OUTER JOIN)</h3><p>保留右边不匹配的数据</p>
<h2 id="交叉连接-CROSS-JOIN"><a href="#交叉连接-CROSS-JOIN" class="headerlink" title="交叉连接(CROSS JOIN)"></a>交叉连接(CROSS JOIN)</h2><p>示例:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.*, b.* <span class="keyword">FROM</span> A, B <span class="keyword">WHERE</span> A.id = b.id</span><br></pre></td></tr></table></figure>
<p>执行过程:</p>
<ol>
<li><p>将A与B做笛卡尔积运算,得到临时表C</p>
</li>
<li><p>再通过过滤条件<code>A.id = b.id</code>,得到结果集</p>
</li>
</ol>
<h2 id="自连接-SELF-JOIN"><a href="#自连接-SELF-JOIN" class="headerlink" title="自连接(SELF JOIN)"></a>自连接(SELF JOIN)</h2><p>一种交叉连接的特例,和自身交叉</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BF%9E%E6%8E%A5_(SQL" target="_blank" rel="external">widi-连接</a>)</li>
<li><a href="http://www.mysqltutorial.org/mysql-update-join/" target="_blank" rel="external">http://www.mysqltutorial.org/mysql-update-join/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wget]]></title>
      <url>https://qianchenglong.github.io/2015/06/10/wget/</url>
      <content type="html"><![CDATA[<ul>
<li><p>使用账号，密码</p>
<pre><code>wget --user admin --password monit http://localhost:2812
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-安装mysql]]></title>
      <url>https://qianchenglong.github.io/2015/06/10/centos-%E5%AE%89%E8%A3%85mysql/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>centos-7.0.1-64-server</p>
</li>
<li><p>5.5.41-MariaDB MariaDB Server</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>安装</p>
<pre><code>yum -y install mariadb-server mariadb
</code></pre></li>
<li><p>启动</p>
<pre><code>systemctl start mariadb
systemctl enable mariadb
</code></pre></li>
<li><p>配置向导</p>
<pre><code>mysql_secure_installation
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-主从数据库配置]]></title>
      <url>https://qianchenglong.github.io/2015/06/10/mysql-%E4%B8%BB%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>ubuntu-14.04</p>
</li>
<li><p>mysql-5.5</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><p>修改主数据库配置</p>
<pre><code>vi /etc/my.cnf.d/server.cnf

[mysqld]
server-id=1
binlog-do-db=&lt;database-name&gt;
relay-log=/var/lib/mysql/mysql-relay-bin
relay-log-index=/var/lib/mysql/mysql-relay-bin.index
log-error=/var/lib/mysql/mysql.err
master-info-file=/var/lib/mysql/mysql-master.info
relay-log-info-file=/var/lib/mysql/mysql-relay-log.info
log-bin=/var/lib/mysql/mysql-bin
</code></pre></li>
<li><p>重启mysql</p>
<pre><code>systemctl restart mariadb
</code></pre></li>
<li><p>给从库复制权限</p>
<pre><code>grant replication slave on *.* to &apos;slave&apos;@&apos;%&apos; identified by &apos;slave&apos;;
</code></pre></li>
<li><p>锁表，以便备份</p>
<pre><code>FLUSH TABLES WITH READ LOCK;
</code></pre></li>
<li><p>记录下当前主库日志状态，以便从库同步</p>
<pre><code>SHOW MASTER STATUS;
</code></pre></li>
<li><p>导出要同步的数据库</p>
<pre><code>mysqldump -uroot -p --master-data &lt;database-name&gt;;
</code></pre></li>
<li><p>解锁表</p>
<pre><code>UNLOCK TABLES;
</code></pre></li>
</ul>
<h2 id="从服务器配置"><a href="#从服务器配置" class="headerlink" title="从服务器配置"></a>从服务器配置</h2><ul>
<li><p>修改配置</p>
<pre><code>vi /etc/my.cnf.d/server.cnf

[mysqld]
server-id=2
replicate-do-db=test2
relay-log=/var/lib/mysql/mysql-relay-bin
relay-log-index=/var/lib/mysql/mysql-relay-bin.index
log-error=/var/lib/mysql/mysql.err
master-info-file=/var/lib/mysql/mysql-master.info
relay-log-info-file=/var/lib/mysql/mysql-relay-log.info
log-bin=/var/lib/mysql/mysql-bin
</code></pre></li>
<li><p>修改权限控制</p>
<pre><code>vi /etc/apparmor.d/usr.sbin.mysqld
</code></pre></li>
<li><p>连接master</p>
<pre><code>mysql -uroot -p
stop slave;
CHANGE MASTER TO MASTER_HOST=&apos;172.18.1.192&apos;, MASTER_USER=&apos;slave&apos;, MASTER_PASSWORD=&apos;slave&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;, MASTER_LOG_POS=822;
start slave;
show slave status\G
</code></pre></li>
</ul>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ul>
<li><p><code>mysql Last_IO_Errno: 1045</code></p>
<p>账号密码认证方面错误。</p>
<p>可以现在master上尝试登陆，看是否成功。</p>
</li>
</ul>
<h1 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h1><ul>
<li><p>重新设置slave</p>
<pre><code>RESET SLAVE;
</code></pre></li>
<li><p>查看进程状态</p>
<pre><code>SHOW PROCESSLIST \G;
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.1/en/replication-howto.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.1/en/replication-howto.html</a></li>
<li><a href="https://lesca.me/archives/mysql-master-slave-replication-on-centos-7.html" target="_blank" rel="external">https://lesca.me/archives/mysql-master-slave-replication-on-centos-7.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[输出重定向]]></title>
      <url>https://qianchenglong.github.io/2015/06/09/%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      <content type="html"><![CDATA[<ul>
<li><p>追加模式，标准输出和标准出错</p>
<pre><code>&gt;&gt; filename 2&gt;&amp;1
</code></pre></li>
<li><p>标准输出，和出错全丢弃</p>
<pre><code>&gt;/dev/null 2&gt;&amp;1
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cron配置]]></title>
      <url>https://qianchenglong.github.io/2015/06/09/cron%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>ubuntu-14-10-64-server</li>
</ul>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><ul>
<li><p>用户配置文件</p>
<pre><code>/var/spool/cron/root
</code></pre></li>
<li><p>系统全局配置</p>
<pre><code>/etc/crontab
/etc/cron.*
</code></pre></li>
</ul>
<h1 id="配置通过SMTP发送邮件"><a href="#配置通过SMTP发送邮件" class="headerlink" title="配置通过SMTP发送邮件"></a>配置通过SMTP发送邮件</h1><ul>
<li><p>先卸载postfix</p>
<pre><code>apt-get purge postfix
apt-get purge mailutils
apt-get auto-remove
</code></pre></li>
<li><p>安装msmtp</p>
<pre><code>apt-get install msmtp
apt-get install msmtp-mta
</code></pre></li>
<li><p>编辑配置文件</p>
<pre><code>defaults
logfile /var/log/msmtp.log
syslog on
aliases /etc/aliases

account default
host smtp.exmail.qq.com
from qiancl@gupiaoxianji.com
user qiancl@gupiaoxianji.com
password ******
auth on
tls on
tls_certcheck off
</code></pre></li>
<li><p>测试是否成功</p>
<pre><code>echo -e &quot;Subject: Test Mail\r\n\r\nThis is a test mail&quot; |msmtp --debug -t qiancl@gupiaoxianji.com
</code></pre></li>
<li><p>让cron使用smtp发送</p>
<pre><code>crontab -e

MAILTO=qiancl@gupiaoxianji.com
</code></pre></li>
</ul>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><ul>
<li><p>每分钟执行，查看执行是否成功</p>
<pre><code>* * * * * CMD
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-cron设置日志]]></title>
      <url>https://qianchenglong.github.io/2015/06/09/ubuntu-cron%E8%AE%BE%E7%BD%AE%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<ol>
<li><p>修改rsyslog文件，将<code>/etc/rsyslog.d/50-default.conf</code> 文件中的<code>#cron.*</code>前的#删掉；</p>
</li>
<li><p>重启rsyslog服务</p>
<pre><code>service rsyslog restart；
</code></pre></li>
<li><p>重启cron服务</p>
<pre><code>service cron restart；
</code></pre></li>
<li><p>查看</p>
<pre><code>less /var/log/cron.log
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql使用memcached缓存]]></title>
      <url>https://qianchenglong.github.io/2015/06/08/mysql%E4%BD%BF%E7%94%A8memcached%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<ul>
<li><p>授权memcached访问权限</p>
<pre><code>grant select on stock_app.* to memcache@&quot;%&quot; identified by &quot;12345&quot;;
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++编程经验]]></title>
      <url>https://qianchenglong.github.io/2015/06/08/C++%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ol>
<li><p>注释采用<code>//</code>风格</p>
<ul>
<li>多行注释时，方便取消局部行</li>
<li>方便diff</li>
<li>grep等替换时，方便确认是否需要注释</li>
</ul>
</li>
<li><p>变量声明，尽量一次一个</p>
<ul>
<li>方便diff</li>
<li>方便注释</li>
</ul>
</li>
<li><p>函数参数大于3个时，逗号号换行</p>
<ul>
<li>方便diff</li>
<li>方便调整参数(增，减，顺序)</li>
</ul>
</li>
<li><p>类初始化列表，一行一个</p>
<ul>
<li>方便diff</li>
</ul>
</li>
<li><p>禁用<code>strcpy</code>类似不带指定缓冲区大小的，使用<code>strncpy</code>这类！</p>
<ul>
<li>清楚地知道操作内存范围，防止越界！！！</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-构造函数]]></title>
      <url>https://qianchenglong.github.io/2015/06/08/C++-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h1><ul>
<li>对所有的类成员变量进行初始化, 让对象构造后处于一个可用的状态(Good State)</li>
</ul>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>若在构造函数中抛出异常，则析构函数不被执行，因为该对象没有完全构建，会导致delete无效指针</p>
</li>
<li><p>构造函数抛出异常时，本应该在析构函数中被delete的对象没有被delete，会导致内存泄露</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建git服务器]]></title>
      <url>https://qianchenglong.github.io/2015/06/06/%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>CentOS-7.0.1</li>
</ul>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul>
<li>安装启动sshd</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>安装git</p>
<pre><code>yum install git
</code></pre></li>
<li><p>创建git目录</p>
<pre><code>mkdir /data/git
</code></pre></li>
<li><p>添加git用户</p>
<pre><code>adduser git
</code></pre></li>
<li><p>设置登录shell</p>
<pre><code>vi /etc/passwd

git:x:1008:1009::/home/git:/user/sbin/nologin
</code></pre></li>
</ol>
<ol>
<li><p>用户认证</p>
<ul>
<li><p>密码方式</p>
<pre><code>passwd git
</code></pre></li>
<li><p>将需要登录git的用户公钥添加进来(一个一行)</p>
<pre><code>vi /home/git/.ssh/authorized_keys
</code></pre></li>
</ul>
</li>
</ol>
<h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><ul>
<li><p>初始化仓库</p>
<pre><code>cd /data/git
git init --bare sample.git
</code></pre></li>
<li><p>设置权限</p>
<pre><code>chown -R git:git sample.git
</code></pre></li>
</ul>
<h1 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h1><ul>
<li><p>添加远程仓库</p>
<pre><code>git remote add web git@hostname:/data/sample.git
</code></pre></li>
<li><p>提交到远程仓库</p>
<pre><code>git push origin master
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-搭建SVN服务器]]></title>
      <url>https://qianchenglong.github.io/2015/06/06/centos-%E6%90%AD%E5%BB%BASVN%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="安装svn"><a href="#安装svn" class="headerlink" title="安装svn"></a>安装svn</h2><pre><code>yum install svn
</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li><p>建立svn目录</p>
<pre><code>mkdir /data/svn
</code></pre></li>
<li><p>创建仓库</p>
<pre><code>svnadmin create /data/svn/xianji-server
</code></pre></li>
<li><p>进入配置目录</p>
<pre><code>cd /data/svn/conf
</code></pre></li>
<li><p>配置权限</p>
<pre><code>vi authz

[/]
admin = rw
</code></pre></li>
<li><p>配置账号密码(添加admin用户，密码admin)</p>
<pre><code>vi passwd

[users]
admin = admin
</code></pre></li>
<li><p>svn服务配置</p>
<pre><code>vi svnserve.conf

anon-access = read #匿名用户可读
auth-access = write #授权用户可写
password-db = passwd #使用哪个文件作为账号文件
authz-db = authz #使用哪个文件作为权限文件
realm = /var/svn/test # 认证空间名，版本库所在目录
</code></pre></li>
</ol>
<h2 id="启动SVN版本库"><a href="#启动SVN版本库" class="headerlink" title="启动SVN版本库"></a>启动SVN版本库</h2><pre><code>svnserve -d -r /var/svn
</code></pre><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><pre><code>svn checkout svn://127.0.0.1/xianji-server
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[启动盘制作工具]]></title>
      <url>https://qianchenglong.github.io/2015/06/06/%E5%90%AF%E5%8A%A8%E7%9B%98%E5%88%B6%E4%BD%9C%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://unetbootin.sourceforge.net/" target="_blank" rel="external">UNetbootin</a></p>
</li>
<li><p>poweriso</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[poweriso制作U盘启动]]></title>
      <url>https://qianchenglong.github.io/2015/06/06/poweriso%E5%88%B6%E4%BD%9CU%E7%9B%98%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>使用poweriso打开镜像文件</p>
</li>
<li><p>【工具】 =&gt; 【制作可启动U盘】</p>
<p><img src="/img/poweriso制作U盘启动_01.png" alt=""></p>
</li>
<li><p>U盘使用完毕后，重新写入一个较小的ISO文件</p>
</li>
<li><p>使用win磁盘管理工具(diskmgmt.msc)，重新格式化即可</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/06/05/%E7%8E%B0%E4%BB%A3C++%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="使用override强制说明该函数为重写版本"><a href="#使用override强制说明该函数为重写版本" class="headerlink" title="使用override强制说明该函数为重写版本"></a>使用<code>override</code>强制说明该函数为重写版本</h1><ul>
<li><p>增强可读性</p>
</li>
<li><p>确保该函数是重写父类的虚函数，避免拼写错误，类型不匹配，导致没有形成多态！</p>
</li>
<li><p>可以更加清楚地表明该函数的用途，假设子类函数与父类函数完全一样，没有<code>override</code><br>辅助说明，则使用者很可能误用！</p>
</li>
<li><p>定义和派生抽象类的利器，可在编译时发现诸如：修改了基类中某虚方法的参数列表后，忘记在其派生类中做出相应修改等各类相关错误。</p>
</li>
</ul>
<h1 id="改进的大于号解析"><a href="#改进的大于号解析" class="headerlink" title="改进的大于号解析"></a>改进的大于号解析</h1><p>定义模板实例时，不再需要小心地在多个连续的大于号之间添加空格了。<br>优点</p>
<p>不必再担心模板定义中的“&gt;&gt;”被解析为右移操作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-触发器]]></title>
      <url>https://qianchenglong.github.io/2015/06/05/mysql-%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查看触发器</p>
<pre><code>show triggers;
</code></pre></li>
<li><p>删除触发器</p>
<pre><code>drop &lt;trigger-name&gt;;
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-远程连接]]></title>
      <url>https://qianchenglong.github.io/2015/06/05/mysql-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>centos7.0.1-64</p>
</li>
<li><p>5.5.41-MariaDB MariaDB Server</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>确保mysql配置文件<code>/etc/my.cnf</code>中没有bind本地地址</p>
</li>
<li><p>授权允许用户远程登录</p>
<pre><code>grant all PRIVILEGES on 数据库名.表名 to 用户名@&apos;IP&apos; identified by &apos;密码&apos;;
flush privileges;
</code></pre></li>
<li><p>放行mysql端口</p>
<pre><code>firewall-cmd --permanent --add-port=3306/tcp
firewall-cmd --reload
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rsync常见错误]]></title>
      <url>https://qianchenglong.github.io/2015/06/03/rsync%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<ol>
<li></li>
</ol>
<p>错误信息</p>
<pre><code>@ERROR: chroot failed
rsync error: error starting client-server protocol (code 5) at main.c(1635) [Receiver=3.1.1]
</code></pre><p>原因：</p>
<pre><code>rsyncd.conf中的path路径所设的那个目录并不存在所致.
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/06/03/ubuntu-%E9%85%8D%E7%BD%AErsync/</url>
      <content type="html"><![CDATA[<ul>
<li><p>apt-get intall rsync</p>
</li>
<li><p>vi /etc/rsyncd.conf</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#motd file = /etc/rsyncd.motd</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsync.lock</span><br><span class="line"></span><br><span class="line">[server]</span><br><span class="line">   path = /home/wallace/server</span><br><span class="line">   comment = gupiaoxianji server code</span><br><span class="line">   uid = wallace</span><br><span class="line">   gid = wallace</span><br><span class="line">   read only = no</span><br><span class="line">   list = yes</span><br><span class="line">   #hosts allow = 10.0.0.1/0</span><br><span class="line">   auth users = wallace</span><br><span class="line">   secrets file = /etc/rsyncd.scrt</span><br><span class="line">   strict modes = false</span><br></pre></td></tr></table></figure>
<ul>
<li><p>vi /etc/rsyncd.scrt</p>
<pre><code>wallace:wallacework
</code></pre></li>
<li><p>vi /etc/default/rsync</p>
<pre><code>RSYNC_ENABLE=true
</code></pre></li>
<li><p>/etc/init.d/rsync restart</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://ubuntuforums.org/showthread.php?t=1252720" target="_blank" rel="external">http://ubuntuforums.org/showthread.php?t=1252720</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/06/02/%E5%89%8D%E5%90%91%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>在C++中，是指在一个类定义中，成员函数引用成员变量的位置先于成员变量定义的位置。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">mutator</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; myValue = x; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">accessor</span><span class="params">()</span> </span>&#123; return myValue; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="keyword">int</span> myValue;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>允许前向引用大大增加了编译器的复杂度与内存需求，并且使它不能成为一次通过型的编译器。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zh.wikipedia.org/wiki/%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E" target="_blank" rel="external">维基-前向声明</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[宏-函数名]]></title>
      <url>https://qianchenglong.github.io/2015/05/31/%E5%AE%8F-%E5%87%BD%E6%95%B0%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>| Compile | <code>__FUNCSIG__</code> | <code>__FUNCDNAME__</code> | <code>__FUNCTION__</code> | <code>__func__</code> | <code>__PRETTY_FUNCTION__</code> |<br>|———+—————+—————–+—————-+————+———————–|<br>| GCC     | X             | X               | √              | √          | √                     |<br>| VC      | √             | √               | √              | X          | X                     |</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://gcc.gnu.org/onlinedocs/gcc/Function-Names.html" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/gcc/Function-Names.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-本地镜像源设置]]></title>
      <url>https://qianchenglong.github.io/2015/05/30/centos-%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%BA%90%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ul>
<li><p>挂载镜像文件</p>
<pre><code>mkdir /mnt/cdrom
mount /dev/cdrom /mnt/cdrom
</code></pre></li>
<li><p>编辑repo文件</p>
<pre><code>vim /etc/yum.repos.d/centos7-local.repo

[local]
name=local
baseurl=file:///mnt/cdrom
enabled=1
gpgcheck=1
gpgkey=file:///mnt/cdrom/RPM-GPG-KEY-CentOS-7
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-配置网络]]></title>
      <url>https://qianchenglong.github.io/2015/05/30/centos-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<ul>
<li><p>安装numtui</p>
<pre><code>yum install NetworkManager-tui
</code></pre></li>
<li><p>编辑</p>
<pre><code>nmtui
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cgi-常见错误定位]]></title>
      <url>https://qianchenglong.github.io/2015/05/29/cgi-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<ul>
<li><p>500</p>
<p>cgi输出不符合规范！</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/05/29/%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ul>
<li><p>没有更好的办法之前，先用笨办法解决问题</p>
</li>
<li><p>区分代码版本</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[APP后台设计]]></title>
      <url>https://qianchenglong.github.io/2015/05/27/APP%E5%90%8E%E5%8F%B0API%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="设计准则"><a href="#设计准则" class="headerlink" title="设计准则"></a>设计准则</h1><h2 id="API设计"><a href="#API设计" class="headerlink" title="API设计"></a>API设计</h2><ul>
<li>重要页面尽量配合app</li>
</ul>
<h1 id="数据返回格式"><a href="#数据返回格式" class="headerlink" title="数据返回格式"></a>数据返回格式</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.csdn.net/newjueqi/article/details/44037011" target="_blank" rel="external">http://blog.csdn.net/newjueqi/article/details/44037011</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-同步网络时间]]></title>
      <url>https://qianchenglong.github.io/2015/05/25/linux-%E5%90%8C%E6%AD%A5%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<pre><code>ntpdate time.windows.com &amp;&amp; hwclock --systohc --localtime
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xshell字符乱码]]></title>
      <url>https://qianchenglong.github.io/2015/05/23/xshell%E5%AD%97%E7%AC%A6%E4%B9%B1%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>【文件】=&gt; 【属性】=&gt; 【终端】=&gt;【编码】(Unicode-UTF-8)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sql-常用语句]]></title>
      <url>https://qianchenglong.github.io/2015/05/22/sql-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<ul>
<li><p>修改列类型</p>
<pre><code>ALTER TABLE &lt;table-name&gt; MODIFY COLUMN &lt;col-name&gt; &lt;new-datatype&gt;;
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-关闭SELinux]]></title>
      <url>https://qianchenglong.github.io/2015/05/22/centos-%E5%85%B3%E9%97%ADSELinux/</url>
      <content type="html"><![CDATA[<ul>
<li><p>vi /etc/sysconfig/selinux</p>
<pre><code>SELINUX=disabled
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.centos.org/docs/5/html/5.1/Deployment_Guide/sec-sel-enable-disable.html" target="_blank" rel="external">https://www.centos.org/docs/5/html/5.1/Deployment_Guide/sec-sel-enable-disable.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[apache-常见错误]]></title>
      <url>https://qianchenglong.github.io/2015/05/22/apache-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<ul>
<li><p>403</p>
<p>SELinux没有关闭或设置权限</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fastcgi编程经验]]></title>
      <url>https://qianchenglong.github.io/2015/05/21/fastcgi%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<ul>
<li>不能再<code>FAST_Accpet()</code>IO</li>
<li>不能使用C++IO</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-安装netstat]]></title>
      <url>https://qianchenglong.github.io/2015/05/21/centos-%E5%AE%89%E8%A3%85netstat/</url>
      <content type="html"><![CDATA[<pre><code>yum install net-tools
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[apache-常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/05/20/apache-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>启动类</p>
<p>apache2 -k start|restart|graceful|stop|graceful-stop</p>
</li>
<li><p>查看版本信息</p>
<p>apache2ctl -V</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql-常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/05/20/mysql-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>连接数据库</p>
<pre><code>mysql -h &lt;host&gt; -u &lt;username&gt; -p &lt;password&gt;
</code></pre></li>
<li><p>查看有哪些数据库</p>
<pre><code>show databases;
</code></pre></li>
<li><p>使用某个数据库</p>
<pre><code>use &lt;database_name&gt;;
</code></pre></li>
<li><p>查看有哪些表</p>
<pre><code>show tables;
</code></pre></li>
<li><p>查看系统变量</p>
<pre><code>show variables;
</code></pre></li>
<li><p>查看表创建语句</p>
<pre><code>show create table &lt;tablename&gt;;
</code></pre></li>
<li><p>修改root密码</p>
<ul>
<li><p>先登录</p>
<pre><code>SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;MyNewPass&apos;);
</code></pre></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[注册表]]></title>
      <url>https://qianchenglong.github.io/2015/04/17/%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><p>注册表采用树结构</p>
<ul>
<li><p>键</p>
<ul>
<li>树节点，值项的依赖</li>
<li>一个键可以有多个值项</li>
<li>每个键都有一个默认值项，值名称为空</li>
</ul>
</li>
<li><p>值项</p>
<ul>
<li>用来存储具体的数据</li>
<li>值项由名称，数据类型，数据组成</li>
<li>每个键都有一个默认值</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zh.wikipedia.org/wiki/%E6%B3%A8%E5%86%8C%E8%A1%A8" target="_blank" rel="external">wiki-注册表</a></li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/cc776231(v=ws.10" target="_blank" rel="external">msdn-注册表</a>.aspx)</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis-散列]]></title>
      <url>https://qianchenglong.github.io/2015/04/15/redis-%E6%95%A3%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>hash的键值是字典类型，存储的是字段(field)和字段值的映射，字段值只能是字符串，意味着不能嵌套！</p>
</li>
<li><p>hash适合存储对象</p>
<ul>
<li>使用对象类别和ID构成键名(关系数据库中的表名和ID)</li>
<li>使用字段表示对象的属性(关系数据名中的列名)</li>
<li>字段值即属性值(关系数据库中的值)</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>redis入门指南</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis-字符串]]></title>
      <url>https://qianchenglong.github.io/2015/04/15/redis-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>字符串类型是redis中最基本的数据类型，其他数据类型只是组织字符串的方式不同</p>
<ul>
<li><p>列表类型是以列表形式组织字符串</p>
</li>
<li><p>集合类型是以集合形式组织字符串</p>
</li>
</ul>
</li>
<li><p>字符串可以<strong>透明存储</strong>任何形式的字符串，二进制数据，如邮箱地址，json，图片等</p>
</li>
</ul>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>| 操作     | 命令   |<br>|———-+——–|<br>| 赋值     | set    |<br>| 取值     | get    |<br>| 追加     | append |<br>| 获取长度 | strlen |</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>redis入门指南</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis-多数据库]]></title>
      <url>https://qianchenglong.github.io/2015/04/15/redis-%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>一个redis实例提供了多个用来存储数据的字典</p>
</li>
<li><p>某个数据库对外都是一个从<strong>0</strong>开始的递增数字命名，默认支持16个，可通过参数<code>databases</code>修改</p>
</li>
<li><p>客户端与redis连接后，默认选择<strong>0号</strong>数据库，可通过<code>SELECT</code>命令切换</p>
</li>
<li><p>不支持自定义数据库名称</p>
</li>
<li><p>不支持账户密码控制(意味着没有权限控制)</p>
</li>
<li><p>数据库之间并未完全隔离，如<code>FLUSHALL</code>命令可清空所有数据库内容</p>
<p>所以，不同的应用应该使用不同的redis实例，而不是使用同一个redis实例不同数据库。</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>redis入门指南</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[node.js-异步IO原理]]></title>
      <url>https://qianchenglong.github.io/2015/04/14/node.js-%E5%BC%82%E6%AD%A5IO%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>实现<code>libuv</code>中间层，根据操作系统采用相应实现(win：IO完成端口，*nix：libev/libeio)</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.infoq.com/cn/articles/nodejs-asynchronous-io" target="_blank" rel="external">深入浅出Node.js（五）：初探Node.js的异步I/O实现</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[同步和异步IO]]></title>
      <url>https://qianchenglong.github.io/2015/04/14/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5IO/</url>
      <content type="html"><![CDATA[<h1 id="IO的过程"><a href="#IO的过程" class="headerlink" title="IO的过程"></a>IO的过程</h1><ol>
<li><p>等待流数据准备好</p>
</li>
<li><p>从内核向进程复制数据(决定同步还是异步)</p>
</li>
</ol>
<p>对unix来讲：阻塞式I/O(默认)，非阻塞式I/O(nonblock)，I/O复用(select/poll/epoll)都属于同步I/O，因为它们在数据由内核空间复制回进程缓冲区时都是阻塞的(不能干别的事)。</p>
<p>只有异步I/O模型(AIO)是符合异步I/O操作的含义的，即在1数据准备完成、2由内核空间拷贝回缓冲区后 通知进程，在等待通知的这段时间里可以干别的事</p>
<h1 id="同步，异步，阻塞，非阻塞"><a href="#同步，异步，阻塞，非阻塞" class="headerlink" title="同步，异步，阻塞，非阻塞"></a>同步，异步，阻塞，非阻塞</h1><p>同步和异步关注的是消息通信机制。</p>
<ul>
<li><p>同步意味着会等待在操作完成后继续执行</p>
</li>
<li><p>异步则是函数调用后，继续执行，进行的操作结果采用其他方式通知或处理(如回调函数，信号，消息等)</p>
</li>
</ul>
<p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。</p>
<h1 id="为什么需要异步IO？"><a href="#为什么需要异步IO？" class="headerlink" title="为什么需要异步IO？"></a>为什么需要异步IO？</h1><p>假设一种场景，某任务需要从磁盘文件读取数据，需要时间m。从网络读取数据，需要时间n。</p>
<p>考虑这段代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getFileFromDisk(<span class="string">"file_path"</span>);</span><br><span class="line">getFileFromNet(<span class="string">"url"</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>若采用同步方式，则需要时间为m+n</li>
<li>若采用异步方式，则需要时间为max(m, n)</li>
</ul>
<p>由此可见，当存在多个类似IO操作时，异步能极大地提高程序效率！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.zhihu.com/question/19732473" target="_blank" rel="external">怎样理解阻塞非阻塞与同步异步的区别？</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[进程和线程理解]]></title>
      <url>https://qianchenglong.github.io/2015/04/14/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h1><ul>
<li>目的都是为了提高对系统资源的利用率</li>
</ul>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul>
<li><p>进程是一个具有独立功能的程序关于某个数据集合的一次运行活动。<br>它可以申请和拥有系统资源，是一个动态的概念，是一个活动的实体。<br>它不只是程序的代码，还包括当前的活动，通过程序计数器的值和处理寄存器的内容来表示。</p>
</li>
<li><p>通常在一个进程中可以包含若干个线程，它们可以利用进程所拥有的资源。<br>在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。<br>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统内多个程序间并发执行的程度。</p>
</li>
</ul>
<h1 id="自我理解"><a href="#自我理解" class="headerlink" title="自我理解"></a>自我理解</h1><ul>
<li>每个进程是个独立的任务，完成特定的功能</li>
<li>线程是为了协同工作，完成进程的功能</li>
<li>进程具有层次关系，除主线程外，其他线程间属于对等关系</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tex-特殊字符的输入]]></title>
      <url>https://qianchenglong.github.io/2015/04/13/tex-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BE%93%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>| 字符      | lex      |<br>|———–+———-|<br>| 波浪线(~) | <code>$\sim$</code> |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tex-宏包列表]]></title>
      <url>https://qianchenglong.github.io/2015/04/13/tex-%E5%AE%8F%E5%8C%85%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>| 包名     | 功能         |<br>|———-+————–|<br>| enumitem | 设置列表间距 |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tex-去除pdf链接边框]]></title>
      <url>https://qianchenglong.github.io/2015/04/10/tex-%E5%8E%BB%E9%99%A4pdf%E9%93%BE%E6%8E%A5%E8%BE%B9%E6%A1%86/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;hypersetup&#125;</span><br><span class="line">\hypersetup&#123;</span><br><span class="line">    pdfborder=&#123;0 0 0&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://tex.stackexchange.com/questions/823/remove-ugly-borders-around-clickable-cross-references-and-hyperlinks" target="_blank" rel="external">http://tex.stackexchange.com/questions/823/remove-ugly-borders-around-clickable-cross-references-and-hyperlinks</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tex-设置pdf元数据]]></title>
      <url>https://qianchenglong.github.io/2015/04/10/tex-%E8%AE%BE%E7%BD%AEpdf%E5%85%83%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;hypersetup&#125;</span><br><span class="line">\hypersetup&#123;pdfauthor=&#123;Author&#125;,</span><br><span class="line">            pdftitle=&#123;Your Title&#125;,</span><br><span class="line">            pdfsubject=&#123;Whatever&#125;,</span><br><span class="line">            pdfkeywords=&#123;one, two&#125;,</span><br><span class="line">            pdfproducer=&#123;LaTeX&#125;,</span><br><span class="line">            pdfcreator=&#123;pdfLaTeX&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.zhihu.com/question/20786104" target="_blank" rel="external">http://www.zhihu.com/question/20786104</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[检查pdf文字字体信息]]></title>
      <url>https://qianchenglong.github.io/2015/04/10/%E6%A3%80%E6%9F%A5pdf%E6%96%87%E5%AD%97%E5%AD%97%E4%BD%93%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<ol>
<li><p>使用<code>pdf-xchange-viewer</code></p>
</li>
<li><p>选中想要检查的文字</p>
</li>
<li><p>右键<code>文本属性</code></p>
</li>
<li><p>点击<code>格式化</code>标签页</p>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://superuser.com/questions/117443/how-to-know-which-fonts-are-used-in-selected-part-of-a-pdf-document" target="_blank" rel="external">http://superuser.com/questions/117443/how-to-know-which-fonts-are-used-in-selected-part-of-a-pdf-document</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-argparse]]></title>
      <url>https://qianchenglong.github.io/2015/04/09/python-argparse/</url>
      <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>示例：</p>
<pre><code>ls -l test
</code></pre><ul>
<li><p>位置参数(Positional Arguments)</p>
<p>位置参数的作用取决于它的位置和程序(如<code>cp SRC DST</code>)</p>
<p>在示例中，<code>test</code>为位置参数</p>
</li>
<li><p>可选参数(Optional Arguments)，又叫作选项(option)，开关(switch)</p>
<p>一般都使用<code>-</code>和<code>--</code>来标识</p>
<p>在示例中，<code>l</code>为可选参数</p>
</li>
</ul>
<h1 id="使用可选参数"><a href="#使用可选参数" class="headerlink" title="使用可选参数"></a>使用<code>可选参数</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"--verbosity"</span>, help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"verbosity turned on"</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/2/howto/argparse.html" target="_blank" rel="external">https://docs.python.org/2/howto/argparse.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[arch下安装pandoc]]></title>
      <url>https://qianchenglong.github.io/2015/04/09/arch%E4%B8%8B%E5%AE%89%E8%A3%85pandoc/</url>
      <content type="html"><![CDATA[<ul>
<li><p>添加仓库</p>
<pre><code>gvim /etc/pacman.conf

[haskell-core]
Server = http://repo-hs.archlinuxcn.org/$arch
</code></pre></li>
<li><p>添加认证</p>
<pre><code>pacman-key -r 4209170B
pacman-key --lsign-key 4209170B
</code></pre></li>
<li><p>更新仓库</p>
<pre><code>pacman -Syy
</code></pre></li>
<li><p>安装pandoc</p>
<pre><code>pacman -S haskell-pandoc
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pandoc-将markdown输出pdf]]></title>
      <url>https://qianchenglong.github.io/2015/04/09/pandoc-%E5%B0%86markdown%E8%BE%93%E5%87%BApdf/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>win7</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p><a href="https://github.com/jgm/pandoc/releases" target="_blank" rel="external">pandoc</a></p>
</li>
<li><p><a href="http://miktex.org/" target="_blank" rel="external">MiKTex</a></p>
<p><a href="https://www.ctan.org/tex-archive/systems/win32/miktex/setup" target="_blank" rel="external">下载</a></p>
</li>
<li><p>将<code>pandoc.exe</code>所在目录(<code>C:\Users\USERNAME\AppData\Local\Pandoc</code>)添加到<code>PATH</code></p>
</li>
<li><p>查看当前系统字体</p>
<pre><code>fc-list &gt; C:\fonts.txt
</code></pre></li>
<li><p>运行<code>miktex-update_admin.exe</code>更新</p>
</li>
<li><p>生成</p>
<pre><code>pandoc 简历.md -o 1.pdf --latex-engine=xelatex -V mainfont=SimSun
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://johnmacfarlane.net/pandoc/faqs.html" target="_blank" rel="external">http://johnmacfarlane.net/pandoc/faqs.html</a></li>
<li><a href="http://zhouyichu.com/misc/Pandoc.html" target="_blank" rel="external">神器Pandoc的安装与使用</a></li>
<li><a href="http://sourceforge.net/p/miktex/bugs/2328/" target="_blank" rel="external">http://sourceforge.net/p/miktex/bugs/2328/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown-分隔代码段]]></title>
      <url>https://qianchenglong.github.io/2015/04/08/markdown-%E5%88%86%E9%9A%94%E4%BB%A3%E7%A0%81%E6%AE%B5/</url>
      <content type="html"><![CDATA[<p>因为markdown本身语法，两个代码段之间若不存在任何非空白字符，则视为同一代码段，<br>所以为了分隔代码段，而又不影响实际内容，可以插入html注释。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code block 1</span><br><span class="line"></span><br><span class="line">&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">code block 2</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://meta.stackexchange.com/questions/152358/separating-consecutive-code-blocks" target="_blank" rel="external">http://meta.stackexchange.com/questions/152358/separating-consecutive-code-blocks</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-单元测试组织和命名惯例]]></title>
      <url>https://qianchenglong.github.io/2015/04/07/python-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%BB%84%E7%BB%87%E5%92%8C%E5%91%BD%E5%90%8D%E6%83%AF%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>| 名称        | 作用                                         |<br>|————-+———————————————-|<br>| tests       | 目录，位于项目根目录下，用于存放单元测试文件 |<br>| test_XXX.py | 文件，用于测试某个模块的测试源码             |<br>| XXXTestCase | 类名，测试用例名                             |<br>| test_XXX    | 测试方法名                                   |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ctags]]></title>
      <url>https://qianchenglong.github.io/2015/04/03/ctags/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>可以指定多个文件或目录</p>
<pre><code>ctags file1 dir1
</code></pre></li>
</ul>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>–list-languages</p>
<p>查看支持的语言</p>
</li>
<li><p>–list-kinds=python</p>
<p>查看某种语言选项</p>
</li>
<li><p>–list-maps</p>
<p>查看对应语言的拓展名映射规则</p>
</li>
<li><p>-R</p>
<p>递归处理</p>
</li>
<li><p>–format=level</p>
<p> 指定tag的输出格式，默认为2，level=2时，ex_cmd会追加<code>;&quot;</code>(通过注释与老vi保持兼容)</p>
</li>
<li><p>−−fields=[+|−]flags</p>
<p>用来控制<code>extension_fileds</code>中要包含的内容</p>
</li>
<li><p>–options</p>
<p>指定配置文件</p>
</li>
<li><p>–exclude</p>
<p>指定多个时，需要分开指定。<code>--exclude=.git --exclude=node_modules --exclude=test</code></p>
</li>
<li><p>–extra=[+|−]flags</p>
<ul>
<li>q 生成额外的的修饰符tag(class::member)，以帮助定位类方法，但是会造成双倍大小！尽量不用。</li>
</ul>
</li>
</ul>
<h1 id="tag记录格式"><a href="#tag记录格式" class="headerlink" title="tag记录格式()"></a>tag记录格式(<http: ctags.sourceforge.net="" ctags.html#tag="" file="" format="">)</http:></h1><p><code>tag_name&lt;TAB&gt;file_name&lt;TAB&gt;ex_cmd;&quot;&lt;TAB&gt;extension_fields</code></p>
<ul>
<li><p><code>tag_name</code> 用来检索的key</p>
</li>
<li><p><code>file_name</code> tag所在的文件名</p>
</li>
<li><p><code>ex_cmd</code> vim用来定位的命令</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-访问父类方法]]></title>
      <url>https://qianchenglong.github.io/2015/04/03/python-%E8%AE%BF%E9%97%AE%E7%88%B6%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h1 id="使用super"><a href="#使用super" class="headerlink" title="使用super"></a>使用<code>super</code></h1><p>要求父类必须派生自<code>object</code>!</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(B, self).__init__()</span><br></pre></td></tr></table></figure>
<h1 id="使用类名访问"><a href="#使用类名访问" class="headerlink" title="使用类名访问"></a>使用类名访问</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        A.__init__(self)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/753640/inheritance-and-overriding-init-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/753640/inheritance-and-overriding-init-in-python</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[交换机端口模式]]></title>
      <url>https://qianchenglong.github.io/2015/04/03/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%AB%AF%E5%8F%A3%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="access"><a href="#access" class="headerlink" title="access"></a>access</h1><ul>
<li><p>收</p>
<p>判断是否有VLAN信息</p>
<ul>
<li><p>如果没有则打上端口的PVID，并进行交换转发，</p>
</li>
<li><p>如果有则直接丢弃（缺省）</p>
</li>
</ul>
</li>
<li><p>发</p>
<p>将报文的VLAN信息剥离，直接发送出去</p>
</li>
</ul>
<h1 id="Trunk"><a href="#Trunk" class="headerlink" title="Trunk"></a>Trunk</h1><ul>
<li><p>收</p>
<p>收到一个报文，判断是否有VLAN信息</p>
<ul>
<li><p>如果没有则打上端口的PVID，并进行交换转发，</p>
</li>
<li><p>如果有判断该trunk端口是否允许该 VLAN的数据进入</p>
<ul>
<li><p>如果可以则转发</p>
</li>
<li><p>否则丢弃</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>发</p>
<p>比较端口的PVID和将要发送报文的VLAN信息</p>
<ul>
<li><p>如果两者相等则剥离VLAN信息，再发送</p>
</li>
<li><p>如果不相等则直接发送</p>
</li>
</ul>
</li>
</ul>
<h1 id="Hybrid"><a href="#Hybrid" class="headerlink" title="Hybrid"></a>Hybrid</h1><ul>
<li><p>收</p>
<p>收到一个报文判断是否有VLAN信息</p>
<ul>
<li><p>如果没有则打上端口的PVID，并进行交换转发，</p>
</li>
<li><p>如果有则判断该hybrid端口是否允许该VLAN的数据进入</p>
<ul>
<li><p>如果可以则转发</p>
</li>
<li><p>否则丢弃</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>发</p>
<p>判断该VLAN在本端口的属性（disp interface 即可看到该端口对哪些VLAN是untag， 哪些VLAN是tag）</p>
<ul>
<li><p>如果是untag则剥离VLAN信息，再发送</p>
</li>
<li><p>如果是tag则直接发送</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-获取父类名称]]></title>
      <url>https://qianchenglong.github.io/2015/04/03/python-%E8%8E%B7%E5%8F%96%E7%88%B6%E7%B1%BB%E5%90%8D%E7%A7%B0/</url>
      <content type="html"><![CDATA[<h1 id="通过-bases-属性"><a href="#通过-bases-属性" class="headerlink" title="通过__bases__属性"></a>通过<code>__bases__</code>属性</h1><pre><code>str.__bases__
</code></pre><h1 id="通过inspect模块"><a href="#通过inspect模块" class="headerlink" title="通过inspect模块"></a>通过<code>inspect</code>模块</h1><pre><code>inspect.getmro(str)
</code></pre><p><strong>注：</strong></p>
<ul>
<li>mro:method resolution order</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/2611892/get-python-class-parents" target="_blank" rel="external">http://stackoverflow.com/questions/2611892/get-python-class-parents</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-简单http服务]]></title>
      <url>https://qianchenglong.github.io/2015/04/02/python-%E7%AE%80%E5%8D%95http%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><p>进入web根目录</p>
</li>
<li><p>运行</p>
<pre><code>python -m SimpleHTTPServer
</code></pre></li>
<li><p>访问</p>
<pre><code>http://localhost:8000
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://coolshell.cn/articles/1480.html" target="_blank" rel="external">http://coolshell.cn/articles/1480.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-运行模块]]></title>
      <url>https://qianchenglong.github.io/2015/04/02/python-%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="使用python选项方式"><a href="#使用python选项方式" class="headerlink" title="使用python选项方式"></a>使用<code>python</code>选项方式</h1><pre><code>python -m SimpleHTTPServer
</code></pre><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>python会按照模块搜索路径列表去搜索执行</li>
</ul>
<h1 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h1><ul>
<li><p>需要指定模块路径名</p>
<p>“C:\Python27-32\Lib\SimpleHTTPServer.py”</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-pydoc]]></title>
      <url>https://qianchenglong.github.io/2015/04/02/python-pydoc/</url>
      <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul>
<li>不但可以查看系统本身的文档，还可以查看拓展包，当前目录下的源码文档</li>
</ul>
<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="交互式命令行"><a href="#交互式命令行" class="headerlink" title="交互式命令行"></a>交互式命令行</h2><p>在进入命令行之前，自动导入<code>help()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydoc <span class="keyword">import</span> help</span><br></pre></td></tr></table></figure>
<h2 id="使用http服务器方式"><a href="#使用http服务器方式" class="headerlink" title="使用http服务器方式"></a>使用http服务器方式</h2><p>默认包含当前路径源码文档</p>
<pre><code>pydoc.py -p 8000
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-为什么是len()而不是方法或属性]]></title>
      <url>https://qianchenglong.github.io/2015/04/02/python-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFlen()%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B9%E6%B3%95%E6%88%96%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://lucumr.pocoo.org/2011/7/9/python-and-pola/" target="_blank" rel="external">Python and the Principle of Least Astonishment</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-类]]></title>
      <url>https://qianchenglong.github.io/2015/04/02/python-%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>python中的类是C++和Modula-3的混合体</p>
</li>
<li><p>C++角度，所有成员使用<code>public</code>，所有方法都是<code>virtual</code></p>
</li>
<li><p>和Modula-3一样，python没有隐式关联对象与数据和方法</p>
<p>所有方法在定义时，显示声明第一个参数<code>self</code></p>
<p>在调用时，self隐式赋值</p>
</li>
<li><p>同stmalltalk一样，类本身也是对象，此机制提高了导入和重命名语义</p>
</li>
<li><p>同C++和Modula-3不一样的是，内置类型可以被拓展</p>
</li>
<li><p>允许多重继承</p>
</li>
<li><p>子类可以重写父类的任何方法</p>
</li>
<li><p>子类可以调用父类中的同名方法</p>
</li>
<li><p>子类<code>__init__</code>如果需要，必须显式调用父类<code>__init__</code>方法</p>
</li>
<li><p>类可以被动态创建，且可以在创建之后被修改</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-内建变量]]></title>
      <url>https://qianchenglong.github.io/2015/04/02/python-%E5%86%85%E5%BB%BA%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<ul>
<li><p><code>__name__</code> 模块名，主模块为<code>__main__</code></p>
</li>
<li><p><code>__doc__</code> 文档字符串</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AdBlock Plus规则语法]]></title>
      <url>https://qianchenglong.github.io/2015/04/02/AdBlock%20Plus%E8%A7%84%E5%88%99%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul>
<li><p>规则</p>
<pre><code>正则表达式
</code></pre></li>
<li><p>定义例外规则</p>
<pre><code>@@|规则
</code></pre></li>
</ul>
<h1 id="元素隐藏"><a href="#元素隐藏" class="headerlink" title="元素隐藏"></a>元素隐藏</h1><p>不支持通配符，可在前面加上域名以达到只在某域名下工作</p>
<ul>
<li><p>根据标签类名</p>
<pre><code>##div.textad
</code></pre></li>
<li><p>根据标签ID</p>
<pre><code>##div#sponsorad
</code></pre></li>
<li><p>根据标签名</p>
<pre><code>##textad
</code></pre></li>
</ul>
<h1 id="属性选择符"><a href="#属性选择符" class="headerlink" title="属性选择符"></a>属性选择符</h1><p>通过标签的属性来选择标签以屏蔽，例如<code>##table[width=&quot;80%&quot;]</code></p>
<p>可使用正则来匹配属性名</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://adblockplus.org/zh_CN/filters" target="_blank" rel="external">https://adblockplus.org/zh_CN/filters</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-相对导入]]></title>
      <url>https://qianchenglong.github.io/2015/04/01/python-%E7%9B%B8%E5%AF%B9%E5%AF%BC%E5%85%A5/</url>
      <content type="html"><![CDATA[<ul>
<li><p>相对导入是基于当前模块的名称(<code>__name__</code>)，其实就是<code>. &lt;=&gt; __name__</code></p>
</li>
<li><p>当一个模块作为主模块时，它的名称为<code>__main__</code>，所以在主模块中，不能使用相对导入！</p>
</li>
<li><p>当一个模块不作为主模块时，也就是说被主模块引用，必须使用相对导入(因为模块的搜索)</p>
</li>
</ul>
<p>#参考</p>
<ol>
<li><a href="https://docs.python.org/2/tutorial/modules.html#intra-package-references" target="_blank" rel="external">https://docs.python.org/2/tutorial/modules.html#intra-package-references</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-获取主模块文件名]]></title>
      <url>https://qianchenglong.github.io/2015/04/01/python-%E8%8E%B7%E5%8F%96%E4%B8%BB%E6%A8%A1%E5%9D%97%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> __main__</span><br><span class="line"><span class="keyword">print</span> __main__.__file__</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>交互式shell中执行时，<code>__main__</code>没有<code>__file__</code>属性</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/606561/how-to-get-filename-of-the-main-module-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/606561/how-to-get-filename-of-the-main-module-in-python</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-安装脚本经常使用的API]]></title>
      <url>https://qianchenglong.github.io/2015/04/01/python-%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84API/</url>
      <content type="html"><![CDATA[<ul>
<li><p>判断当前系统类型</p>
<pre><code>platform.system() == &apos;Windows&apos;
os.name == &apos;nt&apos;
</code></pre></li>
<li><p>获取安装绝对路径名(不带”..”)</p>
<pre><code>os.path.abspath(r&apos;./setting.ini&apos;)
</code></pre></li>
<li><p>获取脚本所在的目录</p>
<pre><code>os.path.dirname(os.path.realpath(__file__)
</code></pre></li>
<li><p>获取用户配置完全路径名</p>
<pre><code>os.path.expanduser(r&apos;~/_vimrc&apos;)
</code></pre></li>
<li><p>目录不存在则创建(递归创建)</p>
<pre><code>if not os.path.exists(directory):
    os.makedirs(directory)

os.makedirs(os.path.dirname(f[1]), exist_ok=True)
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-pip设置第三方源]]></title>
      <url>https://qianchenglong.github.io/2015/04/01/python-pip%E8%AE%BE%E7%BD%AE%E7%AC%AC%E4%B8%89%E6%96%B9%E6%BA%90/</url>
      <content type="html"><![CDATA[<h1 id="命令行指定"><a href="#命令行指定" class="headerlink" title="命令行指定"></a>命令行指定</h1><p>pip install -i <a href="http://pypi.douban.com/simple/" target="_blank" rel="external">http://pypi.douban.com/simple/</a> –trusted-host pypi.douban.com gevent</p>
<h1 id="配置文件指定"><a href="#配置文件指定" class="headerlink" title="配置文件指定"></a>配置文件指定</h1><ul>
<li><p>win7</p>
<p>~/pip/pip.ini</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://pypi.douban.com/simple</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=pypi.douban.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>linux</p>
<p>vi ~/.pip/pip.conf</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://pypi.douban.com/simple</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=pypi.douban.com</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="第三方源列表"><a href="#第三方源列表" class="headerlink" title="第三方源列表"></a>第三方源列表</h1><ul>
<li><a href="http://pypi.douban.com/" target="_blank" rel="external">http://pypi.douban.com/</a>  豆瓣</li>
<li><a href="http://pypi.hustunique.com/" target="_blank" rel="external">http://pypi.hustunique.com/</a>  华中理工大学</li>
<li><a href="http://pypi.sdutlinux.org/" target="_blank" rel="external">http://pypi.sdutlinux.org/</a>  山东理工大学</li>
<li><a href="http://pypi.mirrors.ustc.edu.cn/" target="_blank" rel="external">http://pypi.mirrors.ustc.edu.cn/</a>  中国科学技术大学</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CGI环境变量列表]]></title>
      <url>https://qianchenglong.github.io/2015/04/01/CGI%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>| 键                | 值                                                 |<br>|——————-+—————————————————-|<br>| DOCUMENT_ROOT     | http服务器根目录                                   |<br>| GATEWAY_INTERFACE | CGI版本                                            |<br>| HTTP_COOKIE       | COOKIE值(若存在的话)                               |<br>| HTTP_HOST         | 尝试获取的页面所在服务器的主机名                   |<br>| HTTP_USER_AGENT   | 客户端代理类型(浏览器类型)                         |<br>| QUERY_STRING      | GET请求中的查询字符串                              |<br>| REMOTE_ADDR       | 客户端IP                                           |<br>| REMOTE_HOST       | 客户端主机名(需要开启reverse-name-lookup)          |<br>| REMOTE_PORT       | 客户端连接服务器的端口                             |<br>| REQUEST_METHOD    | 请求方法(GET，POST)                                |<br>| REQUEST_URI       | URL中去除主机名的部分(相对于服务器的document root) |<br>| SCRIPT_FILENAME   | 访问资源在服务器中的完全路径名                     |<br>| SCRIPT_NAME       | 访问资源的路径,URL中的路径部分                     |<br>| SERVER_ADDR       | 服务器IP                                           |<br>| SERVER_ADMIN      | 服务器管理员邮箱                                   |<br>| SERVER_NAME       | 服务器域名                                         |<br>| SERVER_PORT       | 服务器监听端口                                     |<br>| SERVER_PROTOCOL   | 服务器http协议版本                                 |<br>| SERVER_SOFTWARE   | 服务器软件名称                                     |</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/cgi-bin/debug/print_all?a</span><br><span class="line"></span><br><span class="line">Environment</span><br><span class="line">COMSPEC: C:\Windows\system32\cmd.exe</span><br><span class="line">DOCUMENT_ROOT: E:/Work/Project/WifiClient/branches/br_ZSAC_v1.0.11_r565/src/httpd/www</span><br><span class="line">GATEWAY_INTERFACE: CGI/1.1</span><br><span class="line">HTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">HTTP_ACCEPT_ENCODING: gzip, deflate, sdch</span><br><span class="line">HTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4</span><br><span class="line">HTTP_CONNECTION: keep-alive</span><br><span class="line">HTTP_COOKIE: CNZZDATA1253757582=110588724-1425953082-%7C1427333981</span><br><span class="line">HTTP_DNT: 1</span><br><span class="line">HTTP_HOST: localhost</span><br><span class="line">HTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36</span><br><span class="line">PATH: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VSTSDB\Deploy;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\;C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\BIN;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools;C:\Windows\Microsoft.NET\Framework\v4.0.30319;C:\Windows\Microsoft.NET\Framework\v3.5;C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\VCPackages;C:\Program Files (x86)\HTML Help Workshop;C:\Program Files (x86)\HTML Help Workshop;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\NETFX 4.0 Tools;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;d:\Program Files (x86)\Git\cmd;E:\OS\Windows\lnk;E:\OS\Windows\bin;E:\Work\bin;E:\Soft\pandoc\bin\pandoc-1.12.4;D:\Program Files (x86)\Git\bin\;E:\Soft\cmake\bin\cmake-3.1.0-rc2-win32-x86\bin;E:\Soft\Doxygen\bin\doxygen-1.8.7\bin;E:\Soft\GraphViz\bin\graphviz-2.39.20140813\bin;C:\Python27-32\Scripts;E:\Soft\MinGW\bin\MinGW-w64-builds\x64-4.8.1-posix-seh-rev5\mingw64\bin;C:\Python27-32</span><br><span class="line">PATHEXT: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.py;.lnk</span><br><span class="line">QUERY_STRING: a</span><br><span class="line">REMOTE_ADDR: 127.0.0.1</span><br><span class="line">REMOTE_PORT: 50252</span><br><span class="line">REQUEST_METHOD: GET</span><br><span class="line">REQUEST_URI: /cgi-bin/debug/print_all?a</span><br><span class="line">SCRIPT_FILENAME: E:/Work/Project/WifiClient/branches/br_ZSAC_v1.0.11_r565/src/httpd/cgi-bin/debug/print_all</span><br><span class="line">SCRIPT_NAME: /cgi-bin/debug/print_all</span><br><span class="line">SERVER_ADDR: 127.0.0.1</span><br><span class="line">SERVER_ADMIN: [no address given]</span><br><span class="line">SERVER_NAME: localhost</span><br><span class="line">SERVER_PORT: 80</span><br><span class="line">SERVER_PROTOCOL: HTTP/1.1</span><br><span class="line">SERVER_SIGNATURE: </span><br><span class="line">SERVER_SOFTWARE: Apache/2.2.25 (Win32)</span><br><span class="line">SYSTEMROOT: C:\Windows</span><br><span class="line">WINDIR: C:\Windows</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cgi101.com/book/ch3/text.html" target="_blank" rel="external">http://www.cgi101.com/book/ch3/text.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-from import VS import]]></title>
      <url>https://qianchenglong.github.io/2015/03/31/python-from%20import%20VS%20import/</url>
      <content type="html"><![CDATA[<h1 id="from-A-B-C-import-D"><a href="#from-A-B-C-import-D" class="headerlink" title="from A.B.C import D"></a>from A.B.C import D</h1><ul>
<li><p>C之前的名字必须是包名</p>
</li>
<li><p>C必须是模块名</p>
<p>不能是已定义的名字(变量，函数，类)，如果这样的话，D没有意义</p>
</li>
<li><p>D名字导入进来，可以直接使用<code>D.name</code>访问</p>
</li>
</ul>
<h1 id="import-A-B"><a href="#import-A-B" class="headerlink" title="import A.B"></a>import A.B</h1><ul>
<li><p>最后部分可以是包名，模块名，已定义名字</p>
</li>
<li><p>需要使用<code>A.B.name</code>访问</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/2/tutorial/modules.html#packages" target="_blank" rel="external">https://docs.python.org/2/tutorial/modules.html#packages</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-包]]></title>
      <url>https://qianchenglong.github.io/2015/03/31/python-%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>包是一种模块命名空间的组织方法，使用<code>package.module</code>方式来访问模块，用来避免模块名冲突</p>
</li>
<li><p>python语法上，包是带有<code>__init__.py</code>的目录</p>
</li>
<li><p>使用<code>from package import item</code>导入</p>
<p><code>item</code>可以是已定义的名字，子模块或子包</p>
</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/2/tutorial/modules.html#packages" target="_blank" rel="external">https://docs.python.org/2/tutorial/modules.html#packages</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-模块]]></title>
      <url>https://qianchenglong.github.io/2015/03/31/python-%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p>一个*.py文件即一个模块</p>
</li>
<li><p>主模块，程序的入口模块</p>
</li>
<li><p>文件名(不包括路径和拓展名)即模块名，可通过<code>__name__</code>得到，主模块名叫<code>__main__</code></p>
</li>
<li><p>模块是一种代码组织方式，具有方便开发，测试，维护，复用等优点</p>
</li>
<li><p>模块中的符号表是<strong>私有的</strong>，意味着在模块当中的符号不会与其他模块冲突</p>
</li>
<li><p>内建方法<code>dir()</code>查看模块名字</p>
</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>module.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="无污染方式-优先使用"><a href="#无污染方式-优先使用" class="headerlink" title="无污染方式(优先使用)"></a>无污染方式(优先使用)</h2><ul>
<li><p>导入模块</p>
<pre><code>import moudle
</code></pre></li>
<li><p>访问模块中的符号(变量名，函数名)</p>
<pre><code>module.var
module.func
</code></pre></li>
</ul>
<h2 id="污染方式-不推荐使用"><a href="#污染方式-不推荐使用" class="headerlink" title="污染方式(不推荐使用)"></a>污染方式(不推荐使用)</h2><h3 id="部分导入"><a href="#部分导入" class="headerlink" title="部分导入"></a>部分导入</h3><ul>
<li><p>导入</p>
<pre><code>from module import var
</code></pre></li>
<li><p>使用</p>
<pre><code>var
</code></pre></li>
</ul>
<h3 id="全部导入-不会导入单下划线-开头的符号"><a href="#全部导入-不会导入单下划线-开头的符号" class="headerlink" title="全部导入(不会导入单下划线_开头的符号)"></a>全部导入(不会导入单下划线<code>_</code>开头的符号)</h3><ul>
<li><p>导入模块</p>
<pre><code>from module import *
</code></pre></li>
<li><p>使用</p>
<pre><code>var
func
</code></pre></li>
</ul>
<h1 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h1><ul>
<li><p>工作目录</p>
</li>
<li><p>sys.path(路径字符串列表)中的顺序搜索</p>
</li>
</ul>
<h1 id="标准模块-标准库"><a href="#标准模块-标准库" class="headerlink" title="标准模块(标准库)"></a>标准模块(标准库)</h1><ul>
<li><p>有些内建到解释器中</p>
</li>
<li><p>有些依赖于平台，如win下的<code>winreg</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/2/tutorial/modules.html" target="_blank" rel="external">https://docs.python.org/2/tutorial/modules.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-dhcp request IP研究]]></title>
      <url>https://qianchenglong.github.io/2015/03/31/windows-dhcp%20request%20IP%E7%A0%94%E7%A9%B6/</url>
      <content type="html"><![CDATA[<h1 id="从DHCP网络A切换至另一没有连接过的DHCP网络B"><a href="#从DHCP网络A切换至另一没有连接过的DHCP网络B" class="headerlink" title="从DHCP网络A切换至另一没有连接过的DHCP网络B"></a>从DHCP网络A切换至另一没有连接过的DHCP网络B</h1><ul>
<li>dhcp client拿A网络分配的IP去request</li>
</ul>
<h1 id="从DHCP网络A切换至另一连接过的DHCP网络B"><a href="#从DHCP网络A切换至另一连接过的DHCP网络B" class="headerlink" title="从DHCP网络A切换至另一连接过的DHCP网络B"></a>从DHCP网络A切换至另一连接过的DHCP网络B</h1><ul>
<li>dhcp client拿B网络分配过的IP去request</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sphinx-安装使用]]></title>
      <url>https://qianchenglong.github.io/2015/03/31/Sphinx-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>安装</p>
<pre><code>pip install Sphinx
</code></pre></li>
<li><p>使用向导生成配置文件</p>
<pre><code>sphinx-quickstart
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://sphinx-doc.org/tutorial.html" target="_blank" rel="external">http://sphinx-doc.org/tutorial.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-cgi调试技巧]]></title>
      <url>https://qianchenglong.github.io/2015/03/30/python-cgi%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/03/30/%E7%BC%96%E7%A8%8B%E4%B9%A6%E7%B1%8D/</url>
      <content type="html"><![CDATA[<ul>
<li><p>The Art of Readable Code(编写可读性代码的艺术)</p>
</li>
<li><p>Clean Code(代码整洁之道)</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[error code VS exception]]></title>
      <url>https://qianchenglong.github.io/2015/03/30/error%20code%20VS%20exception/</url>
      <content type="html"><![CDATA[<h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li><p>错误处理麻烦</p>
<p>函数调用后，需要检查其错误代码，并对相应错误进行处理(错误处理策略复杂)，<br>需要写很多”不相干”代码，包含很多<code>if-else</code>，代码丑陋，很难周密性检查，需要花很多精力处理。</p>
</li>
</ul>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-第三方库列表]]></title>
      <url>https://qianchenglong.github.io/2015/03/30/C++-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://gflags.github.io/gflags/" target="_blank" rel="external">gflags</a></p>
<p>命令行参数处理</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo-google站长工具验证]]></title>
      <url>https://qianchenglong.github.io/2015/03/30/hexo-google%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<h1 id="HTML标记方法"><a href="#HTML标记方法" class="headerlink" title="HTML标记方法"></a><code>HTML标记</code>方法</h1><ul>
<li>选择备用方法</li>
</ul>
<p><img src="/img/hexo-google站长工具验证-01.png" alt=""></p>
<ul>
<li>将代码复制到对应主题的<code>head.ejs</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络设备登录信息列表]]></title>
      <url>https://qianchenglong.github.io/2015/03/27/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>| 设备名               | IP            | 账号  | 密码  |<br>|———————-+—————+——-+——-|<br>| H3C Switch S2610-PWR | 192.168.0.234 | admin | admin |<br>| TL AC1000            | 192.168.1.253 | admin | admin |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TP-LINK-AC1000配置]]></title>
      <url>https://qianchenglong.github.io/2015/03/27/TP-LINK-AC1000%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="登录AC"><a href="#登录AC" class="headerlink" title="登录AC"></a>登录AC</h1><ul>
<li><p>AC默认IP(192.168.1.253:24)</p>
</li>
<li><p>PC设置静态同网段IP(网关不用设置，因为属于同网段，无需网关转发)</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-格式化json]]></title>
      <url>https://qianchenglong.github.io/2015/03/27/vim-%E6%A0%BC%E5%BC%8F%E5%8C%96json/</url>
      <content type="html"><![CDATA[<ul>
<li><p>使用python模块</p>
<pre><code>:%!python -m json.tool
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C-函数操作结果返回方式]]></title>
      <url>https://qianchenglong.github.io/2015/03/26/C-%E5%87%BD%E6%95%B0%E6%93%8D%E4%BD%9C%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="通过返回值"><a href="#通过返回值" class="headerlink" title="通过返回值"></a>通过返回值</h1><h2 id="直接值传递"><a href="#直接值传递" class="headerlink" title="直接值传递"></a>直接值传递</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>简单，快捷，不存在内存溢出</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><p>不能返回错误代码</p>
</li>
<li><p>无法返回非内置数据类型</p>
</li>
</ul>
<h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><p>返回简单的内置类型数据</p>
</li>
<li><p>出错少或错误不是很严重</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code>size_t strlen(const char * str);
</code></pre><h2 id="内部分配static类型数据，返回指针"><a href="#内部分配static类型数据，返回指针" class="headerlink" title="内部分配static类型数据，返回指针"></a>内部分配static类型数据，返回指针</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>可返回非内置数据类型</p>
</li>
<li><p>调用方便，调用者无需手动分配内存</p>
</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><p>不可重入</p>
</li>
<li><p>非线程安全</p>
</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><pre><code>char *inet_ntoa(struct in_addr);
</code></pre><h1 id="通过参数"><a href="#通过参数" class="headerlink" title="通过参数"></a>通过参数</h1><h2 id="调用者分配内存，需要传入缓冲区大小"><a href="#调用者分配内存，需要传入缓冲区大小" class="headerlink" title="调用者分配内存，需要传入缓冲区大小"></a>调用者分配内存，需要传入缓冲区大小</h2><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>可返回非内置数据类型</p>
</li>
<li><p>可重入</p>
</li>
<li><p>线程安全</p>
</li>
<li><p>正确操作下，内存不会溢出(通过缓冲区大小参数)</p>
</li>
</ul>
<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>调用麻烦，需要手动分配内存</li>
</ul>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><pre><code>char* fgets(char *str, int num, FILE * stream);
</code></pre><h2 id="调用者分配，不传入缓冲区大小-自己不采用，只是存在此种接口"><a href="#调用者分配，不传入缓冲区大小-自己不采用，只是存在此种接口" class="headerlink" title="调用者分配，不传入缓冲区大小(自己不采用，只是存在此种接口)"></a>调用者分配，不传入缓冲区大小(自己不采用，只是存在此种接口)</h2><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>可返回非内置数据类型</p>
</li>
<li><p>可重入</p>
</li>
<li><p>线程安全</p>
</li>
</ul>
<h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>存在缓冲区越界风险！</li>
</ul>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><pre><code>char * gets ( char * str );
</code></pre><h2 id="二次调用确定所需空间"><a href="#二次调用确定所需空间" class="headerlink" title="二次调用确定所需空间"></a>二次调用确定所需空间</h2><h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ul>
<li>可以返回调用者不能确定的内存空间的数据</li>
</ul>
<h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>二次调用，使用麻烦</li>
</ul>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><pre><code>DWORD GetAdaptersInfo(_Out_    PIP_ADAPTER_INFO pAdapterInfo, _Inout_  PULONG pOutBufLen);
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://msdn.microsoft.com/zh-cn/library/windows/desktop/aa365917(v=vs.85" target="_blank" rel="external">GetAdaptersInfo</a>.aspx)</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[extern "C"]]></title>
      <url>https://qianchenglong.github.io/2015/03/26/extern%20C/</url>
      <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>当使用C++编译器对C++源码编译时，对C函数采用”C”语言方式编译和连接(函数导出名不变)</p>
<h1 id="为什么需要extern-quot-C-quot"><a href="#为什么需要extern-quot-C-quot" class="headerlink" title="为什么需要extern &quot;C&quot;"></a>为什么需要<code>extern &quot;C&quot;</code></h1><p>因为C++支持函数重载，所以对函数名存在修饰操作。</p>
<p>若一个函数为普通全局函数，制作为dll，其他C程序进行调用，当编译该程序采用C编译器，无法找到该符号，因为C编译器与C++编译器对函数名的修饰规则不一致！</p>
<p>所以为了使C编译器能够使用这些函数，需要使用<code>extern &quot;C&quot;</code>声明。</p>
<h1 id="惯用法"><a href="#惯用法" class="headerlink" title="惯用法"></a>惯用法</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[采用doxygen的项目列表]]></title>
      <url>https://qianchenglong.github.io/2015/03/26/%E9%87%87%E7%94%A8doxygen%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li>log4cpp</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用宏控制dll导入或导出]]></title>
      <url>https://qianchenglong.github.io/2015/03/26/%E4%BD%BF%E7%94%A8%E5%AE%8F%E6%8E%A7%E5%88%B6dll%E5%AF%BC%E5%85%A5%E6%88%96%E5%AF%BC%E5%87%BA/</url>
      <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> XXX_HAS_DLL</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">ifdef</span> XXX_BUILD_DLL</span></span><br><span class="line"><span class="meta">#       <span class="meta-keyword">if</span> defined(_MSC_VER) || defined(__BORLANDC__) || defined(__MINGW32__)</span></span><br><span class="line"><span class="meta">#           <span class="meta-keyword">define</span> LOG4CPP_EXPORT __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#               <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#           <span class="meta-keyword">define</span> LOG4CPP_EXPORT</span></span><br><span class="line"><span class="meta">#               <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#       <span class="meta-keyword">if</span> defined(_MSC_VER) || defined(__BORLANDC__) || defined(__MINGW32__)</span></span><br><span class="line"><span class="meta">#           <span class="meta-keyword">define</span> LOG4CPP_EXPORT __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#               <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#           <span class="meta-keyword">define</span> LOG4CPP_EXPORT</span></span><br><span class="line"><span class="meta">#               <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> XXX_EXPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<ul>
<li><p>XXX为库名称</p>
</li>
<li><p>XXX_HAS_DLL 编译器是否支持<code>__declspec(dllexport)</code></p>
</li>
<li><p>XXX_BUILD_DLL 动态库内部使用，还是供外部引用</p>
</li>
<li><p>XXX_EXPORT 用来说明某个变量，函数，类是否为导出或导入</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>log4cpp/include/Export.hh</li>
<li><a href="https://gcc.gnu.org/wiki/Visibilit" target="_blank" rel="external">https://gcc.gnu.org/wiki/Visibilit</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[log4cpp]]></title>
      <url>https://qianchenglong.github.io/2015/03/26/log4cpp/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一个C++日志库，模仿Log4j(java日志库)</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul>
<li><p>可拓展的、多种记录日志方式，包括命令行、文件、回滚文件、内存、syslog服务器、<br>win事件日志、VS debuger等</p>
</li>
<li><p>可动态调整日志优先级</p>
</li>
<li><p>可动态加载配置文件</p>
</li>
<li><p>内存占用小，不到200KB</p>
</li>
<li><p>跨平台</p>
</li>
</ul>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>log4cpp主要有3大组件：category、appender、layout。</p>
<ul>
<li><p>layout</p>
<p>用来控制输出日志消息的格式，每个appender关联一个layout</p>
</li>
<li><p>appender</p>
<p>用来指定输出目的地</p>
</li>
<li><p>category</p>
<p>一个日志工作体，具有日志级别属性，可以拥有多个appender(一条消息可以输出到多个目的地)</p>
<p>category被组织成一棵树，子category创建时优先级缺省NOTSET，category缺省会继承父category的appender。<br>而如果不希望这种appender的继承关系，log4cpp允许使用additivity 标签，为false时新的appender取代category的appender列表。</p>
</li>
</ul>
<h1 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h1><ol>
<li><p>实例化一个layout对象，设置格式</p>
</li>
<li><p>实例化一个appender对象，设置layout</p>
</li>
<li><p>实例化一个category，添加appender</p>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://log4cpp.sourceforge.net/" target="_blank" rel="external">http://log4cpp.sourceforge.net/</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-log4cpp/" target="_blank" rel="external">便利的开发工具-log4cpp快速使用指南</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/03/25/cmake-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>修改目标输出文件名</p>
<pre><code>SET_TARGET_PROPERTIES(&lt;target_name&gt; PROPERTIES OUTPUT_NAME &lt;new_name&gt;)
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-获取当前进程文件名]]></title>
      <url>https://qianchenglong.github.io/2015/03/24/windows-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      <content type="html"><![CDATA[<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/QianChenglong/lily-windows/tree/master/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E6%96%87%E4%BB%B6%E5%90%8D" target="_blank" rel="external">源码地址</a></h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms683197(v=vs.85).aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/windows/desktop/ms683197(v=vs.85).aspx</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[syslinux-memdisk]]></title>
      <url>https://qianchenglong.github.io/2015/03/23/syslinux-memdisk/</url>
      <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>启动一些软盘镜像，硬盘镜像，ISO镜像。</p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>memdisk作为<code>kernel</code>，而那些镜像文件作为初始化文件系统(initrd)</p>
<p>镜像文件(zip或gzip格式)作为<code>INITRD</code>命令的参数传递</p>
<ul>
<li><p>命令行方式</p>
<p>memdisk initrd=hdt.img</p>
</li>
<li><p>配置文件方式</p>
<pre><code># Boot Hardware Detection Tool from floppy image
LABEL hdt_floppy
LINUX memdisk
INITRD hdt.img

# Boot Hardware Detection Tool from iso image (with &apos;iso&apos; parameter)
LABEL hdt_iso
LINUX memdisk
INITRD hdt.iso
APPEND iso

# Boot DOS from floppy image (with &apos;raw&apos; parameter)
LABEL dos_floppy_with_raw
LINUX memdisk
INITRD dosboot.img
APPEND raw
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.syslinux.org/wiki/index.php/MEMDISK" target="_blank" rel="external">http://www.syslinux.org/wiki/index.php/MEMDISK</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[syslinux]]></title>
      <url>https://qianchenglong.github.io/2015/03/20/syslinux/</url>
      <content type="html"><![CDATA[<h1 id="syslinux安装"><a href="#syslinux安装" class="headerlink" title="syslinux安装"></a>syslinux安装</h1><ul>
<li><p>安装时，会将<code>ldlinux.c32</code>,<code>ldlinux.sys</code>拷贝到安装目录，默认为<code>boot/syslinux/</code>，<br>可以使用<code>--directory  -d  Directory for installation target</code>指定</p>
<p>syslinux安装的分区上的PBR会根据安装目录查找<code>ldlinux.c32</code>，并将该目录作为根目录</p>
</li>
</ul>
<h1 id="syslinux引导过程"><a href="#syslinux引导过程" class="headerlink" title="syslinux引导过程"></a>syslinux引导过程</h1><ul>
<li><p>MBR加载活动分区PBR</p>
</li>
<li><p>PBR根据安装时指定的安装目录，查找<code>ldlinux.c32</code>，若找不到，则到根目录查找</p>
</li>
<li><p>查找读取<code>syslinux.cfg</code></p>
</li>
<li><p>进入菜单交互</p>
</li>
</ul>
<h1 id="syslinux文件说明"><a href="#syslinux文件说明" class="headerlink" title="syslinux文件说明"></a>syslinux文件说明</h1><p>| 文件名       | 功能                        | 依赖                     |<br>|————–+—————————–+————————–|<br>| ldlinux.c32  | 查找、解析syslinux.cfg      |                          |<br>| libutil.c32  | 功能库                      |                          |<br>| libcom32.c32 | 核心功能库                  |                          |<br>| vesamenu.c32 | 菜单功能                    | libutil.c32,libcom32.c32 |<br>| splash.jpg   | 图片背景                    |                          |<br>| syslinux.cfg | 启动配置文件                |                          |<br>| chain.c32    | 链式加载                    |                          |<br>| memdisk      | <code>memdisk</code>命令，虚拟内存磁盘 |                          |<br>| hdt.c32      | 硬件检测工具                | libmenu.c32,libgpl.c32   |<br>| linux.c32    | <code>linux</code>命令                 |                          |</p>
<h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><ul>
<li><p>启动ISO镜像</p>
<p>因为image都是通过虚拟设备(虚拟软盘，虚拟光驱)，由BIOS 13号中断来访问的，<br>所以当操作系统加载完设备驱动时，它将自己去访问设备，不再通过BIOS去访问，<br>这时虚拟设备将失效，报错<code>INT 13h access: Not all images will complete the boot process!</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.syslinux.org/wiki/index.php/Syslinux_5_Changelog" target="_blank" rel="external">http://www.syslinux.org/wiki/index.php/Syslinux_5_Changelog</a></li>
<li><a href="http://www.syslinux.org/wiki/index.php/Library_modules" target="_blank" rel="external">http://www.syslinux.org/wiki/index.php/Library_modules</a></li>
<li><a href="http://linux.die.net/man/1/syslinux" target="_blank" rel="external">http://linux.die.net/man/1/syslinux</a></li>
<li><a href="http://www.syslinux.org/wiki/index.php/SYSLINUX" target="_blank" rel="external">http://www.syslinux.org/wiki/index.php/SYSLINUX</a></li>
<li><a href="http://www.syslinux.org/wiki/index.php/Boot_an_Iso_image" target="_blank" rel="external">http://www.syslinux.org/wiki/index.php/Boot_an_Iso_image</a></li>
<li><a href="http://www.syslinux.org/wiki/index.php/MEMDISK#INT_13h_access:_Not_all_images_will_complete_the_boot_process.21" target="_blank" rel="external">http://www.syslinux.org/wiki/index.php/MEMDISK#INT_13h_access:_Not_all_images_will_complete_the_boot_process.21</a></li>
<li><a href="http://www.syslinux.org/wiki/index.php/MEMDISK" target="_blank" rel="external">http://www.syslinux.org/wiki/index.php/MEMDISK</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[活动分区]]></title>
      <url>https://qianchenglong.github.io/2015/03/20/%E6%B4%BB%E5%8A%A8%E5%88%86%E5%8C%BA/</url>
      <content type="html"><![CDATA[<p>活动分区，是MBR主分区中的一种，目的是为了标识哪个分区是启动分区。</p>
<p>在boot loader stage 1阶段，将检查DPT中是否有唯一活动分区，若存在，则载入执行该分区的VBR。</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>每个磁盘只能有一个活动分区</p>
</li>
<li><p>只能将主分区设置为活动分区，不能将逻辑分区设为活动分区</p>
</li>
</ul>
<h1 id="设置，取消活动分区"><a href="#设置，取消活动分区" class="headerlink" title="设置，取消活动分区"></a>设置，取消活动分区</h1><ul>
<li><p>使用<code>diskmgmt.msc</code></p>
</li>
<li><p>diskpart</p>
<ul>
<li><p>cmd中运行<code>diskpart</code></p>
</li>
<li><p>列出当前磁盘</p>
<pre><code>list disk
</code></pre></li>
<li><p>选择要操作的磁盘</p>
<pre><code>select disk X
</code></pre></li>
<li><p>列出分区</p>
<pre><code>list partition
</code></pre></li>
<li><p>选择要操作的分区</p>
<pre><code>select partition X
</code></pre></li>
<li><p>标记为活动分区</p>
<pre><code>active
</code></pre></li>
<li><p>标记为非活动分区</p>
<pre><code>inactive
</code></pre></li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://zh.wikipedia.org/wiki/%E6%B4%BB%E5%8A%A8%E5%88%86%E5%8C%BA" target="_blank" rel="external">维基-活动分区</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机启动过程]]></title>
      <url>https://qianchenglong.github.io/2015/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<ol>
<li><p>开机或重启(CPU执行第一条指令，跳转到FFFF:0000H)</p>
<p>Bochs模拟：</p>
<p><img src="../img/计算机启动过程_01.png" alt=""></p>
<p>Intel跳转指令：</p>
<p><img src="../img/计算机启动过程_02.png" alt=""></p>
</li>
<li><p>BIOS加电自检 (Power On Self Test)</p>
</li>
<li><p>BIOS自检完毕后，执行int 19(自举服务)，按照CMOS中存储的设备启动顺序，将介质中的MBR扇区载入到0000:7C00处，</p>
<p>检查其哨兵（0000:7DFE字）是否为(0x55AA)</p>
<ul>
<li><p>若是，则跳转到MBR载入位置(0000:7C00);</p>
</li>
<li><p>若不是则载入下一个启动介质的MBR，重复操作，</p>
</li>
<li><p>若没有找到合法MBR，则报错<code>Invalid partition table</code>、<code>operating system not found</code>、<code>Missing operating system</code>等类似错误，停机</p>
</li>
</ul>
</li>
<li><p>MBR首先将自己复制到0000:0600 处，然后继续执行</p>
<p><img src="../img/计算机启动过程_03.png" alt=""></p>
</li>
<li><p>在主分区表中搜索标志为活动的分区 . 如果发现没有活动分区或有不止一个活动分区 , 则转停止</p>
</li>
<li><p>将活动分区的第一个扇区(叫做分区启动记录，Volume Boot Record, VBR)读入内存地址0000:7C00处</p>
</li>
<li><p>检查(WORD)0000:7DFE是否等于0xAA55, 若不等于则显示<code>Missing Operating System</code>，然后停止</p>
</li>
<li><p>跳转到0000 :7C00处继续执行bootloader stage 2，加载相应操作系统的启动程序</p>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-linuxboot/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/linux/l-linuxboot/</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E4%B8%BB%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95" target="_blank" rel="external">维基-主引导记录</a></li>
<li><a href="http://en.wikipedia.org/wiki/Master_boot_record" target="_blank" rel="external">wiki-Master_boot_record</a></li>
<li><a href="http://en.wikipedia.org/wiki/Boot_sector" target="_blank" rel="external">http://en.wikipedia.org/wiki/Boot_sector</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MBR]]></title>
      <url>https://qianchenglong.github.io/2015/03/20/MBR/</url>
      <content type="html"><![CDATA[<h1 id="MBR是什么"><a href="#MBR是什么" class="headerlink" title="MBR是什么"></a>MBR是什么</h1><p>主引导记录（Master Boot Record，缩写：MBR），又叫做主引导扇区，位于硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。</p>
<p>在BIOS完成<a href="http://zh.wikipedia.org/wiki/%E5%8A%A0%E7%94%B5%E8%87%AA%E6%A3%80" target="_blank" rel="external">加电自检</a>后，将该扇区内容加载到内存中执行。</p>
<h1 id="MBR组成"><a href="#MBR组成" class="headerlink" title="MBR组成"></a>MBR组成</h1><p>| 开始地址   | 结束地址   | 作用                               | 字节数 |<br>|————+————+————————————+——–|<br>| 0x000(0)   | 0x1bd(445) | MBR，bootloader第一阶段代码        | 446    |<br>| 0x1be(446) | 0x1fd(509) | DPT，记录磁盘分区信息              | 64     |<br>| 0x1fe(510) | 0x1ff(511) | MAGIC(0x55,0xAA)，分区是否有效标志 | 2      |</p>
<h2 id="DPT成员"><a href="#DPT成员" class="headerlink" title="DPT成员"></a>DPT成员</h2><ul>
<li><p>用来记录分区相关信息</p>
</li>
<li><p>DPT表项占用16B，所以最多4个成员，意味着最多4个主分区！</p>
</li>
</ul>
<p><strong>Note:</strong></p>
<ul>
<li>分区最小颗粒为<strong>1柱面</strong></li>
</ul>
<p>硬盘分区结构信息：</p>
<p>| 偏移 | 长度(字节) | 意义                                                                                                   |<br>|——+————+——————————————————————————————————–|<br>| 00H  | 1          | 分区状态：00–&gt;非活动分区；80–&gt; 活动分区，其它数值没有意义                                            |<br>| 01H  | 1          | 分区起始磁头号(HEAD)，用到全部8位                                                                      |<br>| 02H  | 2          | 分区起始扇区号(SECTOR)，占据02H的位0－5； 该分区的起始磁柱号(CYLINDER)，占据 02H的位6－7和03H的全部8位 |<br>| 04H  | 1          | 文件系统标志位                                                                                         |<br>| 05H  | 1          | 分区结束磁头号(HEAD)，用到全部8位                                                                      |<br>| 06H  | 2          | 分区结束扇区号(SECTOR)，占据06H的位0－5； 该分区的终止磁柱号(CYLINDER)，占据 06H的位6－7和07H的全部8位 |<br>| 08H  | 4          | 分区起始逻辑扇区号,低位字节在前(小端模式)，如0x41394006，实际为0x06403941                              |<br>| 0CH  | 4          | 分区总的扇区数                                                                                         |</p>
<p>实例分析：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">0000000: eb 63 90 8e d8 8e d0 bc 00 7c 89 e6 06 57 8e c0</span><br><span class="line">0000010: fb fc bf 00 06 b9 00 01 f3 a5 ea 1f 06 00 00 52</span><br><span class="line">0000020: 52 b4 41 bb aa 55 31 c9 30 f6 f9 cd 13 72 13 81</span><br><span class="line">0000030: fb 55 aa 75 0d d1 e9 73 09 66 c7 06 8d 06 b4 42</span><br><span class="line">0000040: eb 15 5a b4 08 cd 13 83 e1 3f 51 0f b6 c6 40 f7</span><br><span class="line">0000050: e1 52 50 66 31 c0 66 99 e8 66 00 80 01 00 00 00</span><br><span class="line">0000060: 00 00 00 00 ff fa 90 90 f6 c2 80 74 05 f6 c2 70</span><br><span class="line">0000070: 74 02 b2 80 ea 79 7c 00 00 31 c0 8e d8 8e d0 bc</span><br><span class="line">0000080: 00 20 fb a0 64 7c 3c ff 74 02 88 c2 52 bb 17 04</span><br><span class="line">0000090: 80 27 03 74 06 be 88 7d e8 17 01 be 05 7c b4 41</span><br><span class="line">00000a0: bb aa 55 cd 13 5a 52 72 3d 81 fb 55 aa 75 37 83</span><br><span class="line">00000b0: e1 01 74 32 31 c0 89 44 04 40 88 44 ff 89 44 02</span><br><span class="line">00000c0: c7 04 10 00 66 8b 1e 5c 7c 66 89 5c 08 66 8b 1e</span><br><span class="line">00000d0: 60 7c 66 89 5c 0c c7 44 06 00 70 b4 42 cd 13 72</span><br><span class="line">00000e0: 05 bb 00 70 eb 76 b4 08 cd 13 73 0d f6 c2 80 0f</span><br><span class="line">00000f0: 84 d0 00 be 93 7d e9 82 00 66 0f b6 c6 88 64 ff</span><br><span class="line">0000100: 40 66 89 44 04 0f b6 d1 c1 e2 02 88 e8 88 f4 40</span><br><span class="line">0000110: 89 44 08 0f b6 c2 c0 e8 02 66 89 04 66 a1 60 7c</span><br><span class="line">0000120: 66 09 c0 75 4e 66 a1 5c 7c 66 31 d2 66 f7 34 88</span><br><span class="line">0000130: d1 31 d2 66 f7 74 04 3b 44 08 7d 37 fe c1 88 c5</span><br><span class="line">0000140: 30 c0 c1 e8 02 08 c1 88 d0 5a 88 c6 bb 00 70 8e</span><br><span class="line">0000150: c3 31 db b8 01 02 cd 13 72 1e 8c c3 60 1e b9 00</span><br><span class="line">0000160: 01 8e db 31 f6 bf 00 80 8e c6 fc f3 a5 1f 61 ff</span><br><span class="line">0000170: 26 5a 7c be 8e 7d eb 03 be 9d 7d e8 34 00 be a2</span><br><span class="line">0000180: 7d e8 2e 00 cd 18 eb fe 47 52 55 42 20 00 47 65</span><br><span class="line">0000190: 6f 6d 00 48 61 72 64 20 44 69 73 6b 00 52 65 61</span><br><span class="line">00001a0: 64 00 20 45 72 72 6f 72 0d 0a 00 bb 01 00 b4 0e</span><br><span class="line">00001b0: cd 10 ac 3c 00 75 f4 c3 15 49 e4 03 00 00 80 01</span><br><span class="line">00001c0: 01 00 07 fe ff ff 3f 00 00 00 41 39 40 06 00 fe</span><br><span class="line">00001d0: ff ff 0f fe ff ff fe 3f 40 06 cc 08 f8 33 00 00</span><br><span class="line">00001e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00001f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 aa</span><br></pre></td></tr></table></figure>
<p>分区1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">                                                   00 01</span><br><span class="line">00001b0:                                           80 01</span><br><span class="line">         02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f</span><br><span class="line">00001c0: 01 00 07 fe ff ff 3f 00 00 00 41 39 40 06</span><br><span class="line"></span><br><span class="line">0x1be</span><br><span class="line">00H 1 80-&gt;活动分区</span><br><span class="line">01H 1 分区起始磁头号,1</span><br><span class="line">02H 2 分区起始扇区号，占用02H的低6位，1</span><br><span class="line">      分区起始柱面号，占用02H的高2位和03H的8位，0</span><br><span class="line">04H 1 文件系统标志位，NTFS(07H)</span><br><span class="line">05H 1 分区结束磁头号，ff(254)</span><br><span class="line">06H 2 分区结束扇区号，占用06H的低6位，63</span><br><span class="line">      分区结束柱面号，占用06H的高2位和07H的8位，113f(1477)</span><br><span class="line">08H 4 分区起始逻辑扇区号，0000003f(63)</span><br><span class="line">0cH 4 分区总扇区数，06403941(104872257)</span><br></pre></td></tr></table></figure>
<h3 id="使用fdisk查看DPT"><a href="#使用fdisk查看DPT" class="headerlink" title="使用fdisk查看DPT"></a>使用<code>fdisk</code>查看DPT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 500.1 GB, 500107862016 bytes</span><br><span class="line">255 heads, 63 sectors/track, 60801 cylinders, total 976773168 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x03e44915</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *          63   104872319    52436128+   7  HPFS/NTFS/exFAT</span><br><span class="line">/dev/sda2       104873982   976767177   435946598    f  W95 Ext&apos;d (LBA)</span><br><span class="line">/dev/sda5       104873984   207273983    51200000    7  HPFS/NTFS/exFAT</span><br><span class="line">/dev/sda6       207276032   317071359    54897664   83  Linux</span><br><span class="line">/dev/sda7   *   317073408   317464575      195584   83  Linux</span><br><span class="line">/dev/sda8       317466624   321370111     1951744   82  Linux swap / Solaris</span><br><span class="line">/dev/sda9       321372160   341852159    10240000   83  Linux</span><br><span class="line">/dev/sda10  *   341854208   362334207    10240000   83  Linux</span><br><span class="line">/dev/sda11      362334271   419473214    28569472   83  Linux</span><br><span class="line">/dev/sda12      419473278   976767177   278646950    7  HPFS/NTFS/exFAT</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zh.wikipedia.org/wiki/%E5%8A%A0%E7%94%B5%E8%87%AA%E6%A3%80" target="_blank" rel="external">维基-加电自检</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E4%B8%BB%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95" target="_blank" rel="external">维基-MBR</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下编译syslinux]]></title>
      <url>https://qianchenglong.github.io/2015/03/19/ubuntu%E4%B8%8B%E7%BC%96%E8%AF%91syslinux/</url>
      <content type="html"><![CDATA[<ul>
<li><p>下载源代码<a href="https://www.kernel.org/pub/linux/utils/boot/syslinux/" target="_blank" rel="external">官网</a></p>
</li>
<li><p>安装编译工具</p>
<pre><code>sudo apt-get install mingw32 nasm uuid-dev
</code></pre></li>
<li><p>提取源代码到<code>extN</code>分区</p>
</li>
<li><p>进入源代码目录</p>
<pre><code>make bios
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wmic常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/03/19/wmic%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查看分区信息</p>
<pre><code>wmic volume list brief
</code></pre></li>
<li><p>查看磁盘列表</p>
<pre><code>wmic diskdrive list
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C优秀书籍列表]]></title>
      <url>https://qianchenglong.github.io/2015/03/19/C%E4%BC%98%E7%A7%80%E4%B9%A6%E7%B1%8D%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li>C语言接口与实现:创建可重用软件的技术</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优秀个人博客]]></title>
      <url>https://qianchenglong.github.io/2015/03/18/%E4%BC%98%E7%A7%80%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://beej.us/" target="_blank" rel="external">http://beej.us/</a></p>
</li>
<li><p><a href="http://fleurer-lee.com/" target="_blank" rel="external">http://fleurer-lee.com/</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis-学习资源]]></title>
      <url>https://qianchenglong.github.io/2015/03/18/redis-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<ul>
<li><p>Redis设计与实现–黄健宏</p>
<ul>
<li><p><a href="http://weibo.com/huangz1990" target="_blank" rel="external">新浪微博</a></p>
</li>
<li><p><a href="http://redisbook.com/" target="_blank" rel="external">在线阅读</a></p>
</li>
<li><p><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">redis-3.0带注释源码</a></p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows双击安装apk]]></title>
      <url>https://qianchenglong.github.io/2015/03/18/windows%E5%8F%8C%E5%87%BB%E5%AE%89%E8%A3%85apk/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/QianChenglong/apk-instll" target="_blank" rel="external">https://github.com/QianChenglong/apk-instll</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-学习资源]]></title>
      <url>https://qianchenglong.github.io/2015/03/17/vim-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<ul>
<li><a href="http://learnvimscriptthehardway.stevelosh.com/" target="_blank" rel="external">http://learnvimscriptthehardway.stevelosh.com/</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-执行外部程序]]></title>
      <url>https://qianchenglong.github.io/2015/03/17/vim-%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exe</span> <span class="string">'!cmd'</span></span><br></pre></td></tr></table></figure>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>达到初步要求</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><p>vim被阻塞</p>
</li>
<li><p>当文件名包含非ASCII字符，且vim内部编码(utf-8)与shell编码(gbk)不一致时，报错：找不到该文件</p>
</li>
<li><p>不支持参数化，不能方便复用</p>
</li>
<li><p>不支持传入参数</p>
</li>
</ul>
<h2 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exe</span> <span class="built_in">printf</span>(<span class="string">'!"%s"'</span>, filename)</span><br></pre></td></tr></table></figure>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li>参数化</li>
</ul>
<h2 id="版本3"><a href="#版本3" class="headerlink" title="版本3"></a>版本3</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exe</span> <span class="built_in">iconv</span>(<span class="built_in">printf</span>(<span class="string">'%s "%s" "%s"'</span>,</span><br><span class="line">            \ <span class="variable">g:cmd_runner</span>,</span><br><span class="line">            \ <span class="variable">b:interpreter</span>,</span><br><span class="line">            \ <span class="variable">b:exec_filename</span>,)</span><br><span class="line">            \ <span class="string">'utf-8'</span>, <span class="string">'chinese'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul>
<li>支持中文</li>
</ul>
<h2 id="版本4"><a href="#版本4" class="headerlink" title="版本4"></a>版本4</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exe</span> <span class="string">'!start cmd'</span></span><br></pre></td></tr></table></figure>
<h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ul>
<li>非阻塞执行</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>执行控制台一闪而过，无法看见程序输出</li>
</ul>
<h2 id="版本5"><a href="#版本5" class="headerlink" title="版本5"></a>版本5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exe iconv(printf(&apos;%s &quot;%s&quot; &quot;%s&quot;&apos;,</span><br><span class="line">            \ g:cmd_runner,</span><br><span class="line">            \ b:interpreter,</span><br><span class="line">            \ b:exec_filename,)</span><br><span class="line">            \ &apos;utf-8&apos;, &apos;chinese&apos;)</span><br></pre></td></tr></table></figure>
<h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ul>
<li>控制台显示</li>
</ul>
<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>显示了命令字符串</li>
</ul>
<h2 id="版本6"><a href="#版本6" class="headerlink" title="版本6"></a>版本6</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exe</span> <span class="built_in">iconv</span>(<span class="built_in">printf</span>(<span class="string">'%s "%s" "%s" %s'</span>,</span><br><span class="line">            \ <span class="variable">g:cmd_runner</span>,</span><br><span class="line">            \ <span class="variable">b:interpreter</span>,</span><br><span class="line">            \ <span class="variable">b:exec_filename</span>,</span><br><span class="line">            \ <span class="variable">b:args</span>),</span><br><span class="line">            \ <span class="string">'utf-8'</span>, <span class="string">'chinese'</span>)</span><br></pre></td></tr></table></figure>
<p>#说明</p>
<h2 id="前置代码"><a href="#前置代码" class="headerlink" title="前置代码"></a>前置代码</h2><ul>
<li><code>.vimrc</code></li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fun! IsWin()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">has</span>(<span class="string">"win32"</span>) || <span class="built_in">has</span>(<span class="string">"win64"</span>)</span><br><span class="line"><span class="keyword">endf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> IsWin()</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">g:cmd_runner</span> = <span class="string">'!start E:/OS/Windows/bin/cb_console_runner.exe'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">g:cmd_runner</span> = <span class="string">'!gnome-terminal -x bash -c'</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>ftplugin/python.vim</code></li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">b:python_version</span> = <span class="string">'27-32'</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">b:args</span> = <span class="string">''</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">b:exec_filename</span> = <span class="built_in">expand</span>(<span class="string">"%:p"</span>)</span><br><span class="line"><span class="keyword">if</span> IsWin()</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b:interpreter</span> = <span class="built_in">printf</span>(<span class="string">'c:/python%s/python.exe'</span>, <span class="variable">b:python_version</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b:interpreter</span> = <span class="string">'python2 -B'</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[doxygen-配置使用]]></title>
      <url>https://qianchenglong.github.io/2015/03/17/doxygen-%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><ul>
<li>graphviz(dot)</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="使用向导工具-推荐"><a href="#使用向导工具-推荐" class="headerlink" title="使用向导工具(推荐)"></a>使用向导工具(推荐)</h2><pre><code>doxywizard
</code></pre><h2 id="手动修改配置文件"><a href="#手动修改配置文件" class="headerlink" title="手动修改配置文件"></a>手动修改配置文件</h2><ul>
<li><p>生成配置文件模板</p>
<pre><code>doxygen -g
</code></pre></li>
<li><p>修改配置文件<code>Doxyfile</code></p>
</li>
<li><p>生成doxygen</p>
<p>doxygen</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[各种闪存卡]]></title>
      <url>https://qianchenglong.github.io/2015/03/17/%E5%90%84%E7%A7%8D%E9%97%AA%E5%AD%98%E5%8D%A1/</url>
      <content type="html"><![CDATA[<h1 id="SD"><a href="#SD" class="headerlink" title="SD"></a>SD</h1><p>数码相机</p>
<p><img src="/img/各种闪存卡_01.png" alt=""></p>
<h1 id="TF-TransFlash-MicroSD"><a href="#TF-TransFlash-MicroSD" class="headerlink" title="TF(TransFlash, MicroSD)"></a>TF(TransFlash, MicroSD)</h1><p>手机</p>
<p><img src="/img/各种闪存卡_02.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[USB各种接口]]></title>
      <url>https://qianchenglong.github.io/2015/03/17/USB%E5%90%84%E7%A7%8D%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p><img src="/img/USB各种接口_01.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Programs Files vs Program files (x86)]]></title>
      <url>https://qianchenglong.github.io/2015/03/13/Programs%20Files%20vs%20Program%20files%20(x86)/</url>
      <content type="html"><![CDATA[<ul>
<li><p><code>Program Files</code>: 64bit程序</p>
</li>
<li><p><code>Program Fiels</code>: 32bit程序</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://answers.microsoft.com/en-us/windows/forum/windows_7-files/programs-files-vs-program-files-x86/7d631676-e688-472a-a1bb-eefccfeca6d7" target="_blank" rel="external">http://answers.microsoft.com/en-us/windows/forum/windows_7-files/programs-files-vs-program-files-x86/7d631676-e688-472a-a1bb-eefccfeca6d7</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio调试快速查看错误代码]]></title>
      <url>https://qianchenglong.github.io/2015/03/12/Visual%20Studio%E8%B0%83%E8%AF%95%E5%BF%AB%E9%80%9F%E6%9F%A5%E7%9C%8B%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>在<code>监视中</code>添加表达式<code>$err,hr</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://msdn.microsoft.com/zh-cn/library/ms164891.aspx" target="_blank" rel="external">msdn-伪变量</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-RAII与exit]]></title>
      <url>https://qianchenglong.github.io/2015/03/11/C++-RAII%E4%B8%8Eexit/</url>
      <content type="html"><![CDATA[<h1 id="exit执行析构函数情况"><a href="#exit执行析构函数情况" class="headerlink" title="exit执行析构函数情况"></a><code>exit</code>执行析构函数情况</h1><ul>
<li><p>不会执行<strong>栈</strong>空间上的类变量的析构函数！所以，在使用<code>RAII</code>时，调用<code>exit</code>会使其失效。</p>
</li>
<li><p>全局变量会执行析构函数</p>
</li>
<li><p><code>static</code>存储类型也会执行析构函数</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.copton.net/archives/2007/04/23/raii_vs__exit/index.html" target="_blank" rel="external">http://blog.copton.net/archives/2007/04/23/raii_vs__exit/index.html</a></li>
<li><a href="http://www.zhihu.com/question/20765487" target="_blank" rel="external">http://www.zhihu.com/question/20765487</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VC-常见错误]]></title>
      <url>https://qianchenglong.github.io/2015/03/11/VC-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h1 id="lily-lib-WinSock-cpp-obj-error-LNK2038-检测到“-ITERATOR-DEBUG-LEVEL”的不匹配项-值“0”不匹配值“2”-dhcpcd-obj-中"><a href="#lily-lib-WinSock-cpp-obj-error-LNK2038-检测到“-ITERATOR-DEBUG-LEVEL”的不匹配项-值“0”不匹配值“2”-dhcpcd-obj-中" class="headerlink" title="lily.lib(WinSock.cpp.obj) : error LNK2038: 检测到“_ITERATOR_DEBUG_LEVEL”的不匹配项: 值“0”不匹配值“2”(dhcpcd.obj 中)"></a><code>lily.lib(WinSock.cpp.obj) : error LNK2038: 检测到“_ITERATOR_DEBUG_LEVEL”的不匹配项: 值“0”不匹配值“2”(dhcpcd.obj 中)</code></h1><ul>
<li><p>原因：</p>
<p><code>debug</code>版程序链接了<code>release</code>版库</p>
<ul>
<li>在<code>cmake</code>中，<code>TAGET_LINK_LIBRARIES</code>中，没有单独链接相应版本的库。</li>
</ul>
</li>
<li><p>解决：</p>
<p>重新设置对应的库名称</p>
<ul>
<li><p>cmake</p>
<p>LIST(APPEND LIBS debug lilyd optimized lily)<br>TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBS})</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[proxifier-使用]]></title>
      <url>https://qianchenglong.github.io/2015/03/11/proxifier-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><ul>
<li><p>打开代理服务器配置页面</p>
<p><img src="/img/proxifier-使用_01.png" alt=""></p>
</li>
<li><p>配置代理服务器参数</p>
<p><img src="/img/proxifier-使用_02.png" alt=""></p>
</li>
<li><p>打开规则编辑页面</p>
<p><img src="/img/proxifier-使用_03.png" alt=""></p>
</li>
<li><p>添加规则</p>
<p><img src="/img/proxifier-使用_04.png" alt=""></p>
<p><strong>注：</strong></p>
<ul>
<li><p>需要将代理客户端程序放行(<code>Direct</code>)，避免回环</p>
</li>
<li><p><code>Default</code>设置为<code>Proxy</code>时，为全局代理</p>
</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://awy.me/2014/06/yong-shadowsocks-he-proxifier-zi-you-fang-wen-hu-lian-wang/" target="_blank" rel="external">http://awy.me/2014/06/yong-shadowsocks-he-proxifier-zi-you-fang-wen-hu-lian-wang/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cscope]]></title>
      <url>https://qianchenglong.github.io/2015/03/10/cscope/</url>
      <content type="html"><![CDATA[<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>-b 只建立索引，不进入交互查询(默认进入交互查询模式)</p>
</li>
<li><p>-f reffile 指定输出文件名</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[doxygen使用流程简记]]></title>
      <url>https://qianchenglong.github.io/2015/03/09/doxygen%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li><p>生成配置文件模板</p>
<pre><code>doxygen -g
</code></pre></li>
<li><p>修改配置文件<code>Doxyfile</code></p>
</li>
<li><p>生成doxygen</p>
<p>doxygen</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Doxygen常用修改选项]]></title>
      <url>https://qianchenglong.github.io/2015/03/09/doxygen%E5%B8%B8%E7%94%A8%E4%BF%AE%E6%94%B9%E9%80%89%E9%A1%B9/</url>
      <content type="html"><![CDATA[<ul>
<li>PROJECT_NAME</li>
</ul>
<p>项目名称</p>
<ul>
<li>PROJECT_NUMBER</li>
</ul>
<p>项目版本号</p>
<ul>
<li>OUTPUT_DIRECGTORY</li>
</ul>
<p>输出目录</p>
<ul>
<li>INPUT</li>
</ul>
<p>输入文件或目录，空格分隔</p>
<ul>
<li>RECURSIVE</li>
</ul>
<p>递归处理目录</p>
<ul>
<li><p>HAVE_DOT</p>
</li>
<li><p>CALL_GRAPH</p>
</li>
</ul>
<p>调用图</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iptables-命令简记]]></title>
      <url>https://qianchenglong.github.io/2015/03/09/iptables/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>多张表(filter, nat, mangle等)，最重要的是<code>filter</code>(<code>INPUT</code>, <code>FORWARD</code>, <code>OUTPUT</code>)用来制定本机规则</li>
</ul>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>-n IP数字显示，避免DNS查询，加快查看速度</p>
</li>
<li><p>–line-numbers 显示规则编号</p>
</li>
<li><p>-L 列出规则</p>
</li>
<li><p>-D 删除规则</p>
</li>
<li><p>-A 追加到链尾</p>
</li>
<li><p>-I 加到链头</p>
</li>
</ul>
<h1 id="查看类"><a href="#查看类" class="headerlink" title="查看类"></a>查看类</h1><ul>
<li><p>查看规则(默认操作filter表)</p>
<pre><code>iptables -L

iptables-save -t filter
</code></pre></li>
</ul>
<h1 id="删除类"><a href="#删除类" class="headerlink" title="删除类"></a>删除类</h1><ul>
<li><p>删除指定链规则</p>
<pre><code>iptables -D FORWARD 1(删除FORWARD链中的第一条规则)
</code></pre></li>
<li><p>清除所有已定义的规则</p>
<pre><code>iptables -F
</code></pre></li>
<li><p>清除自定义规则</p>
<pre><code>iptables -X
</code></pre></li>
<li><p>将所有的chain计数和流量统计归零</p>
<pre><code>iptables -Z
</code></pre></li>
</ul>
<h1 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h1><ul>
<li><p>INPUT链，默认政策：DROP</p>
<pre><code>iptables -P INPUT DROP
</code></pre></li>
<li><p>INPUT链，接口：本地环回(lo), ACCEPT</p>
<pre><code>iptalbes -A INPUT -i lo -j ACCEPT
</code></pre></li>
<li><p>INPUT链，接口：以太网口(eth0)，源IP：192.168.1.67, ACCEPT</p>
<pre><code>iptables -A INPUT -i eth0 -s 192.168.1.67 -j ACCEPT
</code></pre></li>
<li><p>INPUT链，接口：以太网口(eth0)，源IP段：192.168.1.0/24, ACCEPT</p>
<pre><code>iptables -A INPUT -i eth0 -s 192.168.1.0/24 -j ACCEPT
</code></pre></li>
<li><p>INPUT链，源IP段：192.168.1.0/24, TCP, 目的端口:80, ACCEPT</p>
<pre><code>iptables -A INPUT -s 192.168.1.0/24 -p tcp -dport 80 -j ACCEPT
</code></pre></li>
</ul>
<h1 id="保存规则"><a href="#保存规则" class="headerlink" title="保存规则"></a>保存规则</h1><pre><code>iptables-save
</code></pre><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>添加多个端口</p>
<pre><code>iptables -A INPUT -p tcp --match multiport --dports 80,22,53 -j ACCEPT
</code></pre></li>
<li><p>添加端口区间</p>
<pre><code>iptables -I INPUT -i eth1 -p tcp -m tcp --dport 6000:8000 -j ACCEPT
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-禁用IPv6]]></title>
      <url>https://qianchenglong.github.io/2015/03/09/linux-%E7%A6%81%E7%94%A8IPv6/</url>
      <content type="html"><![CDATA[<h1 id="通过procps"><a href="#通过procps" class="headerlink" title="通过procps"></a>通过<code>procps</code></h1><ul>
<li><p>修改<code>/etc/sysctl.conf</code></p>
<pre><code>net.ipv6.conf.all.disable_ipv6 = 1
</code></pre></li>
<li><p>重新读取</p>
<pre><code>sysctl -wp
</code></pre></li>
</ul>
<h1 id="通过boot-loader"><a href="#通过boot-loader" class="headerlink" title="通过boot loader"></a>通过boot loader</h1><ul>
<li><p>修改配置文件</p>
<ul>
<li><p>syslinux</p>
<pre><code>/boot/syslinux/syslinux.cfg
</code></pre></li>
<li><p>grub</p>
<pre><code>/boot/grub/grub.cfg
</code></pre></li>
</ul>
</li>
<li><p>在内核启动参数添加</p>
<pre><code>ipv6.disable=1
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[msysgit-windows下ssh配置]]></title>
      <url>https://qianchenglong.github.io/2015/03/09/msysgit-windows%E4%B8%8Bssh%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>需要将生成的<code>id_rsa</code>，<code>id_rsa.pub</code>放到msysgit的安装目录<code>.ssh</code>目录下</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sshd添加公钥]]></title>
      <url>https://qianchenglong.github.io/2015/03/07/sshd%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>centos7</p>
</li>
<li><p>OpenSSH_6.4p1, OpenSSL 1.0.1e-fips 11 Feb 2013</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><p>编辑配置文件<code>/etc/ssh/sshd_config</code></p>
<p>反注释掉<code>AuthorizedKeysFile      .ssh/authorized_keys</code></p>
<pre><code>AuthorizedKeysFile      .ssh/authorized_keys
</code></pre></li>
<li><p>编辑登录用户配置文件(<code>~/.ssh/authorized_keys</code>)</p>
<p>添加公钥</p>
</li>
<li><p>设置权限</p>
<p>chmod 700 ~/.ssh<br>chmod 600 ~/.ssh/authorized_keys</p>
</li>
</ul>
<h1 id="重启sshd"><a href="#重启sshd" class="headerlink" title="重启sshd"></a>重启sshd</h1><pre><code>systemctl restart sshd
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos-部署shadowsocks]]></title>
      <url>https://qianchenglong.github.io/2015/03/07/centos-%E9%83%A8%E7%BD%B2shadowsocks/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>centos7-64</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><p>安装pip</p>
<pre><code>yum install m2crypto python-setuptools
easy_install pip
</code></pre></li>
<li><p>安装shadowsocks</p>
<pre><code>pip install shadowsocks
</code></pre></li>
<li><p>创建<code>/etc/shadowsocks.json</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line"><span class="attr">"server_port"</span>:<span class="number">80</span>,</span><br><span class="line"><span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="attr">"password"</span>:<span class="string">"password"</span>,</span><br><span class="line"><span class="attr">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line"><span class="attr">"method"</span>:<span class="string">"table"</span>,</span><br><span class="line"><span class="attr">"fast_open"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开TCP fast open</p>
<pre><code>vi /etc/sysctl.conf

# turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3
sysctl -wp
</code></pre></li>
<li><p>启动server</p>
<pre><code>ssserver -c /etc/shadowsocks.json
</code></pre></li>
<li><p>防火墙放行</p>
<pre><code>firewall-cmd --permanent --add-port=80/tcp
firewall-cmd --reload
</code></pre></li>
</ol>
<h1 id="使用systemd启动"><a href="#使用systemd启动" class="headerlink" title="使用systemd启动"></a>使用systemd启动</h1><ul>
<li><p>编写service文件</p>
<pre><code>vim /etc/systemd/system/shadowsocks.service
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/run/shadowsocks/server.pid</span><br><span class="line">PermissionsStartOnly=true</span><br><span class="line">ExecStartPre=/bin/mkdir -p /run/shadowsocks</span><br><span class="line">ExecStart=/usr/bin/ssserver --pid-file /var/run/shadowsocks/server.pid --log-file /var/log/shadowsocks.log -c /etc/shadowsocks.json -d start</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动启动</p>
<pre><code>systemctl start shadowsocks
</code></pre></li>
<li><p>加入到开机启动</p>
<pre><code>systemctl enable shadowsocks
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.live-in.org/archives/2043.html" target="_blank" rel="external">http://www.live-in.org/archives/2043.html</a></li>
<li><a href="http://www.v2ex.com/t/108649" target="_blank" rel="external">http://www.v2ex.com/t/108649</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks/wiki/Optimizing-Shadowsocks" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/wiki/Optimizing-Shadowsocks</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-开发工具列表]]></title>
      <url>https://qianchenglong.github.io/2015/03/07/python-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://www.py2exe.org/" target="_blank" rel="external">py2exe</a></p>
<p>将python脚本编译为windows可执行程序</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-设置时区]]></title>
      <url>https://qianchenglong.github.io/2015/03/06/ubuntu-%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/</url>
      <content type="html"><![CDATA[<pre><code>sudo dpkg-reconfigure tzdata
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.christopherirish.com/2012/03/21/how-to-set-the-timezone-on-ubuntu-server/" target="_blank" rel="external">http://www.christopherirish.com/2012/03/21/how-to-set-the-timezone-on-ubuntu-server/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-部署shadowsocks]]></title>
      <url>https://qianchenglong.github.io/2015/03/06/ubuntu-%E9%83%A8%E7%BD%B2shadowsocks/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>安装pip</p>
<pre><code>apt-get install python-gevent python-pip
</code></pre></li>
<li><p>安装shadowsocks</p>
<pre><code>pip install shadowsocks
</code></pre></li>
<li><p>创建<code>/etc/shadowsocks/config.json</code></p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">“server”:“my_server_ip”,</span><br><span class="line"></span><br><span class="line">“server_port”:8388,</span><br><span class="line"></span><br><span class="line">“local_port”:1080,</span><br><span class="line"></span><br><span class="line">“password”:“password”,</span><br><span class="line"></span><br><span class="line">“timeout”:600,</span><br><span class="line"></span><br><span class="line">“method”:“table”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>启动server</p>
<ul>
<li><p>前端运行</p>
<p>/usr/local/bin/ssserver -c /etc/shadowsocks.json</p>
</li>
<li><p>daemon</p>
<p>/usr/local/bin/ssserver -c /etc/shadowsocks.json -d start</p>
</li>
</ul>
</li>
</ul>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p><a href="https://github.com/clowwindy/shadowsocks/wiki/Ports-and-Clients" target="_blank" rel="external">下载地址</a></p>
<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://felixqu.com/2014/06/23/setup-shadowsocks-on-ubuntu/" target="_blank" rel="external">http://felixqu.com/2014/06/23/setup-shadowsocks-on-ubuntu/</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VPN常见错误代码]]></title>
      <url>https://qianchenglong.github.io/2015/03/06/VPN%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<ul>
<li><p>809</p>
<ul>
<li>无法完成密钥交换(ISAKMP, udp port 500)，发送request，无response</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tcpdump]]></title>
      <url>https://qianchenglong.github.io/2015/03/06/tcpdump/</url>
      <content type="html"><![CDATA[<h1 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h1><pre><code>tcpdump [option] &lt;expression&gt;
</code></pre><h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>-n</p>
<p>不将IP转换为域名</p>
</li>
<li><p>-nn</p>
<p>协议，IP，端口都保持数字形式，不转换为对应名字</p>
</li>
<li><p>-i interface</p>
<p>指定接口</p>
</li>
<li><p>-A 使用ASCII解释数据包</p>
</li>
<li><p>-w file</p>
<p>packet存储到文件(pcap格式)，可用wireshark来分析</p>
</li>
</ul>
<h1 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h1><ul>
<li><p>DNS</p>
<pre><code>tcpdump port 53
</code></pre></li>
<li><p>ISAKMP</p>
<pre><code>tcpdump port 500
</code></pre></li>
<li><p>HTTP</p>
<pre><code>tcpdump -A tcp port 80
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-执行reg文件不要提问]]></title>
      <url>https://qianchenglong.github.io/2015/03/05/windows-%E6%89%A7%E8%A1%8Creg%E6%96%87%E4%BB%B6%E4%B8%8D%E8%A6%81%E6%8F%90%E9%97%AE/</url>
      <content type="html"><![CDATA[<p><code>regedit /s *.reg</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows安装方式]]></title>
      <url>https://qianchenglong.github.io/2015/03/05/windows%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="使用NT6-HDD-Installer安装"><a href="#使用NT6-HDD-Installer安装" class="headerlink" title="使用NT6-HDD-Installer安装"></a>使用<code>NT6-HDD-Installer</code>安装</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>参考其帮助信息</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>本地硬盘安装，速度快，花费时间少</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>需要已有系统</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.itopdog.cn/utilities-operating-systems/windows/windows7-setup.html" target="_blank" rel="external">http://www.itopdog.cn/utilities-operating-systems/windows/windows7-setup.html</a></li>
</ol>
<h1 id="使用win-man"><a href="#使用win-man" class="headerlink" title="使用win$man"></a>使用<code>win$man</code></h1><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>运行<code>win$man</code></li>
<li>安装</li>
</ul>
<h1 id="使用Win6Ins-v1-2-0-62"><a href="#使用Win6Ins-v1-2-0-62" class="headerlink" title="使用Win6Ins_v1.2.0.62"></a>使用<code>Win6Ins_v1.2.0.62</code></h1><h1 id="刻到U盘中"><a href="#刻到U盘中" class="headerlink" title="刻到U盘中"></a>刻到U盘中</h1><h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>使用<code>UltraISO</code>打开镜像文件</li>
<li>[启动] =&gt; [写入硬盘镜像]</li>
<li>重启选择U盘启动</li>
</ul>
<h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ul>
<li>保证性好</li>
</ul>
<h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>写入速度慢，win7大概需要<strong>15</strong>分钟</li>
</ul>
<h1 id="使用PE中的安装器软件"><a href="#使用PE中的安装器软件" class="headerlink" title="使用PE中的安装器软件"></a>使用PE中的安装器软件</h1><h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>U盘制作为PE启动盘</li>
<li>复制镜像文件到U盘或非系统分区中</li>
<li>重启从U盘运行PE系统</li>
<li>运行安装器</li>
</ul>
<h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><ul>
<li>不需要主机已安装系统</li>
</ul>
<h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>部分系统安装失败</li>
</ul>
<h1 id="解压运行setup-exe安装"><a href="#解压运行setup-exe安装" class="headerlink" title="解压运行setup.exe安装"></a>解压运行<code>setup.exe</code>安装</h1><h2 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>解压镜像文件到非系统分区</li>
<li>运行<code>setup.exe</code></li>
</ul>
<h2 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h2><ul>
<li>操作快</li>
</ul>
<h2 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>依赖现有系统，且32位不能安装64位系统</li>
</ul>
<h1 id="刻录到光盘中安装-基本不采用"><a href="#刻录到光盘中安装-基本不采用" class="headerlink" title="刻录到光盘中安装(基本不采用)"></a>刻录到光盘中安装(基本不采用)</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[strongswan搭建VPN]]></title>
      <url>https://qianchenglong.github.io/2015/03/04/strongswan%E6%90%AD%E5%BB%BAVPN/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>VPS服务商：digitalocean</p>
</li>
<li><p>VPS系统：ubuntu-14.04-64</p>
</li>
<li><p>VPN：strongSwan-5.1.2</p>
</li>
</ul>
<h1 id="准备编译环境"><a href="#准备编译环境" class="headerlink" title="准备编译环境"></a>准备编译环境</h1><pre><code>apt-get install build-essential
aptitude install libgmp10 libgmp3-dev libssl-dev pkg-config libpcsclite-dev libpam0g-dev
</code></pre><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><ul>
<li><p>下载源码</p>
<pre><code>wget http://download.strongswan.org/strongswan-5.1.2.tar.bz2
</code></pre></li>
<li><p>解压</p>
<pre><code>tar -jxvf strongswan-5.1.2.tar.bz2 &amp; cd strongswan-5.1.2
</code></pre></li>
<li><p>生成Makefile</p>
<pre><code>./configure --prefix=/usr --sysconfdir=/etc  --enable-openssl --enable-nat-transport --disable-mysql --disable-ldap  --disable-static --enable-shared --enable-md4 --enable-eap-mschapv2 --enable-eap-aka --enable-eap-aka-3gpp2  --enable-eap-gtc --enable-eap-identity --enable-eap-md5 --enable-eap-peap --enable-eap-radius --enable-eap-sim --enable-eap-sim-file --enable-eap-simaka-pseudonym --enable-eap-simaka-reauth --enable-eap-simaka-sql --enable-eap-tls --enable-eap-tnc --enable-eap-ttls
</code></pre></li>
</ul>
<ul>
<li><p>编译安装</p>
<pre><code>make &amp;&amp; make install
</code></pre></li>
</ul>
<h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><h2 id="根证书"><a href="#根证书" class="headerlink" title="根证书"></a>根证书</h2><ul>
<li><p>生成私钥</p>
<pre><code>ipsec pki --gen --outform pem &gt; caKey.pem
</code></pre></li>
<li><p>基于这个私钥自己签一个CA证书</p>
<pre><code>ipsec pki --self --in ca.pem --dn &quot;C=CN, O=strongSwan, CN=107.170.222.166&quot; --ca --outform pem &gt; caCert.pem
</code></pre></li>
</ul>
<h2 id="服务器证书"><a href="#服务器证书" class="headerlink" title="服务器证书"></a>服务器证书</h2><ul>
<li><p>生成私钥</p>
<p>ipsec pki –gen –outform pem &gt; serverKey.pem</p>
</li>
<li><p>基于这个私钥自己签一个CA证书</p>
<p>ipsec pki –pub –in serverKey.pem | ipsec pki –issue –cacert caCert.pem –cakey caKey.pem –dn “C=CN, O=strongSwan, CN=107.170.222.166” –san=”107.170.222.166” –flag serverAuth –flag ikeIntermediate –outform pem &gt; serverCert.pem</p>
<p><strong>注：</strong></p>
<pre><code>-   VPS的公网IP即自己的VPS的IP
</code></pre></li>
</ul>
<h2 id="客户端证书"><a href="#客户端证书" class="headerlink" title="客户端证书"></a>客户端证书</h2><ul>
<li><p>生成私钥</p>
<pre><code>ipsec pki --gen --outform pem &gt; clientKey.pem
</code></pre></li>
<li><p>基于这个私钥自己签一个 CA 证书</p>
<pre><code>ipsec pki --pub --in clientKey.pem | ipsec pki --issue --cacert caCert.pem --cakey caKey.pem --dn &quot;C=CN, O=strongSwan, CN=client&quot; --outform pem &gt; clientCert.pem
</code></pre></li>
<li><p>将该证书转换为<code>P12</code>格式</p>
<pre><code>openssl pkcs12 -export -inkey clientKey.pem -in clientCert.pem -name &quot;client&quot; -certfile caCert.pem -caname &quot;strongSwan CA&quot; -out clientCert.p12
</code></pre></li>
<li><p>使用<code>winscp</code>等工具将该证书<code>clientCert.p12</code>下载到本地</p>
</li>
</ul>
<h1 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h1><pre><code>cp caCert.pem /etc/ipsec.d/cacerts/
cp serverCert.pem /etc/ipsec.d/certs/
cp serverKey.pem /etc/ipsec.d/private/
</code></pre><h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><h2 id="etc-ipsec-conf"><a href="#etc-ipsec-conf" class="headerlink" title="/etc/ipsec.conf"></a>/etc/ipsec.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">config setup</span><br><span class="line"></span><br><span class="line">conn %default</span><br><span class="line">    keyexchange=ikev2</span><br><span class="line">    ike=aes256-sha1-modp1024! </span><br><span class="line">    esp=aes256-sha1!</span><br><span class="line">    dpdaction=clear</span><br><span class="line">    dpddelay=300s</span><br><span class="line">    rekey=no</span><br><span class="line"></span><br><span class="line">conn windows7</span><br><span class="line">    left=%any</span><br><span class="line">    leftauth=pubkey</span><br><span class="line">    leftcert=serverCert.pem</span><br><span class="line">    leftid=@107.170.222.166</span><br><span class="line">    leftsubnet=0.0.0.0/0</span><br><span class="line">    right=%any</span><br><span class="line">    rightauth=eap-mschapv2</span><br><span class="line">    rightsourceip=10.11.1.0/24</span><br><span class="line">    #rightsendcert=never</span><br><span class="line">    eap_identity=%any</span><br></pre></td></tr></table></figure>
<h1 id="etc-ipsec-secrets"><a href="#etc-ipsec-secrets" class="headerlink" title="/etc/ipsec.secrets"></a>/etc/ipsec.secrets</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">: RSA serverKey.pem</span><br><span class="line">qian : EAP &quot;test&quot;</span><br></pre></td></tr></table></figure>
<h1 id="etc-strongswan-conf"><a href="#etc-strongswan-conf" class="headerlink" title="/etc/strongswan.conf"></a>/etc/strongswan.conf</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">charon &#123;</span><br><span class="line">        dns1 = 8.8.8.8</span><br><span class="line">        load_modular = yes</span><br><span class="line">        plugins &#123;</span><br><span class="line">                include strongswan.d/charon/*.conf</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include strongswan.d/*.conf</span><br></pre></td></tr></table></figure>
<h1 id="配置iptables转发"><a href="#配置iptables转发" class="headerlink" title="配置iptables转发"></a>配置iptables转发</h1><pre><code>iptables -A INPUT -p udp --dport 500 -j ACCEPT
iptables -A INPUT -p udp --dport 4500 -j ACCEPT
echo 1 &gt; /proc/sys/net/ipv4/ip_forward
iptables -t nat -A POSTROUTING -s 10.11.1.0/24 -o eth0 -j MASQUERADE  #地址与上面地址池对应
iptables -A FORWARD -s 10.11.1.0/24 -j ACCEPT     #同上
</code></pre><p><strong>Note:</strong>为避免VPS重启后NAT功能失效，可以把如上5行命令添加到 /etc/rc.local 文件中，添加在exit那一行之前即可。</p>
<h1 id="重启strongSwan"><a href="#重启strongSwan" class="headerlink" title="重启strongSwan"></a>重启<code>strongSwan</code></h1><pre><code>ipsec restart
</code></pre><p><strong>Note:</strong>可以追加<code>--nofork</code>选项，帮助调试</p>
<h1 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h1><h2 id="win7"><a href="#win7" class="headerlink" title="win7"></a>win7</h2><h3 id="导入证书到win7"><a href="#导入证书到win7" class="headerlink" title="导入证书到win7"></a>导入证书到<code>win7</code></h3><p>参考<a href="https://wiki.strongswan.org/projects/strongswan/wiki/Win7Certs" target="_blank" rel="external">https://wiki.strongswan.org/projects/strongswan/wiki/Win7Certs</a></p>
<h3 id="建立VPN连接"><a href="#建立VPN连接" class="headerlink" title="建立VPN连接"></a>建立VPN连接</h3><p>参考<a href="https://wiki.strongswan.org/projects/strongswan/wiki/Win7Config" target="_blank" rel="external">https://wiki.strongswan.org/projects/strongswan/wiki/Win7Config</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/" target="_blank" rel="external">https://www.zeitgeist.se/2013/11/22/strongswan-howto-create-your-own-vpn/</a></li>
<li><a href="https://zh.opensuse.org/SDB:Setup_Ipsec_VPN_with_Strongswan" target="_blank" rel="external">https://zh.opensuse.org/SDB:Setup_Ipsec_VPN_with_Strongswan</a></li>
<li><a href="http://www.csnc.ch/misc/files/publications/2009_scsII_andreas_steffen_VPNWindows7x.pdf" target="_blank" rel="external">http://www.csnc.ch/misc/files/publications/2009_scsII_andreas_steffen_VPNWindows7x.pdf</a></li>
<li><a href="https://gist.github.com/losisli/11081793" target="_blank" rel="external">https://gist.github.com/losisli/11081793</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/03/02/windows-snprintf/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-_T和__T]]></title>
      <url>https://qianchenglong.github.io/2015/03/02/windows-_T%E5%92%8C__T/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><code>tchar.h</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __T(x)      L ## x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _T(x)       __T(x)</span></span><br></pre></td></tr></table></figure>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul>
<li><p>为什么不直接定义<code>#define _T(x) L ## x</code>呢？</p>
<p>因为在处理类似<code>_T(__FILE__)</code>时，会被拓展成<code>L__FILE__</code>，而<code>L__FILE__</code>则是未定义标识符</p>
<ul>
<li><p>为什么这样能做到？</p>
<p><code>_T(__FILE__)</code>先拓展<code>__FILE__</code>，在插入到该表达式，然后进行<strong>合并</strong>操作</p>
</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://cpp.ezbty.org/myfiles/boost/libs/wave/doc/macro_expansion_process.html" target="_blank" rel="external">http://cpp.ezbty.org/myfiles/boost/libs/wave/doc/macro_expansion_process.html</a></li>
<li><a href="https://gcc.gnu.org/onlinedocs/cppinternals/Macro-Expansion.html" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/cppinternals/Macro-Expansion.html</a></li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/09dwwt6y.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/09dwwt6y.aspx</a></li>
<li><a href="https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-UNICODE和_UNICODE作用]]></title>
      <url>https://qianchenglong.github.io/2015/03/02/windows-UNICODE%E5%92%8C_UNICODE%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="共性"><a href="#共性" class="headerlink" title="共性"></a>共性</h1><p>这两个宏都是为了控制API是使用UNICODE版还是ANSI版。</p>
<ul>
<li><p>若定义了，则相关的API为<code>*W</code>版本(UNICODE版)，如<code>GetWindowTextW</code></p>
</li>
<li><p>若未定义，则相关的API为<code>*A</code>版本(ANSI版)，如<code>GetWindowTextA</code></p>
</li>
</ul>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul>
<li><p><code>UNICODE</code>宏影响windows API</p>
</li>
<li><p><code>_UNICODE</code>宏影响C运行库以及MFC，作用与<code>UNICODE</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx" target="_blank" rel="external">http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx</a></li>
<li><a href="http://www.cnblogs.com/ini_always/archive/2011/05/20/2050517.html" target="_blank" rel="external">http://www.cnblogs.com/ini_always/archive/2011/05/20/2050517.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-WSA是什么意思]]></title>
      <url>https://qianchenglong.github.io/2015/03/02/windows-WSA%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Windows Sockets API</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.acronymfinder.com/Windows-Sockets-API-(aka-Winsock-Application)-(WSA).html" target="_blank" rel="external">http://www.acronymfinder.com/Windows-Sockets-API-(aka-Winsock-Application)-(WSA).html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/02/28/C-locale%E4%BD%9C%E7%94%A8/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[mbtowc]]></title>
      <url>https://qianchenglong.github.io/2015/02/28/mbtowc/</url>
      <content type="html"><![CDATA[<p>用来解决ANSI编码和wchar相关字符编码问题</p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>因为ANSI并不是一种固定的编码方式，其取决于当前LOCALE。</p>
<p>所以<code>mbtowc</code>根据<code>LC_CTYPE</code>来决定<strong>源</strong>的编码方式，将其转换为<code>wchar</code>。</p>
<p>程序默认启动<code>LC_ALL</code>为<code>C</code>。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li><p>标准IO</p>
<p>当使用wchar提供的宽字节版的IO操作函数时，内部需要使用mbtowc族函数进行编码转换</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cplusplus.com/reference/cstdlib/mbtowc/" target="_blank" rel="external">http://www.cplusplus.com/reference/cstdlib/mbtowc/</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4723adba0100hnb4.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_4723adba0100hnb4.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wprintf和printf问题]]></title>
      <url>https://qianchenglong.github.io/2015/02/28/wprintf%E5%92%8Cprintf%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>两个函数若不经过处理，混合使用将导致另一方的输出无法显示。</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>因为每个标准IO流都具有一个<strong>面向</strong>属性(面向单字节，面向宽字节)，不能混合！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/8681623/printf-and-wprintf-in-single-c-code" target="_blank" rel="external">http://stackoverflow.com/questions/8681623/printf-and-wprintf-in-single-c-code</a></li>
<li><a href="http://www.gnu.org/savannah-checkouts/gnu/libc/manual/html_node/Streams-and-I18N.html" target="_blank" rel="external">http://www.gnu.org/savannah-checkouts/gnu/libc/manual/html_node/Streams-and-I18N.html</a></li>
<li><a href="http://pubs.opengroup.org/onlinepubs/009696699/functions/xsh_chap02_05.html" target="_blank" rel="external">http://pubs.opengroup.org/onlinepubs/009696699/functions/xsh_chap02_05.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编译器与字符编码]]></title>
      <url>https://qianchenglong.github.io/2015/02/28/%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="源码字符集-the-source-character-set"><a href="#源码字符集-the-source-character-set" class="headerlink" title="源码字符集(the source character set)"></a>源码字符集(the source character set)</h2><p>源码文件是使用何种编码保存的</p>
<h2 id="执行字符集-the-execution-character-set"><a href="#执行字符集-the-execution-character-set" class="headerlink" title="执行字符集(the execution character set)"></a>执行字符集(the execution character set)</h2><p>可执行程序内保存的是何种编码(程序执行时内存中字符串编码)</p>
<h1 id="问题产生的背景"><a href="#问题产生的背景" class="headerlink" title="问题产生的背景"></a>问题产生的背景</h1><p>C或C++中没有对源码字符集，执行字符集做规定，导致不同的编译器标准不统一</p>
<ul>
<li><p>GCC</p>
<ul>
<li><p>源码字符集和执行字符集默认都为UTF-8</p>
</li>
<li><p>且都可以手动指定(-finput-charset, -fexec-charset)</p>
</li>
</ul>
</li>
<li><p>MSVC</p>
<ul>
<li><p>源码字符集，有BOM么，有则按BOM解释，无则使用本地Locale字符集(随系统设置而变</p>
</li>
<li><p>执行字符集，使用本地Locale字符集(随系统设置而变)</p>
</li>
</ul>
</li>
</ul>
<h1 id="wchar"><a href="#wchar" class="headerlink" title="wchar"></a>wchar</h1><p><code>wchar</code>采用unicode编码，具体编码方案与OS相关</p>
<ul>
<li>linux</li>
</ul>
<p>采用UTF-32LE存储</p>
<ul>
<li>windows</li>
</ul>
<p>采用UTF-16LE存储</p>
<h2 id="与编译器相关"><a href="#与编译器相关" class="headerlink" title="与编译器相关"></a>与编译器相关</h2><ul>
<li><p>对单字节字符串(<code>char*</code>)，编译器什么也不做，原样复制</p>
</li>
<li><p>对宽字节字符串(<code>wchar_t*</code>)，编译器需要转换</p>
<ul>
<li><p>GCC</p>
<p>根据源文件编码，将其转换为内部编码(UTF-32LE)</p>
</li>
<li><p>MSVC</p>
<p>源文件需为UTF-8或ANSI编码，将其转换为内部编码(UTF-16LE)</p>
</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.csdn.net/dbzhang800/article/details/7540905" target="_blank" rel="external">http://blog.csdn.net/dbzhang800/article/details/7540905</a></li>
<li><a href="http://jeffreyloo.blog.163.com/blog/static/121761670201061721939955/" target="_blank" rel="external">C/C++ 编译后的二进制程序中字符串的保存方式</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latin-1]]></title>
      <url>https://qianchenglong.github.io/2015/02/28/Latin-1/</url>
      <content type="html"><![CDATA[<p>Latin-1是ISO-8859-1编码的别名。</p>
<p>是一种ASCII编码的拓展编码，采用8位，针对于拉丁语系的编码，主要用于西欧语言。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zh.wikipedia.org/wiki/ISO/IEC_8859" target="_blank" rel="external">http://zh.wikipedia.org/wiki/ISO/IEC_8859</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E8%A5%BF%E6%AC%A7" target="_blank" rel="external">维基-西欧</a></li>
<li><a href="http://baike.baidu.com/view/1863779.htm" target="_blank" rel="external">百度百科-西欧国家</a></li>
<li><a href="http://en.wikipedia.org/wiki/ISO/IEC_8859-1" target="_blank" rel="external">http://en.wikipedia.org/wiki/ISO/IEC_8859-1</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ANSI编码]]></title>
      <url>https://qianchenglong.github.io/2015/02/28/ANSI%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="ANSI编码是什么？"><a href="#ANSI编码是什么？" class="headerlink" title="ANSI编码是什么？"></a>ANSI编码是什么？</h1><p>ANSI编码并不是一种编码！而是<strong>美国国家标准学会(American National Standards Institute)</strong>关于制作的ANSI C中关于区域字符编码的标准。</p>
<p>所以各地不同的编码方式统称为<strong>ANSI编码</strong></p>
<p>在简体中文windows系统下，利用记事本等软件默认保存为<code>ANSI编码</code>，对应的代码页为<code>cp936</code>(GBK)。</p>
<p>ANSI编码采用1~4字节进行编码，是一种变长编码方案，又叫做多字节字符集(MBCS)。</p>
<h1 id="ANSI编码的缺陷"><a href="#ANSI编码的缺陷" class="headerlink" title="ANSI编码的缺陷"></a>ANSI编码的缺陷</h1><p>ANSI编码都是各区域针对本地的编码方式，是在兼容ASCII编码的基础上拓充而来的，如GB2312，BIG5等。<br>因为各地编码存在冲突，所以无法做到互通。</p>
<h1 id="ANSI编码怎么实现的？"><a href="#ANSI编码怎么实现的？" class="headerlink" title="ANSI编码怎么实现的？"></a>ANSI编码怎么实现的？</h1><ul>
<li><p>原ASCII编码字符保持不变，仍然为占用1个字节。</p>
</li>
<li><p>对其他字符，采用多字节编码，第一字节(前导字节)具有一定特征来表明后续字节一起来表示一个字符，</p>
<p>如在GBK编码中，前导字节范围为0x81-0xFE。</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E9%A1%B5#Windows.EF.BC.88ANSI.EF.BC.89.E4.BB.A3.E7.A2.BC.E9.A0.81" target="_blank" rel="external">维基-Windows(ANSI)代码页</a></li>
<li><a href="http://en.wikipedia.org/wiki/American_National_Standards_Institute" target="_blank" rel="external">http://en.wikipedia.org/wiki/American_National_Standards_Institute</a></li>
<li><a href="http://www.guokr.com/blog/763017/" target="_blank" rel="external">遇到乱码不怕不怕啦——计算机字符编码详尽讲解</a></li>
<li><a href="http://baike.baidu.com/view/1273097.htm" target="_blank" rel="external">百度百科-ANSI编码</a></li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/vstudio/5z097dxa(v=vs.110" target="_blank" rel="external">msdn-支持多字节字符集</a>.aspx)</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows编程常用宏定义]]></title>
      <url>https://qianchenglong.github.io/2015/02/28/windows%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<p>| 宏名   | 定义   | 头文件  |<br>|——–+——–+———|<br>| __T(x) | L ## x | tchar.h |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VC命令行使用]]></title>
      <url>https://qianchenglong.github.io/2015/02/27/VC%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>链接库</p>
<pre><code>cl main.cpp /link user32.lib
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-unicode-BOM设置]]></title>
      <url>https://qianchenglong.github.io/2015/02/27/vim-unicode-BOM%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查询当前文件是否带有BOM标记</p>
<pre><code>:set bomb?
</code></pre></li>
<li><p>添加BOM</p>
<pre><code>:set bomb
</code></pre></li>
<li><p>去除BOM</p>
<pre><code>:set nobomb
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cnblogs.com/ini_always/archive/2011/12/24/2300621.html" target="_blank" rel="external">http://www.cnblogs.com/ini_always/archive/2011/12/24/2300621.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[od]]></title>
      <url>https://qianchenglong.github.io/2015/02/27/od/</url>
      <content type="html"><![CDATA[<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><ul>
<li><p>-t TYPE</p>
<p>指定输出格式，<br>TYPE由进制和多少字节组合决定，如x1，则以十六进制，每次输出1字节</p>
<ul>
<li>a named character</li>
<li>c ASCII character or backslash escape</li>
<li>d signed decimal</li>
<li>f floating point</li>
<li>o octal</li>
<li>u unsigned decimal</li>
<li>x hexadecimal</li>
<li>C char</li>
<li>S short</li>
<li>I int</li>
<li>L long</li>
<li>For floating point (f):</li>
<li>F float</li>
<li>D double</li>
<li>L long double</li>
</ul>
</li>
<li><p>-w BYTES</p>
<p>指定一行的宽度</p>
</li>
<li><p>-A, –address-radix=radix</p>
<p>指定文件偏移量显示的基数(d,o,x)</p>
</li>
<li><p>-j, –skip-bytes=BYTE</p>
<p>从BYTE（文件偏移量）开始显示</p>
</li>
<li><p>-c</p>
<p>把元素的内容按照ASCII码解释成对应的字符</p>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>十六进制，按字节输出，并输出对应的ASCII字符</p>
<pre><code>od -t x1 -c foo
</code></pre></li>
<li><p>同时按几种方式输出</p>
<pre><code>od -tx1 -tc foo
</code></pre></li>
<li><p>跳过指定字节</p>
<pre><code>od -Ax -tx1 -tc -j 0x065c main |less
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[socket常用宏]]></title>
      <url>https://qianchenglong.github.io/2015/02/27/socket%E5%B8%B8%E7%94%A8%E5%AE%8F/</url>
      <content type="html"><![CDATA[<p>| 宏名            | 值         | winsock2               | linux                     |<br>|—————–+————+————————+—————————|<br>| AF_INET         | 2          | winsock2.h =&gt; ws2def.h | socket.h =&gt; bits/socket.h |<br>| INADDR_LOOPBACK | 0x7f000001 | winsock2.h =&gt; ws2def.h | netinet/in.h              |<br>| SOCKET_ERROR    | -1         | winsock2.h             | 无                        |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-list转string]]></title>
      <url>https://qianchenglong.github.io/2015/02/13/python-list%E8%BD%ACstring/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">' '</span>.join(list)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cscope-使用]]></title>
      <url>https://qianchenglong.github.io/2015/02/13/cscope-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="配合find使用"><a href="#配合find使用" class="headerlink" title="配合find使用"></a>配合find使用</h1><ul>
<li><p>生成文件列表</p>
<pre><code>find src lib -type f -name &quot;*.[ch]&quot; -fprint cscope.files
</code></pre></li>
<li><p>生成数据库</p>
<pre><code>cscope -bqf .cscope.out
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/02/13/windows-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>查看文件属性</p>
<pre><code>attrib
</code></pre></li>
<li><p>计划任务</p>
<pre><code>taskschd.msc
</code></pre></li>
<li><p>设备管理器</p>
<pre><code>devmgmt.msc
</code></pre></li>
<li><p>查看系统信息</p>
<pre><code>msinfo32
</code></pre></li>
<li><p>查看dll导出符号表</p>
<pre><code>dumpbin /exports filename
</code></pre></li>
<li><p>导出注册表项</p>
<pre><code>regedit /e test.reg HKEY_CURRENT_USER\Environment
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[find-教程]]></title>
      <url>https://qianchenglong.github.io/2015/02/13/find-%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><pre><code>find [where-to-find] [filter] [action]
</code></pre><p>所有参数都是可选的。</p>
<ul>
<li><code>where-to-find</code>，默认当前路径<code>.</code></li>
<li><code>filter</code>，默认为空，即不过滤</li>
<li><code>action</code>，默认<code>-print</code>，向标准输出打印，换行符分隔</li>
</ul>
<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><ul>
<li><p>打印绝对路径</p>
<ul>
<li><p>windows</p>
<pre><code>find &quot;%cd%&quot;
</code></pre></li>
<li><p>linux</p>
<pre><code>find &quot;$PWD&quot;
</code></pre></li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://content.hccfl.edu/pollock/Unix/FindCmd.htm" target="_blank" rel="external">http://content.hccfl.edu/pollock/Unix/FindCmd.htm</a></li>
<li><a href="http://linux.die.net/man/1/find" target="_blank" rel="external">http://linux.die.net/man/1/find</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[find-常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/02/12/find-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h1><pre><code>find . -name &apos;*命令理解&apos; -exec rename -v &apos;s/命令理解/-comprehension/&apos; {} \;
</code></pre><h1 id="删除vs2010的无用文件"><a href="#删除vs2010的无用文件" class="headerlink" title="删除vs2010的无用文件"></a>删除vs2010的无用文件</h1><pre><code>find . -regextype  posix-extended -regex &quot;.*Debug|.*\.sdf&quot; -exec rm -rf {} \;
</code></pre><h1 id="批量添加-txt拓展名"><a href="#批量添加-txt拓展名" class="headerlink" title="批量添加.txt拓展名"></a>批量添加.txt拓展名</h1><pre><code>find . -type f -regextype posix-extended -regex &quot;\\.*[^.]*$&quot; -exec mv -v {} {}.txt \;
</code></pre><h1 id="找出最近修改过的文件"><a href="#找出最近修改过的文件" class="headerlink" title="找出最近修改过的文件"></a>找出最近修改过的文件</h1><pre><code>find . -mtime -4 | grep &apos;循环&apos;
</code></pre><h1 id="批量删除文件"><a href="#批量删除文件" class="headerlink" title="批量删除文件"></a>批量删除文件</h1><pre><code>find . -name &lt;expr&gt; -exec rm -v {} \;
</code></pre><h1 id="批量删除-git目录"><a href="#批量删除-git目录" class="headerlink" title="批量删除.git目录"></a>批量删除.git目录</h1><pre><code>find . -name &quot;.git&quot; -type d  -print0 | xargs -0 rm -vrf
</code></pre><h1 id="多目录查找"><a href="#多目录查找" class="headerlink" title="多目录查找"></a>多目录查找</h1><pre><code>find src lib -name &quot;*.[ch]&quot;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-ctags]]></title>
      <url>https://qianchenglong.github.io/2015/02/12/vim-ctags/</url>
      <content type="html"><![CDATA[<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li><p><code>tags</code>用来指定tags搜索目录列表</p>
<p>下列情况下，不再查找列表中的下个文件:</p>
<ul>
<li>找到了当前缓冲区的匹配的静态标签。</li>
<li>找到了全局标签。</li>
</ul>
</li>
<li><p>优先使用当前文件所在目录的tags，再使用当前目录的tags</p>
<p> set tags=./tags;tags</p>
</li>
<li><p>tagfiles()  返回 |List|，当前缓冲区用于搜索的标签文件名。这是 ‘tags’ 选项扩展后的内容。</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks?rq=1" target="_blank" rel="external">http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks?rq=1</a></li>
<li><code>:help tags-option</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gentoo安装纪录]]></title>
      <url>https://qianchenglong.github.io/2015/02/11/Gentoo%E5%AE%89%E8%A3%85%E7%BA%AA%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="安装环境配置"><a href="#安装环境配置" class="headerlink" title="安装环境配置"></a>安装环境配置</h1><ul>
<li><p><a href="https://www.gentoo.org/main/en/where.xml" target="_blank" rel="external">官网镜像下载</a></p>
</li>
<li><p>配置镜像从启动</p>
</li>
<li><p>按<strong>F1</strong>进入<code>kernel</code>选择</p>
</li>
<li><p>输入<code>gentoo</code>，启动</p>
</li>
</ul>
<h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><ul>
<li><p>查看网络</p>
<pre><code>ifconfig
</code></pre></li>
<li><p>若自动配置失败，执行<code>net-setup</code>，在选择<code>DHCP</code>即可</p>
</li>
</ul>
<h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><ul>
<li><p>分区规划</p>
<p>/dev/sda1   boot    128M    ext2<br>/dev/sda2   swap    512M    swap<br>/dev/sda3   root    剩余    ext4</p>
</li>
<li><p>格式化分区</p>
<pre><code>mkfs.ext2 /dev/sda1
mkswap /dev/sda2
mkfs.ext4 /dev/sda3
</code></pre></li>
<li><p>启用swap分区</p>
<pre><code>swapon /dev/sda2
</code></pre></li>
<li><p>挂载分区</p>
<pre><code>mount /dev/sda3 /mnt/gentoo
mkdir /mnt/gentoo/boot
mount /dev/sda1 /mnt/gentoo/boot
</code></pre></li>
</ul>
<h1 id="安装stage"><a href="#安装stage" class="headerlink" title="安装stage"></a>安装stage</h1><ul>
<li><p>设置当前时间</p>
<pre><code>date MMDDhhmmYYYY
</code></pre></li>
<li><p><code>cd /mnt/gentoo</code></p>
</li>
<li><p>下载stage3压缩包(选择就近mirror)</p>
<pre><code>links http://www.gentoo.org/main/en/mirrors.xml
</code></pre></li>
<li><p>解压</p>
<pre><code>tar xvjpf stage3*
</code></pre></li>
<li><p>修改编译控制文件</p>
<pre><code>vi /mnt/gentoo/etc/portage/make.conf
</code></pre></li>
</ul>
<pre><code>CFLAGS=&quot;-march=native -O2 -pipe&quot;

MAKEOPTS=&quot;-j2&quot;
</code></pre><h1 id="安装基本系统"><a href="#安装基本系统" class="headerlink" title="安装基本系统"></a>安装基本系统</h1><h2 id="Chrooting"><a href="#Chrooting" class="headerlink" title="Chrooting"></a>Chrooting</h2><ul>
<li><p>设置镜像源</p>
<pre><code>vi /mnt/gentoo/etc/portage/make.conf

SYNC=&quot;rsync://mirrors.ustc.edu.cn/gentoo-portage/&quot;
GENTOO_MIRRORS=&quot;http://mirrors.aliyun.com/gentoo/&quot;
</code></pre></li>
<li><p>复制DNS信息</p>
<pre><code>cp -L /etc/resolv.conf /mnt/gentoo/etc/
</code></pre></li>
<li><p>挂载文件系统</p>
<pre><code>mount -t proc proc /mnt/gentoo/proc
mount --rbind /sys /mnt/gentoo/sys
mount --make-rslave /mnt/gentoo/sys
mount --rbind /dev /mnt/gentoo/dev
mount --make-rslave /mnt/gentoo/dev
</code></pre></li>
<li><p>进入新环境</p>
<pre><code>chroot /mnt/gentoo /bin/bash
source /etc/profile
export PS1=“(chroot) $PS1”
</code></pre></li>
</ul>
<h2 id="配置portable"><a href="#配置portable" class="headerlink" title="配置portable"></a>配置portable</h2><ul>
<li><p>安装portage快照</p>
<pre><code>emerge-websync
</code></pre></li>
<li><p>更新portage tree</p>
<pre><code>emerge --sync
</code></pre></li>
<li><p>配置时区</p>
<pre><code>echo &quot;Asia/Shanghai&quot; &gt;/etc/timezone
emerge --config sys-libs/timezone-data
</code></pre></li>
<li><p>配置locales</p>
<ul>
<li><p>编辑</p>
<pre><code>nano /etc/locale.gen
</code></pre></li>
</ul>
</li>
</ul>
<pre><code>        en_US.UTF-8 UTF-8
        zh_CN.UTF-8 UTF-8

-   生成locale

        locale-gen

-   选择默认locale

        eselect locale list
        eselect locale set 3
</code></pre><h1 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h1><ul>
<li><p>安装源码</p>
<pre><code>emerge --ask sys-kernel/gentoo-sources
</code></pre></li>
<li><p>手动配置</p>
<pre><code>cd /usr/src/linux
make menuconfig
</code></pre></li>
<li><p>编译安装</p>
<pre><code>make &amp;&amp; make modules_install
make install
</code></pre></li>
</ul>
<h1 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><ul>
<li><p>编辑fstab</p>
<pre><code>nano -w /etc/fstab
</code></pre></li>
</ul>
<h1 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h1><ul>
<li><p>hostname</p>
<pre><code>nano -w /etc/conf.d/hostname
</code></pre></li>
</ul>
<pre><code>hostname=&quot;long&quot;
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://wiki.gentoo.org/wiki/Handbook:AMD64" target="_blank" rel="external">https://wiki.gentoo.org/wiki/Handbook:AMD64</a></li>
<li><a href="http://www.gentoo.org/doc/zh_cn/gentoo-x86-quickinstall.xml" target="_blank" rel="external">http://www.gentoo.org/doc/zh_cn/gentoo-x86-quickinstall.xml</a></li>
<li><a href="https://www.youtube.com/watch?v=P1ok-3z14ss" target="_blank" rel="external">https://www.youtube.com/watch?v=P1ok-3z14ss</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[virtualbox-设置桥接]]></title>
      <url>https://qianchenglong.github.io/2015/02/11/virtualbox-%E8%AE%BE%E7%BD%AE%E6%A1%A5%E6%8E%A5/</url>
      <content type="html"><![CDATA[<ul>
<li><p>设置guest的网卡连接模式：</p>
<p><img src="../img/virtualbox-设置桥接-01.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cppcheck-gvim设置]]></title>
      <url>https://qianchenglong.github.io/2015/02/11/cppcheck-gvim%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><img src="/img/cppcheck-gvim设置-01.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[valgrind-使用]]></title>
      <url>https://qianchenglong.github.io/2015/02/11/valgrind-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>编译时需要加入调试信息，这样才能定位哪里溢出</li>
</ul>
<h1 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h1><pre><code>valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes ./test
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-优秀软件列表]]></title>
      <url>https://qianchenglong.github.io/2015/02/11/ubuntu-%E4%BC%98%E7%A7%80%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>unity-tweak-tool</p>
<p>unity配置工具</p>
</li>
<li><p>inetutils-traceroute</p>
<p>traceroute</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[openwrt-开启ssh]]></title>
      <url>https://qianchenglong.github.io/2015/02/11/openwrt-%E5%BC%80%E5%90%AFssh/</url>
      <content type="html"><![CDATA[<ol>
<li><p>编辑配置文件</p>
<pre><code>vi /etc/config/dropbear
</code></pre></li>
<li><p>添加</p>
<pre><code>option enable &apos;1&apos;
</code></pre></li>
<li><p>重启</p>
<pre><code>reboot
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh-实现]]></title>
      <url>https://qianchenglong.github.io/2015/02/11/ssh-%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="https://matt.ucc.asn.au/dropbear/dropbear.html" target="_blank" rel="external">DropBear</a></p>
</li>
<li><p><a href="http://www.openssh.com/" target="_blank" rel="external">openssh</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[openwrt-升级固件的几种方法]]></title>
      <url>https://qianchenglong.github.io/2015/02/11/openwrt-%E5%8D%87%E7%BA%A7%E5%9B%BA%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>固件名称：openwrt-*-upgrade.bin</li>
</ul>
<h1 id="通过web方式"><a href="#通过web方式" class="headerlink" title="通过web方式"></a>通过web方式</h1><ul>
<li><p>主机IP设置为与路由器同一网段的，一般为192.168.1.0/24</p>
</li>
<li><p>打开浏览器，登录web管理页面，一般默认为192.168.1.1</p>
</li>
<li><p>选择固件升级即可</p>
</li>
</ul>
<h1 id="通过ssh"><a href="#通过ssh" class="headerlink" title="通过ssh"></a>通过ssh</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C-复合语句中的局部变量定义问题]]></title>
      <url>https://qianchenglong.github.io/2015/02/10/C-%E5%A4%8D%E5%90%88%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在复合语句，如<code>while</code>，<code>for</code>等定义局部变量，不会造成额外的开销。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">root@long-VirtualBox:/data/Test/c/for循环中定义变量/src# objdump -d -S main.o</span><br><span class="line">main.o:     file format elf32-i386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;main&gt;:</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">   0:   55                      push   %ebp</span><br><span class="line">   1:   89 e5                   mov    %esp,%ebp</span><br><span class="line">   3:   83 e4 f0                and    $0xfffffff0,%esp</span><br><span class="line">   6:   83 ec 20                sub    $0x20,%esp</span><br><span class="line">    int i = 0;</span><br><span class="line">   9:   c7 44 24 18 00 00 00    movl   $0x0,0x18(%esp)</span><br><span class="line">  10:   00 </span><br><span class="line">    for (; i &lt; 10; ++i) &#123;</span><br><span class="line">  11:   eb 26                   jmp    39 &lt;main+0x39&gt;</span><br><span class="line">        int j = 1;</span><br><span class="line">  13:   c7 44 24 1c 01 00 00    movl   $0x1,0x1c(%esp)  // i的初始化语句</span><br><span class="line">  1a:   00 </span><br><span class="line">        ++j;</span><br><span class="line">  1b:   83 44 24 1c 01          addl   $0x1,0x1c(%esp)</span><br><span class="line">        printf(&quot;j = %d\n&quot;, j);</span><br><span class="line">  20:   8b 44 24 1c             mov    0x1c(%esp),%eax</span><br><span class="line">  24:   89 44 24 04             mov    %eax,0x4(%esp)</span><br><span class="line">  28:   c7 04 24 00 00 00 00    movl   $0x0,(%esp)</span><br><span class="line">  2f:   e8 fc ff ff ff          call   30 &lt;main+0x30&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    for (; i &lt; 10; ++i) &#123;</span><br><span class="line">  34:   83 44 24 18 01          addl   $0x1,0x18(%esp)</span><br><span class="line">  39:   83 7c 24 18 09          cmpl   $0x9,0x18(%esp)</span><br><span class="line">  3e:   7e d3                   jle    13 &lt;main+0x13&gt;   // 重复执行初始化语句</span><br><span class="line">        int j = 1;</span><br><span class="line">        ++j;</span><br><span class="line">        printf(&quot;j = %d\n&quot;, j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">  40:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">&#125;</span><br><span class="line">  45:   c9                      leave  </span><br><span class="line">  46:   c3                      ret</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>不会造成不停的给<code>i</code>分配空间的操作，因为局部变量都是在编译时刻确定空间的，是通过操作<code>esp</code>来实现的。</p>
</li>
<li><p>但初始化语句<code>i = 0</code>会重复执行！</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>最好最变量使用的地方，定义变量，最小化作用域</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/982963/is-there-any-overhead-to-declaring-a-variable-within-a-loop-c" target="_blank" rel="external">http://stackoverflow.com/questions/982963/is-there-any-overhead-to-declaring-a-variable-within-a-loop-c</a></li>
<li><a href="http://stackoverflow.com/questions/7959573/declaring-variables-inside-loops-good-practice-or-bad-practice-2-parter" target="_blank" rel="external">http://stackoverflow.com/questions/7959573/declaring-variables-inside-loops-good-practice-or-bad-practice-2-parter</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[objdump-常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/02/10/objdump-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>反汇编，并带源码</p>
<p>objdump -S OBJECT_FILE</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-命令所属包]]></title>
      <url>https://qianchenglong.github.io/2015/02/10/linux-%E5%91%BD%E4%BB%A4%E6%89%80%E5%B1%9E%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="coreutils"><a href="#coreutils" class="headerlink" title="coreutils"></a>coreutils</h1><pre><code>du, groups, mv, date
</code></pre><h1 id="bintuils"><a href="#bintuils" class="headerlink" title="bintuils"></a>bintuils</h1><pre><code>ar, objdump, ld, c++filt, nm, ranlib, strip, readelf, size, 
</code></pre><h1 id="bridge-utils"><a href="#bridge-utils" class="headerlink" title="bridge-utils"></a>bridge-utils</h1><pre><code>brctl,
</code></pre><h1 id="e2fsprogs"><a href="#e2fsprogs" class="headerlink" title="e2fsprogs"></a>e2fsprogs</h1><pre><code>mkfs.ext2, mkfs.ext3, mkfs.ext4,
</code></pre><h1 id="dosfstools"><a href="#dosfstools" class="headerlink" title="dosfstools"></a>dosfstools</h1><pre><code>mkfs.fat, mkfs.msdos, mkfs.vfat
</code></pre><h1 id="ntfs-3g"><a href="#ntfs-3g" class="headerlink" title="ntfs-3g"></a>ntfs-3g</h1><pre><code>mkfs.ntfs
</code></pre><h1 id="procps"><a href="#procps" class="headerlink" title="procps"></a>procps</h1><pre><code>free, ps, top, sysctl, kill
</code></pre><h1 id="sysvinit-utils"><a href="#sysvinit-utils" class="headerlink" title="sysvinit-utils"></a>sysvinit-utils</h1><pre><code>service, pidof
</code></pre><h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><pre><code>tar
</code></pre><h1 id="util-linux"><a href="#util-linux" class="headerlink" title="util-linux"></a>util-linux</h1><pre><code>fdisk, cfdisk
</code></pre><h1 id="所用查找命令"><a href="#所用查找命令" class="headerlink" title="所用查找命令"></a>所用查找命令</h1><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><ol>
<li><p>查看命令完整文件名</p>
<pre><code>which COMMAND
</code></pre></li>
<li><p>查看命令所属包</p>
<pre><code>apt-file search FILENAME
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[samba-常用操作]]></title>
      <url>https://qianchenglong.github.io/2015/02/10/samba-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<ul>
<li><p>测试配置文件语法</p>
<pre><code>testparm
</code></pre></li>
<li><p>本地连接测试</p>
<pre><code>smbclient -L //127.0.0.1
</code></pre></li>
<li><p>观察连接状态</p>
<pre><code>smbstatus
</code></pre></li>
<li><p>挂载共享目录</p>
<pre><code>mount -t cifs //127.0.0.1/read /mnt
</code></pre></li>
<li><p>查看用户</p>
<pre><code>pdbedit -L
</code></pre></li>
<li><p>添加一个用户</p>
<pre><code>pdbedit -a -u USERNAME
</code></pre></li>
<li><p>删除用户</p>
<pre><code>pdbedit -x -u USERNAME
</code></pre></li>
<li><p>修改samba用户登录密码</p>
<pre><code>smbpasswd USERNAME
</code></pre></li>
<li><p>重启samba</p>
<ul>
<li><p>system-v4</p>
<pre><code>service smbd restart
</code></pre></li>
<li><p>systemd</p>
<pre><code>systemctl restart smb
</code></pre></li>
</ul>
</li>
<li><p>查看samba版本</p>
<pre><code>smbstatus
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[samba搭建]]></title>
      <url>https://qianchenglong.github.io/2015/02/10/samba-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>CentOS-7.0.1</p>
</li>
<li><p>Samba version 4.1.12</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><p>安装samba</p>
<pre><code>yum install samba
</code></pre></li>
<li><p>修改配置文件</p>
<pre><code>cp /etc/samba/smb.conf /etc/samba/smb.conf~
vi /etc/samba/smb.conf

[global]
workgroup = WORKGROUP
netbios name = xianji-server
server string = Samba Server Version %v
security = user
map to guest = Bad Password
guest account = guest
unix extensions  = no
load printers = no
log file = /var/log/samba/%m.log
max log size = 50
encrypt passwords = true
passdb backend = tdbsam
unix password sync = yes
passwd program = /usr/bin/passwd %u
passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .
pam password change = yes

[root]
path = /
browseable = no
writable = yes
wide links = yes
guest ok = no

[share]
path = /data/share
guest ok = yes
read only = no
</code></pre></li>
<li><p>添加samba用户(需要当前已存在用户名)</p>
<pre><code>pdbedit -a USERNAME
</code></pre><p>输入2次密码</p>
</li>
<li><p>关闭SELinux</p>
<pre><code>setenfore 0
</code></pre></li>
<li><p>防火墙放行(445/tcp)</p>
<pre><code>firewall-cmd --permanent --add-port=445/tcp
firewall-cmd --reload
</code></pre></li>
<li><p>重启samba服务</p>
<pre><code>systemctl restart smb
systemctl restart nmb
</code></pre></li>
</ul>
<h1 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h1><h2 id="以用户的所有权限控制-security-user"><a href="#以用户的所有权限控制-security-user" class="headerlink" title="以用户的所有权限控制(security = user)"></a>以用户的所有权限控制(<code>security = user</code>)</h2><p>根据目录、文件的权限来控制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">useradd &lt;username&gt;</span><br><span class="line">pdbedit -a -u &lt;username&gt;(输入相应密码)</span><br><span class="line"></span><br><span class="line"># 修改用户名</span><br><span class="line">smbpasswd &lt;usernmae&gt;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://wiki.archlinux.org/index.php/Samba_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Samba_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[源IP选择]]></title>
      <url>https://qianchenglong.github.io/2015/02/09/%E6%BA%90IP%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blogs.technet.com/b/networking/archive/2009/04/25/source-ip-address-selection-on-a-multi-homed-windows-computer.aspx" target="_blank" rel="external">http://blogs.technet.com/b/networking/archive/2009/04/25/source-ip-address-selection-on-a-multi-homed-windows-computer.aspx</a></li>
<li><a href="https://support.microsoft.com/kb/969029" target="_blank" rel="external">https://support.microsoft.com/kb/969029</a></li>
<li><a href="http://linux-ip.net/html/routing-saddr-selection.html" target="_blank" rel="external">http://linux-ip.net/html/routing-saddr-selection.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ping常见错误分析]]></title>
      <url>https://qianchenglong.github.io/2015/02/09/ping%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="局域网内，目标不存在或未应答"><a href="#局域网内，目标不存在或未应答" class="headerlink" title="局域网内，目标不存在或未应答"></a>局域网内，目标不存在或未应答</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>该数据包未发送，因为在tcp/ip在填充目的MAC，执行ARP请求时，没有得到应答，无法确定目的MAC。</p>
<h2 id="表象"><a href="#表象" class="headerlink" title="表象"></a>表象</h2><ul>
<li><p>windows</p>
<pre><code>无法访问目标主机
</code></pre></li>
<li><p>linux</p>
<pre><code>Destination Host Unreachable
</code></pre></li>
</ul>
<h1 id="非局域网，目标不存在或未应答"><a href="#非局域网，目标不存在或未应答" class="headerlink" title="非局域网，目标不存在或未应答"></a>非局域网，目标不存在或未应答</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><pre><code>该数据包已发送，由下一跳路由负责转发，而对应的机器不存在或未应答
</code></pre><h2 id="表象-1"><a href="#表象-1" class="headerlink" title="表象"></a>表象</h2><ul>
<li><p>windows</p>
<pre><code>请求超时
</code></pre></li>
<li><p>linux</p>
<pre><code>-   无输出
</code></pre></li>
</ul>
<h1 id="域名解析失败"><a href="#域名解析失败" class="headerlink" title="域名解析失败"></a>域名解析失败</h1><h2 id="表象-2"><a href="#表象-2" class="headerlink" title="表象"></a>表象</h2><ul>
<li><p>windows</p>
<pre><code>Ping 请求找不到主机 a。请检查该名称，然后重试。
</code></pre></li>
<li><p>linux</p>
<pre><code>Ping 请求找不到主机 a。请检查该名称，然后重试。
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[openwrt-目录组织]]></title>
      <url>https://qianchenglong.github.io/2015/02/09/openwrt-%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87/</url>
      <content type="html"><![CDATA[<ul>
<li><p>build_dir/  用于存放所有解压后的源码，并在当中编译</p>
<ul>
<li><p>host/   宿主环境下的编译工具源码</p>
</li>
<li><p>toolchain-*   交叉C编译器，C标准库，内核，二进制工具等组件源码</p>
</li>
<li><p>target-*    目标系统的软件包源码</p>
</li>
</ul>
</li>
<li><p>staging_dir/    用于存放安装已编译，为了进一步编译软件包，或产生固件镜像</p>
<ul>
<li><p>host/   最小化的Linux</p>
</li>
<li><p>toolchain-* 最小化的LInux，带有交叉C编译器，用于去编译剩余的固件部分</p>
</li>
<li><p>target…/root-ramips/  最终的固件</p>
</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/26030670/openwrt-buildroot-build-dir-and-staging-dir" target="_blank" rel="external">http://stackoverflow.com/questions/26030670/openwrt-buildroot-build-dir-and-staging-dir</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-常用命令]]></title>
      <url>https://qianchenglong.github.io/2015/02/09/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><ul>
<li><p>修改时区</p>
<pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</code></pre></li>
<li><p>查看或设置用户限制</p>
<pre><code>ulimit -a
</code></pre></li>
<li><p>查看系统配置参数</p>
<pre><code>getconf -a
</code></pre></li>
</ul>
<h1 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h1><ul>
<li><p>查看磁盘使用情况</p>
<pre><code>df
</code></pre></li>
<li><p>查看分区类型</p>
<pre><code>df -T
</code></pre></li>
<li><p>查看分区UUID，label等</p>
<pre><code>blkid
</code></pre></li>
<li><p>检查并自动修复磁盘错误</p>
<pre><code>fsck -a /dev/sda1
</code></pre></li>
<li><p>重新读取fstab</p>
<pre><code>mount -a
</code></pre></li>
</ul>
<h1 id="压缩包"><a href="#压缩包" class="headerlink" title="压缩包"></a>压缩包</h1><ul>
<li><p>解压tar包</p>
<pre><code>tar xvf XXX.tar
</code></pre></li>
<li><p>解压tar.gz</p>
<pre><code>tar xvzf XXX.tar.gz
</code></pre></li>
</ul>
<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><ul>
<li><p>重命名文件、目录</p>
<pre><code>mv SRC DST
</code></pre></li>
<li><p>查看目录使用情况</p>
<pre><code>du
</code></pre></li>
<li><p>实时查看文件</p>
<pre><code>tail -f filename
</code></pre></li>
<li><p>复制，若父目录不存在则创建</p>
<pre><code>cp src/a.txt /data/ ==&gt; /data/src/a.txt
</code></pre></li>
</ul>
<h1 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h1><ul>
<li><p>添加用户</p>
<pre><code>useradd -m &lt;username&gt;
</code></pre></li>
<li><p>设置密码</p>
<pre><code>passwd &lt;username&gt;
</code></pre></li>
<li><p>查看用户基本信息</p>
<pre><code>id USERNAME
</code></pre></li>
<li><p>查看用户所属组</p>
<pre><code>groups USERNAME
lid &lt;username&gt;
</code></pre></li>
<li><p>查看组成员</p>
<pre><code>lid -g &lt;group-name&gt;
</code></pre></li>
<li><p>用户添加附加组</p>
<pre><code>usermod -a -G GROUPNAME USERNAME
</code></pre></li>
<li><p>查看动态库加载</p>
<pre><code>ldd ./dbgateway_svc 
</code></pre></li>
</ul>
<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><ul>
<li><p>批量删除进程</p>
<pre><code>pkill &lt;pattern&gt;
</code></pre></li>
<li><p>根据端口杀进程</p>
<pre><code>fuser -k 12000/tcp
</code></pre></li>
<li><p>查看进程树</p>
<pre><code>pstree -apls PID
</code></pre></li>
<li><p>查看进程打开的文件</p>
<pre><code>lsof -p 18661
</code></pre></li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li><p>选择默认编辑器</p>
<pre><code>select-editor
</code></pre></li>
<li><p>查看glibc版本</p>
<pre><code>ldd --version
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[virtualbox-拓展磁盘空间]]></title>
      <url>https://qianchenglong.github.io/2015/02/09/virtualbox-%E6%8B%93%E5%B1%95%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>宿主    win7-64</p>
</li>
<li><p>虚拟机  ubuntu-14.04</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li><p>进入<code>virtualbox</code>目录</p>
</li>
<li><p>调整大小</p>
<pre><code>VBoxManage.exe modifyhd E:\Soft\VirtualBox\VMs\Ubuntu-14.04\Ubuntu-14.04.vdi --resize 20480
</code></pre></li>
<li><p>重新调整分区大小</p>
<ul>
<li><p>使用<code>GParted Live CD</code></p>
</li>
<li><p>使用<code>ubuntu Live CD</code></p>
</li>
</ul>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661" target="_blank" rel="external">https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-编译openwrt]]></title>
      <url>https://qianchenglong.github.io/2015/02/07/ubuntu-%E7%BC%96%E8%AF%91openwrt/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>ubuntu-14.04</li>
</ul>
<h1 id="搭建编译环境"><a href="#搭建编译环境" class="headerlink" title="搭建编译环境"></a>搭建编译环境</h1><ul>
<li><p>安装依赖工具</p>
<pre><code>sudo apt-get install gawk flex zlib1g-dev libncurses5-dev subversion git findutils build-essential binutils 
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wireshark-显示过滤器]]></title>
      <url>https://qianchenglong.github.io/2015/02/06/wireshark-%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>根据帧序号</p>
<pre><code>frame.number &gt;= 6
</code></pre></li>
<li><p>根据http内容类型</p>
<pre><code>http.content_type == “application/x-www-form-urlencoded”
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-路由表]]></title>
      <url>https://qianchenglong.github.io/2015/02/06/windows-%E8%B7%AF%E7%94%B1%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="路由表介绍"><a href="#路由表介绍" class="headerlink" title="路由表介绍"></a>路由表介绍</h1><h2 id="路由表项的种类"><a href="#路由表项的种类" class="headerlink" title="路由表项的种类"></a>路由表项的种类</h2><ul>
<li><p>网络路由：一个在网络中有特定网络ID的路由（路径）</p>
</li>
<li><p>主机路由：一个有特定网络地址（网络ID和主机ID）的路由。主机路由允许智能化的路由选择。主机路由通常用于创建用于控制和优化特定网络通信的定制路由。</p>
</li>
<li><p>默认路由：一个当别的路由在路由表中未被找到的时候使用的路由。如果一个路由器或终端系统（如装有Microsoft Windows和Linux的个人电脑），找不到到达目的地的路由时就会使用默认路由。</p>
</li>
</ul>
<h2 id="路由表项的构成"><a href="#路由表项的构成" class="headerlink" title="路由表项的构成"></a>路由表项的构成</h2><ul>
<li><p>网络ID(主键)  由IP加子网掩码构成</p>
</li>
<li><p>代价    用来路径决策</p>
</li>
<li><p>下一跳  下一跳地址或网关地址</p>
</li>
</ul>
<h1 id="实例路由说明"><a href="#实例路由说明" class="headerlink" title="实例路由说明"></a>实例路由说明</h1><ul>
<li><p><code>0.0.0.0          0.0.0.0      192.168.1.1    192.168.1.110    276</code></p>
<p>这是一条“默认路径”。表示，当该主机发送数据包时，如果在路由表内找不到其他可以用来发送此数据包的路径时，该数据包会通过这条“默认路径”来发送，也就是说“接口” 192.168.1.110 这个IP发出，然后送给网关 192.168.1.1 。</p>
</li>
<li><p>127.0.0.0        255.0.0.0            在链路上         127.0.0.1    306</p>
<p>这是“环回网络路径”(loopback network route)。当该主机发送的数据包给 IP 地址的形式如 127.x.y.z 这种地址时，这个数据包会从接口 127.0.0.1 这个 IP 地址送给目标，而无需经过路由器。从 “在链路上” 也提示了这一点。IP 地址 127.x.y.z 是计算机内部使用的 IP 地址，通过该地址计算机将数据包发送给自己，一般情况下我们常使用 127.0.0.1 。</p>
</li>
<li><p><code>192.168.1.0    255.255.255.0            在链路上     192.168.1.110    276</code></p>
<p>这是“直接连接的网络路径”(directly-attached network route)。所谓直接连接的网络就是指该主机所在的网路，这里为 192.168.1.10 ，此路径表示当该主机往此网络里的主机发送数据包时，数据包会从接口 192.168.1.110 这个 IP 发出，由“网关”处的标识“在链路上”知道，该数据包将直接发送给目标，而不需要通过路由器来转发。</p>
</li>
<li><p><code>192.168.1.110  255.255.255.255            在链路上     192.168.1.110    276</code></p>
<p>这条路径是“主机路径”(host route)。当该主机要把数据包发送到 192.168.1.110（发给自己）时，该数据包会从 192.168.1.110 上发出，然后发给自己，也不需要通过路由器来转发.</p>
</li>
<li><p><code>192.168.1.255  255.255.255.255            在链路上     192.168.1.110    276</code></p>
<p>该路径是“子网广播路径”(subnet broadcast route)。它表示的是，当该主机要发送数据包到 192.168.1.255 这个广播地址时（也就是要广播给 192.168.1.0 这个子网内的所有计算机），该数据包会通过 192.168.1.110 这个地址发出。同样，通过在“链路上”的提示知道，该数据包也不需要通过路由器。</p>
</li>
<li><p><code>224.0.0.0        240.0.0.0            在链路上     192.168.1.110    276</code></p>
<p>该条路径是“多播路径”(multicast route)。表示该主机发送多播数据包时，该数据包会通过 192.168.1.110 这个 IP 发出，同样从“在链路上”知道数据包直接发送给目标，而不需要经过路由器。</p>
</li>
<li><p><code>255.255.255.255  255.255.255.255            在链路上     192.168.1.110    276</code></p>
<p>该路径是“有限广播路径”( limited broadcast route )。它表示当该主机要发送广播数据包到 255.255.255.255 （有限广播地址）时，该数据包会通过 192.168.1.110 发出，同样道理该数据包也不需要通过路由器。<br>当主机不知道本机所处的网络时（如主机启动时），此时只能采用有限广播方式，比如无盘工作站启动时，希望从 DHCP 服务器那里获得一个 IP 时，就会用该方式。</p>
</li>
</ul>
<h1 id="路由表操作"><a href="#路由表操作" class="headerlink" title="路由表操作"></a>路由表操作</h1><h2 id="命令形式"><a href="#命令形式" class="headerlink" title="命令形式"></a>命令形式</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route [-f] [-p] [command [destination] [mask netmask] [gateway] [metric metric] [<span class="keyword">if</span> interface]</span><br></pre></td></tr></table></figure>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ul>
<li><p>-f</p>
<ul>
<li><p>清除所有不是主路由(子网掩码为255.255.255.255的路由)、环回网络路由(目标为127.0.0.0，子网掩码为255.255.255.0的路由)<br>或多播路由(目标为224.0.0.0，子网掩码为240.0.0.0的路由)的条目的路由表。</p>
</li>
<li><p>如果它与命令之一(例如Add、Change或Delete)结合使用，表会在运行命令之前清除。</p>
</li>
</ul>
</li>
<li><p>-p</p>
<ul>
<li><p>与Add命令共同使用时，指定路由被添加到注册表并在启动TCP/IP协议的时候初始化IP路由表</p>
</li>
<li><p>默认情况下，启动TCP/IP协议时不会保存添加的路由</p>
</li>
<li><p>与Print命令一起使用时，则显示永久路由列表</p>
</li>
<li><p>所有其他的命令都忽略此参数</p>
</li>
<li><p>永久路由存储在注册表中的位置是<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Tcpip\Parameters\PersistentRoutes</code></p>
</li>
</ul>
</li>
<li><p>command</p>
<ul>
<li><p>print</p>
</li>
<li><p>add</p>
</li>
<li><p>delete</p>
</li>
<li><p>change</p>
</li>
</ul>
</li>
<li><p>destination</p>
<p>指定路由的网络目标地址。</p>
<ul>
<li><p>可以是网络号(主机位为0的IP)</p>
</li>
<li><p>对于具体主机是其IP地址</p>
</li>
<li><p>对于默认路由是0.0.0.0</p>
</li>
</ul>
</li>
<li><p>mask netmask</p>
<p>指定与网络目标地址相关联的网掩码(又称子网掩码)。</p>
<p>子网掩码对于IP网络地址可以是一适当的子网掩码</p>
<pre><code>-   对于主机路由是255.255.255.255

-   对于默认路由是0.0.0.0

-   如果忽略，则使用子网掩码255.255.255.255
</code></pre><p><strong>注意：</strong></p>
<ul>
<li>定义路由时由于目标地址和子网掩码之间的关系，目标地址不能比它对应的子网掩码更为详细。换句话说，如果子网掩码的一位是0，则目标地址中的对应位就不能设置为1。</li>
</ul>
</li>
<li><p>gateway</p>
<p>网关，又叫做下一跳路由器</p>
<ul>
<li><p>网关与主机位于同一个局域网内，可以直达的！</p>
</li>
<li><p>当目标网络与主机不在同一局域网，则需要网关转发</p>
</li>
<li><p>目标网络与主机所属同一个局域网，则显示为<strong>在链路上</strong>，说明无需路由器转发，可直达</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>interface</p>
<p>当多网卡时，指示哪个接口(可以是环回接口，LAN，VPN拨号接口等)可以到达<code>gateway</code></p>
<p>如：</p>
<pre><code>网络目标        网络掩码          网关       接口   跃点数
  0.0.0.0          0.0.0.0    100.100.103.1    100.100.103.3    200
</code></pre><p>网关<code>100.100.103.1</code>通过<code>100.100.103.3</code>可以到达</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">===========================================================================</span><br><span class="line">接口列表</span><br><span class="line"> 11...74 d4 35 46 3c 8e ......Realtek PCIe GBE Family Controller</span><br><span class="line"> 15...00 ff e7 a5 e8 50 ......TAP-Windows Adapter V9</span><br><span class="line"> 16...08 00 27 00 94 09 ......VirtualBox Host-Only Ethernet Adapter</span><br><span class="line"> 22...00 50 56 c0 00 01 ......VMware Virtual Ethernet Adapter for VMnet1</span><br><span class="line"> 23...00 50 56 c0 00 08 ......VMware Virtual Ethernet Adapter for VMnet8</span><br><span class="line">  1...........................Software Loopback Interface 1</span><br><span class="line">===========================================================================</span><br></pre></td></tr></table></figure>
</li>
<li><p>metric</p>
<p>跃点数，用来描述路由质量，当存在多条路由时，择优依据</p>
</li>
</ul>
<h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><ul>
<li><p>route print</p>
<pre><code>E:\Test&gt;route print
===========================================================================
接口列表
接口号  MAC                   描述
 34...........................NYDUS_VPN
 15...00 ff e7 a5 e8 50 ......TAP-Windows Adapter V9
 12...00 0f 13 76 05 b2 ......Realtek RTL8188CU Wireless LAN 802.11n USB 2.0 Net
work Adapter
 16...08 00 27 00 94 09 ......VirtualBox Host-Only Ethernet Adapter
 23...00 50 56 c0 00 01 ......VMware Virtual Ethernet Adapter for VMnet1
 24...00 50 56 c0 00 08 ......VMware Virtual Ethernet Adapter for VMnet8
  1...........................Software Loopback Interface 1
===========================================================================
</code></pre></li>
<li><p>清空路由表项</p>
<pre><code>route -f
</code></pre></li>
<li><p>添加路由表项</p>
<pre><code>route -p add 192.192.0.0 mask 255.255.0.0 100.100.102.1 if 11
</code></pre></li>
<li><p>删除路由表项</p>
<pre><code>route delete 192.192.0.0
</code></pre></li>
<li><p>查找路由表项</p>
<pre><code>route print|findstr 192.192
</code></pre></li>
</ul>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul>
<li><p>为什么存在<code>100.100.103.3  255.255.255.255            在链路上     100.100.103.3    356</code>?</p>
<p>为什么不是通过<code>127.0.0.1</code>而是<code>100.100.103.3</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E8%A1%A8" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E8%A1%A8</a></li>
<li><a href="http://en.wikipedia.org/wiki/Routing_table" target="_blank" rel="external">http://en.wikipedia.org/wiki/Routing_table</a></li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/cc787509(v=ws.10).aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/cc787509(v=ws.10).aspx</a></li>
<li><a href="http://www.groad.net/bbs/thread-8080-1-1.html" target="_blank" rel="external">http://www.groad.net/bbs/thread-8080-1-1.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[路由器DHCP差异]]></title>
      <url>https://qianchenglong.github.io/2015/02/06/%E8%B7%AF%E7%94%B1%E5%99%A8DHCP%E5%B7%AE%E5%BC%82/</url>
      <content type="html"><![CDATA[<h1 id="Netcore-NW710"><a href="#Netcore-NW710" class="headerlink" title="Netcore-NW710"></a>Netcore-NW710</h1><ul>
<li>DHCP不能设置DNS服务器，默认DNS为自身</li>
</ul>
<h1 id="TP-LINK-WR941N"><a href="#TP-LINK-WR941N" class="headerlink" title="TP-LINK-WR941N"></a>TP-LINK-WR941N</h1><ul>
<li>DHCP可以设置DNS服务器，在应答discovery时，回应相应设置的IP</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[libnet_init]]></title>
      <url>https://qianchenglong.github.io/2015/02/06/libnet_init/</url>
      <content type="html"><![CDATA[<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">libnet_t</span>* libnet_init(<span class="keyword">int</span> injection_type, <span class="keyword">char</span>*  device, <span class="keyword">char</span>*  err_buf)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>device</p>
<ul>
<li><p>windows</p>
<ul>
<li>winpcap设备名，类似<code>\Device\NPF_{2A7DEE95-B437-444C-BB09-85E4EAD5E61C}</code></li>
<li>前缀一致<code>\Device\NPF_</code>，后面的UUID可以通过<code>getmac /v</code>查看</li>
</ul>
</li>
</ul>
<p><em>参考:</em></p>
<ol>
<li><a href="http://stackoverflow.com/questions/17400903/libnet-device-network-interface-command-line-argument" target="_blank" rel="external">http://stackoverflow.com/questions/17400903/libnet-device-network-interface-command-line-argument</a></li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优秀app列表]]></title>
      <url>https://qianchenglong.github.io/2015/02/06/%E4%BC%98%E7%A7%80app%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><a href="http://www.appsapk.com/network-info/" target="_blank" rel="external">Network Info II</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ioctl]]></title>
      <url>https://qianchenglong.github.io/2015/02/05/ioctl/</url>
      <content type="html"><![CDATA[<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li><p><code>SIOCGIFCONF</code>不能获取IPv6地址</p>
<p>参考:</p>
<ol>
<li><a href="http://stackoverflow.com/questions/20743709/get-ipv6-addresses-in-linux-using-ioctl" target="_blank" rel="external">http://stackoverflow.com/questions/20743709/get-ipv6-addresses-in-linux-using-ioctl</a></li>
<li><a href="http://man7.org/linux/man-pages/man7/netdevice.7.html#NOTES" target="_blank" rel="external">http://man7.org/linux/man-pages/man7/netdevice.7.html#NOTES</a></li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[getaddrinfo]]></title>
      <url>https://qianchenglong.github.io/2015/02/05/getaddrinfo/</url>
      <content type="html"><![CDATA[<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getaddrinfo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *node, <span class="keyword">const</span> <span class="keyword">char</span> *service,</span><br><span class="line">                       <span class="keyword">const</span> <span class="keyword">struct</span> addrinfo *hints,</span><br><span class="line">                       <span class="keyword">struct</span> addrinfo **res)</span></span>;</span><br></pre></td></tr></table></figure>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li>转换主机名到IP地址(IPv4，IPv6)</li>
<li>转换服务到端口</li>
<li>不要用来查询本机IP，其只返回<code>127.0.0.1</code></li>
</ul>
<h1 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h1><ul>
<li>使用<code>hints</code>来控制输出参数</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/freeaddrinfo.html" target="_blank" rel="external">http://pubs.opengroup.org/onlinepubs/9699919799/functions/freeaddrinfo.html</a></li>
<li><a href="http://man7.org/linux/man-pages/man3/getaddrinfo.3.html" target="_blank" rel="external">http://man7.org/linux/man-pages/man3/getaddrinfo.3.html</a></li>
<li><a href="http://beej-zhtw.netdpi.net/05-system-call-or-bust/5-1-getaddrinfo-start" target="_blank" rel="external">http://beej-zhtw.netdpi.net/05-system-call-or-bust/5-1-getaddrinfo-start</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[跟踪应用程序执行的系统调用]]></title>
      <url>https://qianchenglong.github.io/2015/02/05/%E8%B7%9F%E8%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<pre><code>strace program
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[检查linux是否支持netlink]]></title>
      <url>https://qianchenglong.github.io/2015/02/05/%E6%A3%80%E6%9F%A5linux%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81netlink/</url>
      <content type="html"><![CDATA[<ul>
<li><p>检查<code>/proc/net/netlink</code>是否存在</p>
</li>
<li><p><code>cat /proc/net/protocols</code>是否有<code>NETLINK</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/24284255/is-there-any-user-level-command-to-check-whether-a-kernel-image-is-supporting-ne" target="_blank" rel="external">http://stackoverflow.com/questions/24284255/is-there-any-user-level-command-to-check-whether-a-kernel-image-is-supporting-ne</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[getaddrinfo开启c99后无法编译]]></title>
      <url>https://qianchenglong.github.io/2015/02/05/getaddrinfo%E5%BC%80%E5%90%AFc99%E5%90%8E%E6%97%A0%E6%B3%95%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>开启了<code>c99</code>后，gcc采用严格标准c(<code>__STRICT_ANSI</code>)，而<code>getaddrinfo</code>是POSIX定义的，<br>所以无法使用，具体可查看<code>/usr/include/netdb.h</code>，<code>/usr/include/features.h</code></p>
<p><strong>摘取:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The `-ansi&apos; switch to the GNU C compiler, and standards conformance</span><br><span class="line">options such as `-std=c99&apos;, define __STRICT_ANSI__.  If none of</span><br><span class="line">these are defined, or if _DEFAULT_SOURCE is defined, the default is</span><br><span class="line">to have _SVID_SOURCE, _BSD_SOURCE, and _POSIX_SOURCE set to one and</span><br><span class="line">_POSIX_C_SOURCE set to 200809L.  If more than one of these are</span><br><span class="line">defined, they accumulate.  For example __STRICT_ANSI__,</span><br><span class="line">_POSIX_SOURCE and _POSIX_C_SOURCE together give you ISO C, 1003.1,</span><br><span class="line">and 1003.2, but nothing else.</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://groups.google.com/d/msg/gnu.gcc.help/a88eE4Ga73o/P3vji9iM5pwJ" target="_blank" rel="external">https://groups.google.com/d/msg/gnu.gcc.help/a88eE4Ga73o/P3vji9iM5pwJ</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gcc选项简记]]></title>
      <url>https://qianchenglong.github.io/2015/02/05/gcc%E9%80%89%E9%A1%B9%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li><p>-D name=definition</p>
<p>指定预处理宏定义，相当于#define name definition</p>
</li>
<li><p>-std=XXX</p>
<ul>
<li>c99</li>
<li>c++11</li>
</ul>
</li>
<li><p>-M</p>
<p>输出依赖关系，隐含-E，也就是不编译，只是查看依赖关系，依赖关系包含系统头文件</p>
</li>
<li><p>-MM</p>
<p>输出依赖关系，只是用户的，不包含库文件</p>
</li>
<li><p>-MF file</p>
<p>依赖关系的结果输出到指定文件中，必须指定-M或-MM</p>
</li>
<li><p>-MD</p>
<p>相当于-MM -MF <em>.d ，<br>输出依赖关系，不隐含-E，也就是同时生成依赖文件(</em>.d)，还编译,依赖关系中包含<br>系统头文件</p>
</li>
<li><p>-MMD</p>
<p>相当于-MD，生成的*.d中不包含系统头文件</p>
</li>
<li><p>-MT file</p>
<p>使用file中的依赖关系编译，也就是配合-MMD或-MD或-MF来使用，使用他们生成的依赖<br>关系自动编译</p>
</li>
<li><p>-MP</p>
<p>连头文件也输出对应的依赖关系，可能为伪目标，防止删除了头文件，而没有更新<br>makefile导致编译错误</p>
</li>
<li><p>-Ldir</p>
<p>添加dir到目录列表，目录列表用来搜索链接库</p>
</li>
<li><p>-llibrary</p>
<p>指定链接库，优先寻找共享库(liblibrary.so,liblibrary.a)，该选项最好放到最后，<br>防止后面需要链接的，详见gcc(1)</p>
</li>
<li><p>-static</p>
<p>指定链接静态库</p>
</li>
<li><p>-fPIC</p>
<p>生成位置无关代码(position independent code)</p>
</li>
<li><p>-shared</p>
<p>生成共享库，需要-fPIC</p>
</li>
<li><p>-Idir</p>
<p>添加目录到搜索头文件列表，添加的优先搜索</p>
</li>
<li><p>-Wl,</p>
<p>向链接器传递选项，’,’隔开选项</p>
</li>
<li><p>-Wa,</p>
<p>向汇编器传递选项，’,’隔开选项</p>
</li>
<li><p>-Wp,</p>
<p>向预处理器传递选项，’,’隔开选项</p>
</li>
<li><p>-O</p>
<p>不开启优化</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux优秀书籍列表]]></title>
      <url>https://qianchenglong.github.io/2015/02/04/linux%E4%BC%98%E7%A7%80%E4%B9%A6%E7%B1%8D%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>The Linux Kernel Module Programming Guide</p>
<p>Linux内核模块编程</p>
<ul>
<li><a href="http://www.tldp.org/LDP/lkmpg/2.6/html/index.html" target="_blank" rel="external">在线阅读</a></li>
<li><a href="http://www.tldp.org/LDP/lkmpg/2.6/lkmpg.pdf" target="_blank" rel="external">pdf下载</a></li>
</ul>
</li>
<li><p>Introduction to Linux</p>
<ul>
<li><a href="http://tldp.org/LDP/intro-linux/html/" target="_blank" rel="external">在线阅读</a></li>
</ul>
</li>
<li><p>Guide to IP Layer Network Administration with Linux</p>
<ul>
<li><a href="http://linux-ip.net/html/" target="_blank" rel="external">在线阅读</a></li>
<li><a href="http://linux-ip.net/" target="_blank" rel="external">下载</a></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BSD-tcp-ip头文件组织]]></title>
      <url>https://qianchenglong.github.io/2015/02/04/BSD-tcp-ip%E5%A4%B4%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87/</url>
      <content type="html"><![CDATA[<p>| 头文件           | 作用                                             |<br>|——————+————————————————–|<br>| <code>&lt;sys/socket.h&gt;</code> | 核心socket API和数据结构                         |<br>| <code>&lt;netinet/in.h&gt;</code> | IPv4，IPv6等相关协议族地址结构定义，常用端口定义 |<br>| <code>&lt;arpa/inet.h&gt;</code>  | IP地址操作                                       |<br>| <code>&lt;netdb.h&gt;</code>      | 网络数据库查询，如主机名，服务等                 |</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://en.wikipedia.org/wiki/Berkeley_sockets#Header_files" target="_blank" rel="external">http://en.wikipedia.org/wiki/Berkeley_sockets#Header_files</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grep]]></title>
      <url>https://qianchenglong.github.io/2015/02/03/grep/</url>
      <content type="html"><![CDATA[<ul>
<li><p>-C num</p>
<p>指定上下文行数</p>
</li>
<li><p>-B NUM, –before-context=NUM</p>
<p>指定上文行数</p>
</li>
<li><p>-A NUM, –after-context=NUM</p>
<p>指定下文行数</p>
</li>
<li><p>-m NUM, –max-count=NUM</p>
<p>指定最大匹配数量</p>
</li>
<li><p>-n, –line-number</p>
<p>显示行号</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-socket寻址]]></title>
      <url>https://qianchenglong.github.io/2015/02/03/linux-socket%E5%AF%BB%E5%9D%80/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>ubuntu-14.04</p>
</li>
<li><p>glic-2.19</p>
</li>
<li><p>工作目录：<code>/usr/include</code></p>
</li>
</ul>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="struct-sockaddr"><a href="#struct-sockaddr" class="headerlink" title="struct sockaddr"></a><code>struct sockaddr</code></h2><p><code>socket</code>API接口，无关具体地址族，协议。</p>
<h3 id="定义位置"><a href="#定义位置" class="headerlink" title="定义位置"></a>定义位置</h3><p><code>x86_64-linux-gnu/sys/socket.h</code> =&gt; <code>x86_64-linux-gnu/bits/socket.h</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Structure describing a generic socket address.  */</span></span><br><span class="line"><span class="keyword">struct</span> sockaddr</span><br><span class="line">  &#123;</span><br><span class="line">    __SOCKADDR_COMMON (sa_);    <span class="comment">/* Common data: address family and length.  */</span></span><br><span class="line">    <span class="keyword">char</span> sa_data[<span class="number">14</span>];       <span class="comment">/* Address data.  */</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li><code>=&gt;</code>表示包含</li>
</ul>
<h2 id="strcut-sockaddr-in"><a href="#strcut-sockaddr-in" class="headerlink" title="strcut sockaddr_in"></a><code>strcut sockaddr_in</code></h2><p>具体类型数据结构，用来操作地址族，IP，端口。</p>
<h3 id="定义位置-1"><a href="#定义位置-1" class="headerlink" title="定义位置"></a>定义位置</h3><p><code>netinet/in.h</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Structure describing an Internet socket address.  */</span></span><br><span class="line"><span class="keyword">struct</span> sockaddr_in</span><br><span class="line">  &#123;</span><br><span class="line">    __SOCKADDR_COMMON (sin_);</span><br><span class="line">    <span class="keyword">in_port_t</span> sin_port;         <span class="comment">/* Port number.  */</span></span><br><span class="line">    <span class="keyword">struct</span> in_addr sin_addr;        <span class="comment">/* Internet address.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Pad to size of `struct sockaddr'.  */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr) -</span><br><span class="line">               __SOCKADDR_COMMON_SIZE -</span><br><span class="line">               <span class="keyword">sizeof</span> (<span class="keyword">in_port_t</span>) -</span><br><span class="line">               <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr)];</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="struct-in-addr"><a href="#struct-in-addr" class="headerlink" title="struct in_addr"></a><code>struct in_addr</code></h2><p>定义IP</p>
<h3 id="定义位置-2"><a href="#定义位置-2" class="headerlink" title="定义位置"></a>定义位置</h3><p><code>netinet/in.h</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Internet address.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> <span class="keyword">in_addr_t</span>;</span><br><span class="line"><span class="keyword">struct</span> in_addr</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">in_addr_t</span> s_addr;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><p><code>in_addr</code> =&gt; <code>sockaddr_in</code> =&gt; <code>sockaddr</code></p>
<p><strong>Note</strong>:</p>
<ul>
<li><code>=&gt;</code>表示构成</li>
</ul>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="socket地址结构传递方向"><a href="#socket地址结构传递方向" class="headerlink" title="socket地址结构传递方向"></a>socket地址结构传递方向</h2><ul>
<li><p>从进程到内核</p>
<p>需要传入参数(套接字地址大小，告诉内核需要复制多少字节)</p>
<ul>
<li>bind</li>
<li>connect</li>
<li>sendto</li>
<li>sendmsg</li>
</ul>
</li>
<li><p>从内核到进程</p>
<p>需要传入传出参数(套接字地址大小，告诉内核需要复制多少字节，以及反馈进程，返回的地址结构大小)</p>
<ul>
<li>accept</li>
<li>recvfrom</li>
<li>recvmsg</li>
<li>getpeername</li>
<li>getsockname</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gcc获取include路径列表]]></title>
      <url>https://qianchenglong.github.io/2015/02/03/gcc%E8%8E%B7%E5%8F%96include%E8%B7%AF%E5%BE%84%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><pre><code>echo | gcc -v -x c -E -
</code></pre><h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><pre><code>echo | g++ -v -x c++ -E -
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-包管理]]></title>
      <url>https://qianchenglong.github.io/2015/02/03/ubuntu-%E5%8C%85%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h1><ul>
<li><p>只下载不安装(二进制包)</p>
<pre><code>apt-get download PACKAGE
</code></pre></li>
<li><p>下载源代码</p>
<pre><code>apt-get source PACKAGE
</code></pre></li>
</ul>
<h1 id="apt-cache"><a href="#apt-cache" class="headerlink" title="apt-cache"></a>apt-cache</h1><ul>
<li><p>查询包依赖(该包依赖哪些包)</p>
<pre><code>apt-cache depends PACKAGE
</code></pre></li>
<li><p>查询反向依赖(哪些包依赖该包)</p>
<pre><code>apt-cache rdepends PACKAGE
</code></pre></li>
<li><p>查询包信息(基本信息，依赖信息)</p>
<pre><code>apt-cache showpkg PACKAGE
apt-cache show PACKAGE
</code></pre></li>
<li><p>查看包版本</p>
<pre><code>apt-cache policy PACKAGE
</code></pre></li>
<li><p>搜索包</p>
<pre><code>apt-cache search PATTERN
</code></pre></li>
</ul>
<h1 id="apt-file-需要安装"><a href="#apt-file-需要安装" class="headerlink" title="apt-file(需要安装)"></a>apt-file(需要安装)</h1><ul>
<li><p>列出包文件列表</p>
<pre><code>apt-file list PACKAGE
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[USB串口线是什么]]></title>
      <url>https://qianchenglong.github.io/2015/02/03/USB%E4%B8%B2%E5%8F%A3%E7%BA%BF%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h1 id="正式名称"><a href="#正式名称" class="headerlink" title="正式名称"></a>正式名称</h1><p>RS232-USB接口转换器</p>
<p><img src="/img/USB串口线是什么-01.jpg" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.baike.com/wiki/PL2303" target="_blank" rel="external">http://www.baike.com/wiki/PL2303</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sudo免密码]]></title>
      <url>https://qianchenglong.github.io/2015/02/03/sudo%E5%85%8D%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<ul>
<li><p>编辑配置文件</p>
<pre><code>sudo visudo
</code></pre></li>
<li><p>最后行添加</p>
<pre><code>用户名  ALL=(ALL) NOPASSWD: ALL
</code></pre></li>
<li><p>保存退出(即时生效)</p>
<pre><code>:wq
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[USB接口线颜色定义]]></title>
      <url>https://qianchenglong.github.io/2015/02/03/USB%E6%8E%A5%E5%8F%A3%E7%BA%BF%E9%A2%9C%E8%89%B2%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<p>| 功能        | 颜色 |<br>|————-+——|<br>| VCC         | 红   |<br>| GND         | 黑   |<br>| DATA+(SEND) | 绿   |<br>| DATA-(RECV) | 白   |</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://en.wikipedia.org/wiki/USB" target="_blank" rel="external">http://en.wikipedia.org/wiki/USB</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为什么工业控制中用串口不用usb口]]></title>
      <url>https://qianchenglong.github.io/2015/02/03/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B7%A5%E4%B8%9A%E6%8E%A7%E5%88%B6%E4%B8%AD%E7%94%A8%E4%B8%B2%E5%8F%A3%E4%B8%8D%E7%94%A8usb%E5%8F%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>USB传输距离短，超过3米就衰减大了，且传输的是数字信号。<br>串口传输距离一般25米，超过25米衰减变大，但可以通过加中继设备增加传输距离，传输的是模拟信号。 适用于功能的遥控，遥信，采集信号等。</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zhidao.baidu.com/link?url=GRHZYimPe-X2pEfWudaDVL969TEaIO11-5yi3yybyWqOpT9NpvOLVoG8Xj_WQOs5nKJLjrKw_bVx2mYuXe0PuK" target="_blank" rel="external">http://zhidao.baidu.com/link?url=GRHZYimPe-X2pEfWudaDVL969TEaIO11-5yi3yybyWqOpT9NpvOLVoG8Xj_WQOs5nKJLjrKw_bVx2mYuXe0PuK</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-自动登录]]></title>
      <url>https://qianchenglong.github.io/2015/02/02/ubuntu-%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="UI方式"><a href="#UI方式" class="headerlink" title="UI方式"></a>UI方式</h1><ul>
<li><p>【system setting】 =&gt; 【user accounts】</p>
<p><img src="/img/ubuntu-自动登录-01.png" alt=""></p>
</li>
</ul>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><ul>
<li><p>打开</p>
<pre><code>sudo gedit /etc/lightdm/lightdm.conf
</code></pre></li>
<li><p>添加</p>
<pre><code>autologin-user=username
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://wiki.ubuntu.com/LightDM" target="_blank" rel="external">https://wiki.ubuntu.com/LightDM</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-免密码自动登录]]></title>
      <url>https://qianchenglong.github.io/2015/02/02/windows-%E5%85%8D%E5%AF%86%E7%A0%81%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<ul>
<li><p><code>Win + r</code>打开运行对话框</p>
<pre><code>control userpasswords2
</code></pre></li>
<li><p>去掉勾【要使用本机，用户必须要输入账户名和密码】</p>
<p><img src="/img/windows-免密码自动登录-01.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数学-关系的理解]]></title>
      <url>https://qianchenglong.github.io/2015/02/02/%E6%95%B0%E5%AD%A6-%E5%85%B3%E7%B3%BB%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="关系是什么？"><a href="#关系是什么？" class="headerlink" title="关系是什么？"></a>关系是什么？</h1><ul>
<li><p>数学上，关系实质是<strong>集合</strong>，元素是有序元组。</p>
</li>
<li><p>自然语言描述时，关系描述的是符合某种语义结构的，如<code>2整除4</code>语义结构为<code>A整除B</code>。</p>
</li>
</ul>
<h1 id="关系用来干什么？"><a href="#关系用来干什么？" class="headerlink" title="关系用来干什么？"></a>关系用来干什么？</h1><ul>
<li><p>关系是用来描述对象之间的联系。</p>
</li>
<li><p>从更高的抽象程度研究对象，发现共同性质，再运用之(具象 =&gt; 抽象 =&gt; 具象)</p>
</li>
</ul>
<h1 id="某某之间具有某种关系实质是什么？"><a href="#某某之间具有某种关系实质是什么？" class="headerlink" title="某某之间具有某种关系实质是什么？"></a>某某之间具有某种关系实质是什么？</h1><p>集合上的属于关系(元素和集合的关系)</p>
<ol>
<li><a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB_(%E6%95%B0%E5%AD%A6)" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB_(%E6%95%B0%E5%AD%A6)</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git-自动push]]></title>
      <url>https://qianchenglong.github.io/2015/01/30/git-%E8%87%AA%E5%8A%A8push/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/QianChenglong/auto-git-push" target="_blank" rel="external">https://github.com/QianChenglong/auto-git-push</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-计划任务隐藏控制台]]></title>
      <url>https://qianchenglong.github.io/2015/01/30/windows-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E9%9A%90%E8%97%8F%E6%8E%A7%E5%88%B6%E5%8F%B0/</url>
      <content type="html"><![CDATA[<p><img src="/img/windows-计划任务隐藏控制台-01.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-unittest跳过指定测试]]></title>
      <url>https://qianchenglong.github.io/2015/01/29/python-unittest%E8%B7%B3%E8%BF%87%E6%8C%87%E5%AE%9A%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/2/library/unittest.html#skipping-tests-and-expected-failures" target="_blank" rel="external">https://docs.python.org/2/library/unittest.html#skipping-tests-and-expected-failures</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-打印Include路径列表]]></title>
      <url>https://qianchenglong.github.io/2015/01/29/cmake-%E6%89%93%E5%8D%B0Include%E8%B7%AF%E5%BE%84%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get_property</span>(dirs DIRECTORY <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span> PROPERTY <span class="keyword">INCLUDE_DIRECTORIES</span>)</span><br><span class="line"><span class="keyword">foreach</span>(dir <span class="variable">$&#123;dirs&#125;</span>)</span><br><span class="line">  <span class="keyword">message</span>(STATUS <span class="string">"dir='$&#123;dir&#125;'"</span>)</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/6902149/listing-include-directories-in-cmake" target="_blank" rel="external">http://stackoverflow.com/questions/6902149/listing-include-directories-in-cmake</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sudo unable to resolve host ubuntu]]></title>
      <url>https://qianchenglong.github.io/2015/01/29/sudo%20unable%20to%20resolve%20host%20ubuntu/</url>
      <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>通过更改<code>/etc/hostname</code>，修改了主机名，而<code>/etc/hosts</code>中没有更改</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>修改<code>/etc/hosts</code></p>
<pre><code>127.0.0.1   当前主机名
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://ubuntuguide.net/fix-ubuntu-sudo-errorunable-to-resolve-host" target="_blank" rel="external">http://ubuntuguide.net/fix-ubuntu-sudo-errorunable-to-resolve-host</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-软件列表]]></title>
      <url>https://qianchenglong.github.io/2015/01/29/ubuntu-%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>python-pip</p>
<p>python包管理</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[运行python脚本出错-No such file or directory]]></title>
      <url>https://qianchenglong.github.io/2015/01/29/%E8%BF%90%E8%A1%8Cpython%E8%84%9A%E6%9C%AC%E5%87%BA%E9%94%99-No%20such%20file%20or%20directory/</url>
      <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>文件格式为<code>DOS</code>格式，<code>#! /usr/bin/env python</code>后有<code>\r\n</code>，而<code>/usr/bin/env</code>的参数为<code>python\r</code>，<br>找不到即报改错；因为有<code>\r</code>在<code>python</code>输出后回到行首继续打印，则导致</p>
<p><code>: No such file or directory</code></p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>文件格式改为<code>UNIX</code>格式</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://hgoldfish.com/blogs/article/31/" target="_blank" rel="external">http://hgoldfish.com/blogs/article/31/</a></li>
<li><a href="http://stackoverflow.com/questions/12996065/no-such-file-or-directory" target="_blank" rel="external">http://stackoverflow.com/questions/12996065/no-such-file-or-directory</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[configure-make中的prefix-DESTDIR区别]]></title>
      <url>https://qianchenglong.github.io/2015/01/29/configure-make%E4%B8%AD%E7%9A%84prefix-DESTDIR%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h1 id="只使用-configure-prefix"><a href="#只使用-configure-prefix" class="headerlink" title="只使用./configure --prefix"></a>只使用<code>./configure --prefix</code></h1><p>当使用<code>make install</code>时，被安装到<code>prefix</code>为前缀的指定目录</p>
<h1 id="使用-configure-prefix和make-install-DESTDIR"><a href="#使用-configure-prefix和make-install-DESTDIR" class="headerlink" title="使用./configure --prefix和make install DESTDIR"></a>使用<code>./configure --prefix</code>和<code>make install DESTDIR</code></h1><p>目标安装目录为<code>DESTDIR/prefix</code></p>
<h1 id="只要使用了make-install-prefix-DIR"><a href="#只要使用了make-install-prefix-DIR" class="headerlink" title="只要使用了make install prefix=DIR"></a>只要使用了<code>make install prefix=DIR</code></h1><p>安装目录为<code>DIR</code></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h1><ul>
<li><p><code>./configure -prefix</code>必须是绝对路径</p>
</li>
<li><p><code>make install prefix</code>也要绝对路径，虽然可以是相对路径，但安装时，因为切换工作目录，导致安装目录错误！</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/11307465/destdir-and-prefix-of-make" target="_blank" rel="external">http://stackoverflow.com/questions/11307465/destdir-and-prefix-of-make</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nautilus-隐藏指定文件]]></title>
      <url>https://qianchenglong.github.io/2015/01/29/nautilus-%E9%9A%90%E8%97%8F%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<ul>
<li><p>添加要隐藏的文件到<code>.hidden</code></p>
<pre><code>echo &apos;$RECYCLE.BIN&apos; &gt;&gt;.hidden
</code></pre></li>
<li><p><code>F5</code>刷新即可</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://askubuntu.com/questions/143315/how-to-hide-files-and-folders-in-nautilus" target="_blank" rel="external">http://askubuntu.com/questions/143315/how-to-hide-files-and-folders-in-nautilus</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-nautilus快捷键打开terminal]]></title>
      <url>https://qianchenglong.github.io/2015/01/29/ubuntu-nautilus%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%89%93%E5%BC%80terminal/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li><p>ubuntu-14.04</p>
</li>
<li><p>nautilus-3.10.1</p>
</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><p>安装<code>nautilus-open-terminal</code></p>
<pre><code>sudo apt-get install nautilus-open-terminal
</code></pre></li>
<li><p>退出nautilus</p>
<pre><code>nautilus -q
</code></pre></li>
<li><p>编辑配置文件</p>
<pre><code>gvim ~/.config/nautilus/accels
</code></pre></li>
<li><p>反注释掉该行，并添加映射</p>
<p>(gtk_accel_path “<actions>/ExtensionsMenuGroup/NautilusOpenTerminal::open_terminal” “F4”)</actions></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-查看域名对应IP]]></title>
      <url>https://qianchenglong.github.io/2015/01/28/linux-%E6%9F%A5%E7%9C%8B%E5%9F%9F%E5%90%8D%E5%AF%B9%E5%BA%94IP/</url>
      <content type="html"><![CDATA[<h1 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h1><p>不使用<code>/etc/hosts</code>文件</p>
<h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><h1 id="getent"><a href="#getent" class="headerlink" title="getent"></a>getent</h1><pre><code>getent ahosts www.baidu.com
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://superuser.com/questions/106901/added-entry-to-hosts-file-ubuntu-can-ping-ok-cannot-nslookup" target="_blank" rel="external">http://superuser.com/questions/106901/added-entry-to-hosts-file-ubuntu-can-ping-ok-cannot-nslookup</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu-查看文件所属]]></title>
      <url>https://qianchenglong.github.io/2015/01/28/ubuntu-%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E6%89%80%E5%B1%9E/</url>
      <content type="html"><![CDATA[<ul>
<li><p>安装<code>apt-file</code></p>
<pre><code>sudo apt-get install apt-file
</code></pre></li>
<li><p>更新数据库</p>
<pre><code>sudo apt-file update
</code></pre></li>
<li><p>查询</p>
<pre><code>apt-file search /usr/include/arpa/inet.h
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://superuser.com/questions/10997/find-what-package-a-file-belongs-to-in-ubuntu-debian" target="_blank" rel="external">http://superuser.com/questions/10997/find-what-package-a-file-belongs-to-in-ubuntu-debian</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-添加域名映射]]></title>
      <url>https://qianchenglong.github.io/2015/01/28/linux-%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E6%98%A0%E5%B0%84/</url>
      <content type="html"><![CDATA[<pre><code>sudo echo &quot;192.192.192.243 svn.meichuan.com&quot; &gt;&gt;/etc/hosts
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qianchenglong.github.io/2015/01/28/tar/</url>
      <content type="html"><![CDATA[<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="功能字符"><a href="#功能字符" class="headerlink" title="功能字符"></a>功能字符</h3><p>必须指定1个，可以指定多个，多个可以连在一起，前面的’-‘不是必需的</p>
<p>-A<br>    追加tar文件到一个archive</p>
<p>-r<br>    追加files到archive</p>
<p>-c<br>    创建新的archive</p>
<p>-x<br>    解包并解压</p>
<p>-t<br>    查看包内容</p>
<p>###选项</p>
<p>-a<br>    根据包名字后缀自动选择相应的压缩程序</p>
<p>-f archive</p>
<pre><code>指定包名字，打包就是目的包名字，解包就是要解包的包名字
</code></pre><p>-C dir<br>    解包到指定目录</p>
<p>-p<br>    保留文件权限，属性信息</p>
<p>-P<br>    不拿掉绝对路径前面的’/‘</p>
<p>-h, –dereference</p>
<pre><code>follow symlinks; archive and dump the files they point to
</code></pre><h3 id="压缩选项"><a href="#压缩选项" class="headerlink" title="压缩选项"></a>压缩选项</h3><p>-z<br>    gzip</p>
<p>-j<br>    bzip2</p>
<p>-J<br>    xz</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li><p>解压，解包</p>
<pre><code>tar xf *.tar.gz
</code></pre></li>
<li><p>将当前目录打包，压缩</p>
<pre><code>tar vczf tar.tar.gz .
</code></pre></li>
<li><p>解开包中某一个文件</p>
<ul>
<li><p>先查看文件</p>
<pre><code>tar tf tar.tar.gz | grep tar
</code></pre></li>
<li><p>再解压指定文件</p>
<pre><code>tar vxzf tar.tar.gz .tar实例.swp
</code></pre></li>
</ul>
</li>
<li><p>给当前目录下，某个文件夹打包压缩</p>
<pre><code>tar vczf src.tar.gz src
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-遍历目录]]></title>
      <url>https://qianchenglong.github.io/2015/01/27/python-%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="os-walk"><a href="#os-walk" class="headerlink" title="os.walk"></a>os.walk</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">'.'</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">print</span> file</span><br></pre></td></tr></table></figure>
<h1 id="查找指定文件"><a href="#查找指定文件" class="headerlink" title="查找指定文件"></a>查找指定文件</h1><h2 id="glob-glob"><a href="#glob-glob" class="headerlink" title="glob.glob"></a>glob.glob</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> glob.glob(<span class="string">'*.txt'</span>):</span><br><span class="line">    print(file)</span><br></pre></td></tr></table></figure>
<h2 id="fnmatch-fnmatch"><a href="#fnmatch-fnmatch" class="headerlink" title="fnmatch.fnmatch"></a>fnmatch.fnmatch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):</span><br><span class="line">    <span class="keyword">if</span> fnmatch.fnmatch(file, <span class="string">'*.txt'</span>):</span><br><span class="line">        <span class="keyword">print</span> file</span><br></pre></td></tr></table></figure>
<h2 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> re.match(<span class="string">r'build-\(.*\)-.*'</span>, f)]:</span><br><span class="line">    print(<span class="string">'cleanning &#123;&#125; ...'</span>.format(d))</span><br><span class="line">    shutil.rmtree(d)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/2225564/get-a-filtered-list-of-files-in-a-directory" target="_blank" rel="external">http://stackoverflow.com/questions/2225564/get-a-filtered-list-of-files-in-a-directory</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-映射list]]></title>
      <url>https://qianchenglong.github.io/2015/01/27/python-%E6%98%A0%E5%B0%84list/</url>
      <content type="html"><![CDATA[<h1 id="数学联系"><a href="#数学联系" class="headerlink" title="数学联系"></a>数学联系</h1><p>对某个集合进行映射（数学运算），生成一个新集合</p>
<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>将一个序列映射为另一个序列，新序列的元素依赖于原序列的元素</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul>
<li>简单转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[elem*<span class="number">2</span> <span class="keyword">for</span> elem <span class="keyword">in</span> li]      <span class="number">1</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li                           <span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [elem*<span class="number">2</span> <span class="keyword">for</span> elem <span class="keyword">in</span> li] <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">2</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>buildConnectionString</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = &#123;<span class="string">"server"</span>:<span class="string">"mpilgrim"</span>, <span class="string">"database"</span>:<span class="string">"master"</span>, <span class="string">"uid"</span>:<span class="string">"sa"</span>, <span class="string">"pwd"</span>:<span class="string">"secret"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>params.items()</span><br><span class="line">[(<span class="string">'server'</span>, <span class="string">'mpilgrim'</span>), (<span class="string">'uid'</span>, <span class="string">'sa'</span>), (<span class="string">'database'</span>, <span class="string">'master'</span>), (<span class="string">'pwd'</span>, <span class="string">'secret'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[k <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()]                <span class="number">1</span></span><br><span class="line">[<span class="string">'server'</span>, <span class="string">'uid'</span>, <span class="string">'database'</span>, <span class="string">'pwd'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[v <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()]                <span class="number">2</span></span><br><span class="line">[<span class="string">'mpilgrim'</span>, <span class="string">'sa'</span>, <span class="string">'master'</span>, <span class="string">'secret'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">"%s=%s"</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()] <span class="number">3</span></span><br><span class="line">[<span class="string">'server=mpilgrim'</span>, <span class="string">'uid=sa'</span>, <span class="string">'database=master'</span>, <span class="string">'pwd=secret'</span>]</span><br></pre></td></tr></table></figure>
<h1 id="过滤列表推导"><a href="#过滤列表推导" class="headerlink" title="过滤列表推导"></a>过滤列表推导</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>special_squares = [ x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x**<span class="number">2</span> &gt; <span class="number">5</span> <span class="keyword">and</span> x**<span class="number">2</span> &lt; <span class="number">50</span> ]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> special_squares</span><br><span class="line">[<span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>]</span><br></pre></td></tr></table></figure>
<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><ul>
<li><p><code>range(10)</code></p>
</li>
<li><p><code>for x in range(10)</code></p>
</li>
<li><p><code>if ...</code></p>
</li>
<li><p><code>x**2</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.u.arizona.edu/~erdmann/mse350/topics/list_comprehensions.html" target="_blank" rel="external">http://www.u.arizona.edu/~erdmann/mse350/topics/list_comprehensions.html</a></li>
<li><a href="http://woodpecker.org.cn/diveintopython/native_data_types/mapping_lists.html" target="_blank" rel="external">http://woodpecker.org.cn/diveintopython/native_data_types/mapping_lists.html</a></li>
<li><a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" target="_blank" rel="external">https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-xptemplate片段编写]]></title>
      <url>https://qianchenglong.github.io/2015/01/26/vim-xptemplate%E7%89%87%E6%AE%B5%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<ul>
<li>调用vim函数</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">expand</span>(<span class="string">"%:r"</span>)^</span><br></pre></td></tr></table></figure>
<ul>
<li><p>可视模式下wrap</p>
<pre><code>XPT code wrap=cursor &quot; <figure class="highlight plain"><figcaption><span>code ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```~language^</span><br><span class="line">~cursor^</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-代码片段插件比较]]></title>
      <url>https://qianchenglong.github.io/2015/01/26/vim-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%8F%92%E4%BB%B6%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h1 id="xptemplate"><a href="#xptemplate" class="headerlink" title="xptemplate"></a><a href="https://github.com/drmingdrmer/xptemplate" target="_blank" rel="external">xptemplate</a></h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li><p>支持菜单弹出显示</p>
<p>当有多个片段时，弹出popup菜单显示</p>
</li>
<li><p>支持前缀唯一匹配</p>
</li>
</ul>
<h1 id="UltiSnips"><a href="#UltiSnips" class="headerlink" title="UltiSnips"></a><a href="https://github.com/SirVer/ultisnips" target="_blank" rel="external">UltiSnips</a></h1><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li><p>不支持菜单弹出显示</p>
</li>
<li><p>不支持前缀唯一匹配</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-ImportError-No-module-named-_curses]]></title>
      <url>https://qianchenglong.github.io/2015/01/26/python-ImportError-No-module-named-curses/</url>
      <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>python中的<code>curses</code>不支持windows</p>
<p>参考：</p>
<ol>
<li><a href="https://docs.python.org/2/library/curses.html" target="_blank" rel="external">https://docs.python.org/2/library/curses.html</a></li>
</ol>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>安装拓展包，参见{ iLink title:python-install-curses-on-windows %}</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-install-curses-on-windows]]></title>
      <url>https://qianchenglong.github.io/2015/01/26/python-install-curses-on-windows/</url>
      <content type="html"><![CDATA[<h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><ul>
<li><p>python2.7-32bit</p>
</li>
<li><p>win7</p>
</li>
</ul>
<h1 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h1><ul>
<li><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses" target="_blank" rel="external">Download corresponding package</a></p>
<p>In my environment, I downloaded <code>curses-2.2-cp27-none-win32.whl</code>.</p>
</li>
<li><p><code>cd</code> to download directory and Install it</p>
<pre><code>pip install curses-2.2-cp27-none-win32.whl
</code></pre></li>
</ul>
<h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><ul>
<li><a href="http://stackoverflow.com/users/812183/anthony-sottile" target="_blank" rel="external">Anthony Sottile</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-Disable Warning Manually-specified variables were not used by the project]]></title>
      <url>https://qianchenglong.github.io/2015/01/26/cmake-Disable%20Warning%20Manually-specified%20variables%20were%20not%20used%20by%20the%20project/</url>
      <content type="html"><![CDATA[<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>添加命令行参数<code>--no-warn-unused-cli</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/14757506/cmake-toolchain-file-was-not-used-by-the-project" target="_blank" rel="external">http://stackoverflow.com/questions/14757506/cmake-toolchain-file-was-not-used-by-the-project</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git-push-warning]]></title>
      <url>https://qianchenglong.github.io/2015/01/24/git-push-warning/</url>
      <content type="html"><![CDATA[<h1 id="warning-push-default-is-unset"><a href="#warning-push-default-is-unset" class="headerlink" title="warning: push.default is unset;"></a>warning: push.default is unset;</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">warning: push.default is unset; its implicit value is changing in</span><br><span class="line">Git 2.0 from &apos;matching&apos; to &apos;simple&apos;. To squelch this message</span><br><span class="line">and maintain the current behavior after the default changes, use:</span><br><span class="line"></span><br><span class="line">  git config --global push.default matching</span><br><span class="line"></span><br><span class="line">To squelch this message and adopt the new behavior now, use:</span><br><span class="line"></span><br><span class="line">  git config --global push.default simple</span><br><span class="line"></span><br><span class="line">When push.default is set to &apos;matching&apos;, git will push local branches</span><br><span class="line">to the remote branches that already exist with the same name.</span><br><span class="line"></span><br><span class="line">In Git 2.0, Git will default to the more conservative &apos;simple&apos;</span><br><span class="line">behavior, which only pushes the current branch to the corresponding</span><br><span class="line">remote branch that &apos;git pull&apos; uses to update the current branch.</span><br></pre></td></tr></table></figure>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul>
<li><p>默认只推送当前分支</p>
<pre><code>git config --global push.default simple
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-script编码规范]]></title>
      <url>https://qianchenglong.github.io/2015/01/24/vim-script%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/vimscriptguide.xml" target="_blank" rel="external">http://google-styleguide.googlecode.com/svn/trunk/vimscriptguide.xml</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-module和package]]></title>
      <url>https://qianchenglong.github.io/2015/01/24/python-module%E5%92%8Cpackage/</url>
      <content type="html"><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>A module is a single file (or files) that are imported under one import and used. e.g.</p>
<pre><code>import my_module
</code></pre><p>A package is a collection of modules in directories that give a package hierarchy.</p>
<pre><code>from my_package.timing.danger.internets import function_of_love
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-编码规范]]></title>
      <url>https://qianchenglong.github.io/2015/01/24/python-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="目录组织"><a href="#目录组织" class="headerlink" title="目录组织"></a>目录组织</h1><ul>
<li><p>[doc] 文档</p>
</li>
<li><p>[test] 测试</p>
</li>
<li><p>[package] 包</p>
</li>
</ul>
<p>参考：</p>
<ol>
<li><a href="https://github.com/django/django" target="_blank" rel="external">https://github.com/django/django</a></li>
</ol>
<h1 id="文件空行"><a href="#文件空行" class="headerlink" title="文件空行"></a>文件空行</h1><hr>
<h1 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h1><h2 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h2><p>下划线分隔</p>
<p>若用’-‘分隔，将导致无法<code>import</code>，因为’-‘在python中是减号。</p>
<p>参考:</p>
<ol>
<li><a href="http://stackoverflow.com/questions/2740026/why-are-filename-underscores-better-than-hyphens" target="_blank" rel="external">http://stackoverflow.com/questions/2740026/why-are-filename-underscores-better-than-hyphens</a></li>
</ol>
<h2 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h2><p>下划线分隔</p>
<h2 id="类命名"><a href="#类命名" class="headerlink" title="类命名"></a>类命名</h2><p>首字母大写，骆驼命名法</p>
<hr>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">https://www.python.org/dev/peps/pep-0008/</a></li>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html" target="_blank" rel="external">http://google-styleguide.googlecode.com/svn/trunk/pyguide.html</a></li>
<li><a href="https://github.com/onlytiancai/codesnip/blob/master/mypost/How_to_write_high-quality_python_program.md" target="_blank" rel="external">https://github.com/onlytiancai/codesnip/blob/master/mypost/How_to_write_high-quality_python_program.md</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-获取文件时间属性]]></title>
      <url>https://qianchenglong.github.io/2015/01/24/python-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%97%B6%E9%97%B4%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h1><ul>
<li><p>修改时间</p>
<pre><code>os.path.getmtime()
</code></pre></li>
</ul>
<ul>
<li><p>访问时间</p>
<pre><code>os.path.getactime()
</code></pre></li>
</ul>
<ul>
<li><p>创建时间</p>
<pre><code>os.path.getctime()
</code></pre></li>
</ul>
<h1 id="os-stat"><a href="#os-stat" class="headerlink" title="os.stat"></a>os.stat</h1><ul>
<li><p>修改时间</p>
<pre><code>os.stat.st_mtime
</code></pre></li>
<li><p>访问时间</p>
<pre><code>os.stat.st_atime
</code></pre></li>
<li><p>创建时间</p>
<pre><code>os.stat.st_ctime
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/237079/how-to-get-file-creation-modification-date-times-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/237079/how-to-get-file-creation-modification-date-times-in-python</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-调用默认浏览器打开url]]></title>
      <url>https://qianchenglong.github.io/2015/01/24/python-%E8%B0%83%E7%94%A8%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80url/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line">webbrowser.open(url)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/4216985/call-to-operating-system-to-open-url" target="_blank" rel="external">http://stackoverflow.com/questions/4216985/call-to-operating-system-to-open-url</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-获取当前文件名]]></title>
      <url>https://qianchenglong.github.io/2015/01/23/vim-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      <content type="html"><![CDATA[<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expand</span>(<span class="string">"%"</span>)</span><br></pre></td></tr></table></figure>
<p>a<br>bb<br>c</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><code>:help expand()</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-syntastic检查器列表]]></title>
      <url>https://qianchenglong.github.io/2015/01/23/vim-syntastic%E6%A3%80%E6%9F%A5%E5%99%A8%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><ul>
<li><p>autopep8</p>
<p>自动修复代码为<code>pep8</code>规范</p>
</li>
<li><p>flake8</p>
<p>代码规范检查</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++-内存管理]]></title>
      <url>https://qianchenglong.github.io/2015/01/23/c++-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<ul>
<li><p>多使用RAII(资源获取即初始化)</p>
</li>
<li><p>析构函数LOG打印，确认被调用</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[win下编译boost]]></title>
      <url>https://qianchenglong.github.io/2015/01/23/win%E4%B8%8B%E7%BC%96%E8%AF%91boost/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>VS2010</li>
<li>boost-1.57.0</li>
</ul>
<h1 id="编译Boost"><a href="#编译Boost" class="headerlink" title="编译Boost"></a>编译Boost</h1><ol>
<li><p><a href="http://www.boost.org/" target="_blank" rel="external">官网</a>下载源码</p>
</li>
<li><p>解压文件</p>
</li>
<li><p>进入根目录</p>
</li>
<li><p>运行配置工具生成文件</p>
<ul>
<li><p>Windows:bootstap.bat</p>
</li>
<li><p>Linux:bootstrap.sh</p>
</li>
</ul>
</li>
<li><p>编译，安装</p>
<ul>
<li><p>VS2005</p>
<pre><code>bjam --toolset=msvc-8.0 --prefix=D:\Boost_XXX --build-type=complete install
</code></pre></li>
<li><p>VS2008</p>
<pre><code>bjam --toolset=msvc-9.0 --prefix=D:\Boost_XXX --build-type=complete install
</code></pre></li>
<li><p>VS2010</p>
<pre><code>bjam --toolset=msvc-10.0 --prefix=D:\Boost_XXX --build-type=complete install
</code></pre></li>
<li><p>VS2012</p>
<pre><code>bjam --toolset=msvc-11.0 --prefix=D:\Boost_XXX --build-type=complete install
</code></pre></li>
</ul>
</li>
</ol>
<p><strong>Note:</strong></p>
<ul>
<li><p>清除</p>
<pre><code>bjam.exe --clean
</code></pre></li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li><p>配置IDE</p>
<p><img src="/img/win下编译boost-01.png" alt="头文件"><br><img src="/img/win下编译boost-02.png" alt="库文件"></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gtest-输出xml]]></title>
      <url>https://qianchenglong.github.io/2015/01/22/gtest-%E8%BE%93%E5%87%BAxml/</url>
      <content type="html"><![CDATA[<pre><code>test.exe  --gtest_output=&quot;xml:report.xml&quot;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gtest-xml彩色显示]]></title>
      <url>https://qianchenglong.github.io/2015/01/22/gtest-xml%E5%BD%A9%E8%89%B2%E6%98%BE%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/QianChenglong/gtest-xml-patch" target="_blank" rel="external">https://github.com/QianChenglong/gtest-xml-patch</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[chrome-xml加载本地文件]]></title>
      <url>https://qianchenglong.github.io/2015/01/22/chrome-xml%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>chrome为了安全，默认不允许加载本地文件</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>添加启动参数<code>--allow-file-access-from-files</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file" target="_blank" rel="external">http://stackoverflow.com/questions/3828898/can-chrome-be-made-to-perform-an-xsl-transform-on-a-local-file</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git-创建一个仓库]]></title>
      <url>https://qianchenglong.github.io/2015/01/22/git-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<ul>
<li><p>登录<a href="https://github.com/" target="_blank" rel="external">git官网</a></p>
<p><img src="/img/git-创建一个仓库-01.png" alt=""></p>
</li>
<li><p>初始化仓库</p>
<pre><code>git init
</code></pre></li>
<li><p>添加到版本控制</p>
<pre><code>git add .
</code></pre></li>
<li><p>提交</p>
<pre><code>git commit
</code></pre></li>
<li><p>设置远程仓库</p>
<pre><code>git remote add origin git@github.com:QianChenglong/lily.git
</code></pre></li>
<li><p>提交到远程仓库</p>
<pre><code>git push -u origin master
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[chrome-查看资源加载顺序]]></title>
      <url>https://qianchenglong.github.io/2015/01/21/chrome-%E6%9F%A5%E7%9C%8B%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<ul>
<li><code>F12</code>打开控制台</li>
</ul>
<p><img src="/img/chrome-查看资源加载顺序-01.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-sleep]]></title>
      <url>https://qianchenglong.github.io/2015/01/21/python-sleep/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.yiibai.com/python/python_time.sleep.html" target="_blank" rel="external">http://www.yiibai.com/python/python_time.sleep.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gtest-运行指定测试用例]]></title>
      <url>https://qianchenglong.github.io/2015/01/21/gtest-%E8%BF%90%E8%A1%8C%E6%8C%87%E5%AE%9A%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h1><ul>
<li><p>指定测试用例</p>
<p>test.exe –gtest_filter=request_save_release_ip.multi_ips</p>
</li>
<li><p>指定测试用例集</p>
<p>test.exe –gtest_filter=request_save_release_ip.*</p>
</li>
</ul>
<h1 id="使用gtest-GUI工具-Guitar"><a href="#使用gtest-GUI工具-Guitar" class="headerlink" title="使用gtest GUI工具(Guitar)"></a>使用gtest GUI工具(Guitar)</h1><p><img src="/img/gtest-运行指定测试用例-01.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/19798879/how-to-run-single-google-test-in-visual-studio" target="_blank" rel="external">http://stackoverflow.com/questions/19798879/how-to-run-single-google-test-in-visual-studio</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VC-warning-C4819]]></title>
      <url>https://qianchenglong.github.io/2015/01/21/VC-warning-C4819/</url>
      <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><ul>
<li>源文件采用<code>utf-8</code>编码，而VC默认识别成<code>cp936</code>编码。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-定义全局变量]]></title>
      <url>https://qianchenglong.github.io/2015/01/21/cmake-%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(UTEST_LIBRARIES <span class="variable">$&#123;ARGN&#125;</span> CACHE INTERNAL <span class="string">"UTEST_LIBRARIES"</span>)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/10031953/how-to-set-the-global-variable-in-a-function-for-cmake" target="_blank" rel="external">http://stackoverflow.com/questions/10031953/how-to-set-the-global-variable-in-a-function-for-cmake</a></li>
<li><a href="http://www.cmake.org/cmake/help/v3.0/command/set.html" target="_blank" rel="external">http://www.cmake.org/cmake/help/v3.0/command/set.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[提高程序健壮性的几种办法]]></title>
      <url>https://qianchenglong.github.io/2015/01/21/%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BA%8F%E5%81%A5%E5%A3%AE%E6%80%A7%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="局部变量初始化"><a href="#局部变量初始化" class="headerlink" title="局部变量初始化"></a>局部变量初始化</h1><p>防止造成野指针，字符串越界，数组越界，非法访问等。</p>
<h1 id="检查函数传入参数"><a href="#检查函数传入参数" class="headerlink" title="检查函数传入参数"></a>检查函数传入参数</h1><p>将错误的，不合法的输入阻止在最开始处</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li>C中常用<code>assert</code>进行处理</li>
</ul>
<h1 id="检查函数的返回值，以便对函数出错进行处理"><a href="#检查函数的返回值，以便对函数出错进行处理" class="headerlink" title="检查函数的返回值，以便对函数出错进行处理"></a>检查函数的返回值，以便对函数出错进行处理</h1><h1 id="释放指针后，指针置NULL"><a href="#释放指针后，指针置NULL" class="headerlink" title="释放指针后，指针置NULL"></a>释放指针后，指针置NULL</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.codeproject.com/Articles/216077/Making-Your-Cplusplus-Code-Robust" target="_blank" rel="external">http://www.codeproject.com/Articles/216077/Making-Your-Cplusplus-Code-Robust</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编程经典语句]]></title>
      <url>https://qianchenglong.github.io/2015/01/21/%E7%BC%96%E7%A8%8B%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<ul>
<li>异常处理不是bug fix</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-if]]></title>
      <url>https://qianchenglong.github.io/2015/01/20/cmake-if/</url>
      <content type="html"><![CDATA[<h1 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;name&#125;</span> <span class="keyword">STREQUAL</span> <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line">    <span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line">    <span class="keyword">return</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cmake.org/cmake/help/v3.0/command/if.html" target="_blank" rel="external">http://www.cmake.org/cmake/help/v3.0/command/if.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-函数中遍历ARGN]]></title>
      <url>https://qianchenglong.github.io/2015/01/20/cmake-%E5%87%BD%E6%95%B0%E4%B8%AD%E9%81%8D%E5%8E%86ARGN/</url>
      <content type="html"><![CDATA[<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(use_library)</span><br><span class="line">    <span class="keyword">foreach</span>(name <span class="variable">$&#123;ARGN&#125;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$&#123;name&#125;</span> <span class="keyword">STREQUAL</span> <span class="string">"."</span>)</span><br><span class="line">            <span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line">            <span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line">        <span class="keyword">else</span>()</span><br><span class="line">            <span class="keyword">message</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="number">3</span>rdparty/<span class="variable">$&#123;name&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line">            <span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="number">3</span>rdparty/<span class="variable">$&#123;name&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line">            <span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="number">3</span>rdparty/<span class="variable">$&#123;name&#125;</span>/lib)</span><br><span class="line">        <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">endforeach</span>()</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cmake.org/cmake/help/v3.0/command/foreach.html" target="_blank" rel="external">http://www.cmake.org/cmake/help/v3.0/command/foreach.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[winsock-error-10014]]></title>
      <url>https://qianchenglong.github.io/2015/01/20/winsock-error-10014/</url>
      <content type="html"><![CDATA[<h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (recvfrom(socket, recv_buf, sizeof(recv_data), <span class="number">0</span>, (sockaddr *)&amp;server_addr, NULL) == SOCKET_ERROR) &#123;</span><br><span class="line">    WinSock::printError(<span class="string">"recvfrom error"</span>);</span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p><code>recvfrom</code>最后一个参数是指定socket地址，为传入传出参数，不能为<code>NULL</code>!</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(server_addr);</span><br><span class="line"><span class="keyword">if</span> (recvfrom(socket, recv_buf, sizeof(recv_data), <span class="number">0</span>, (sockaddr *)&amp;server_addr, &amp;len) == SOCKET_ERROR) &#123;</span><br><span class="line">    WinSock::printError(<span class="string">"recvfrom error"</span>);</span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/17306405/c-udp-recvfrom-is-acting-strange-wsagetlasterror-10014" target="_blank" rel="external">http://stackoverflow.com/questions/17306405/c-udp-recvfrom-is-acting-strange-wsagetlasterror-10014</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jsoncpp-使用]]></title>
      <url>https://qianchenglong.github.io/2015/01/20/jsoncpp-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;json/json.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<h1 id="生成json数据对象"><a href="#生成json数据对象" class="headerlink" title="生成json数据对象"></a>生成json数据对象</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Json::Value send_data;</span><br><span class="line"></span><br><span class="line">send_data[<span class="string">"msgType"</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json对象</span></span><br><span class="line">send_data[<span class="string">"data"</span>][<span class="string">"ipAddress"</span>] = <span class="string">"192.168.1.1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json数组</span></span><br><span class="line">send_data[<span class="string">"name"</span>].append(<span class="string">"li"</span>);</span><br><span class="line">send_data[<span class="string">"name"</span>].append(<span class="string">"zhang"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="json对象转为字符串"><a href="#json对象转为字符串" class="headerlink" title="json对象转为字符串"></a>json对象转为字符串</h1><h2 id="转为格式化过的字符串"><a href="#转为格式化过的字符串" class="headerlink" title="转为格式化过的字符串"></a>转为格式化过的字符串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = send_data.toStyledString();</span><br></pre></td></tr></table></figure>
<h2 id="转为非格式化字符串"><a href="#转为非格式化字符串" class="headerlink" title="转为非格式化字符串"></a>转为非格式化字符串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Json::FastWriter fast_writer;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = fast_writer.write(send_data);</span><br></pre></td></tr></table></figure>
<h1 id="读取json数据"><a href="#读取json数据" class="headerlink" title="读取json数据"></a>读取json数据</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Json::Value send_data;</span><br><span class="line">send_data[<span class="string">"msgType"</span>] = <span class="number">1</span>;</span><br><span class="line">send_data[<span class="string">"msgCode"</span>] = <span class="number">10000</span>;</span><br><span class="line">send_data[<span class="string">"errCode"</span>] = <span class="number">0</span>;</span><br><span class="line">send_data[<span class="string">"data"</span>][<span class="string">"ipAddress"</span>] = <span class="string">"192.168.1.1"</span>;</span><br><span class="line">send_data[<span class="string">"data"</span>][<span class="string">"macAddress"</span>] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">send_data[<span class="string">"msgType"</span>].asInt();</span><br><span class="line">send_data[<span class="string">"data"</span>][<span class="string">"ipAddress"</span>].asString();</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-输入二合字母]]></title>
      <url>https://qianchenglong.github.io/2015/01/16/vim-%E8%BE%93%E5%85%A5%E4%BA%8C%E5%90%88%E5%AD%97%E6%AF%8D/</url>
      <content type="html"><![CDATA[<h1 id="二合字母"><a href="#二合字母" class="headerlink" title="二合字母"></a>二合字母</h1><p>二合字母用来输入不能用普通键盘输入的字符。它们通常是可显示的非 ASCII 字符。</p>
<h1 id="输入方法"><a href="#输入方法" class="headerlink" title="输入方法"></a>输入方法</h1><pre><code>&lt;Ctrl-k&gt;{char1}{char2}
</code></pre><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>CR ^M</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><pre><code>:help digraph
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-去除^M]]></title>
      <url>https://qianchenglong.github.io/2015/01/16/vim-%E5%8E%BB%E9%99%A4M/</url>
      <content type="html"><![CDATA[<ul>
<li>方法1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s;&lt;Ctrl-V&gt;&lt;Ctrl-M&gt;;;g</span><br></pre></td></tr></table></figure>
<ul>
<li>方法2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s;&lt;Ctrl-K&gt;CR;;g</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/811193/how-to-convert-the-m-linebreak-to-normal-linebreak-in-a-file-opened-in-vim" target="_blank" rel="external">http://stackoverflow.com/questions/811193/how-to-convert-the-m-linebreak-to-normal-linebreak-in-a-file-opened-in-vim</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改网络邻居登录密码]]></title>
      <url>https://qianchenglong.github.io/2015/01/16/%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%82%BB%E5%B1%85%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="通过【凭据管理器】"><a href="#通过【凭据管理器】" class="headerlink" title="通过【凭据管理器】"></a>通过【凭据管理器】</h2><ul>
<li><p>[控制面板] =&gt; 【小图标】 =&gt; 凭据管理器</p>
</li>
<li><p><code>control userpasswords2</code> =&gt; [高级] =&gt; [管理密码]</p>
</li>
<li><p><code>control keymgr.dll</code></p>
</li>
</ul>
<h2 id="通过【命令】"><a href="#通过【命令】" class="headerlink" title="通过【命令】"></a>通过【命令】</h2><ul>
<li><code>net use \\hostname\IPC$ /delete</code></li>
</ul>
<p>注：</p>
<ol>
<li><code>hostname</code>为要连接的电脑主机名，也可以是IP</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>修改后，<strong>注销</strong>生效！</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[autohotkey-字符串]]></title>
      <url>https://qianchenglong.github.io/2015/01/16/autohotkey-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="字符串是否为空"><a href="#字符串是否为空" class="headerlink" title="字符串是否为空"></a>字符串是否为空</h1><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (var = <span class="string">""</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><ul>
<li>表达式方法</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Var := <span class="string">"The color is "</span> . FoundColor</span><br></pre></td></tr></table></figure>
<ul>
<li>传统方法</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Var = The color is <span class="variable">%FoundColor%</span></span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="http://www.autohotkey.com/docs/Variables.htm#Operators" target="_blank" rel="external">http://www.autohotkey.com/docs/Variables.htm#Operators</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-字符串]]></title>
      <url>https://qianchenglong.github.io/2015/01/16/python-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="将其他数据类型转换为string"><a href="#将其他数据类型转换为string" class="headerlink" title="将其他数据类型转换为string"></a>将其他数据类型转换为string</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str(data)</span><br></pre></td></tr></table></figure>
<h1 id="重复字符串指定次数"><a href="#重复字符串指定次数" class="headerlink" title="重复字符串指定次数"></a>重复字符串指定次数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘abc<span class="string">' * 128</span></span><br></pre></td></tr></table></figure>
<h1 id="字符串前缀匹配"><a href="#字符串前缀匹配" class="headerlink" title="字符串前缀匹配"></a>字符串前缀匹配</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.beginswith(str)</span><br></pre></td></tr></table></figure>
<h1 id="字符串后缀匹配"><a href="#字符串后缀匹配" class="headerlink" title="字符串后缀匹配"></a>字符串后缀匹配</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.endswith(str)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-打印不追加换行]]></title>
      <url>https://qianchenglong.github.io/2015/01/16/python-%E6%89%93%E5%8D%B0%E4%B8%8D%E8%BF%BD%E5%8A%A0%E6%8D%A2%E8%A1%8C/</url>
      <content type="html"><![CDATA[<ul>
<li><p>python2, 3</p>
<pre><code>import sys
sys.stdout.write(&apos;hello world&apos;)
</code></pre></li>
<li><p>python3</p>
<pre><code>print(&apos;hello world&apos;, end=&quot;&quot;)
</code></pre></li>
<li><p>python2</p>
<pre><code>print(&apos;hello world&apos;, )
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.zhihu.com/question/20390166" target="_blank" rel="external">http://www.zhihu.com/question/20390166</a></li>
<li><a href="http://stackoverflow.com/questions/493386/how-to-print-in-python-without-newline-or-space" target="_blank" rel="external">http://stackoverflow.com/questions/493386/how-to-print-in-python-without-newline-or-space</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-windows彩色打印]]></title>
      <url>https://qianchenglong.github.io/2015/01/16/python-windows%E5%BD%A9%E8%89%B2%E6%89%93%E5%8D%B0/</url>
      <content type="html"><![CDATA[<h1 id="安装colorama"><a href="#安装colorama" class="headerlink" title="安装colorama"></a>安装<a href="https://pypi.python.org/pypi/colorama" target="_blank" rel="external">colorama</a></h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> init, Fore, Back, Style</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line"></span><br><span class="line">print(Fore.RED + <span class="string">'some red text'</span>)</span><br><span class="line">print(Fore.GREEN + <span class="string">'some green text'</span>)</span><br><span class="line">print(Fore.RESET)</span><br><span class="line">print(Back.GREEN + <span class="string">'and with a green background'</span>)</span><br><span class="line">print(Style.DIM + <span class="string">'and in dim text'</span>)</span><br><span class="line">print(Fore.RESET + Back.RESET + Style.RESET_ALL)</span><br><span class="line">print(<span class="string">'back to normal now'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-拓展包列表]]></title>
      <url>https://qianchenglong.github.io/2015/01/16/python-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="https://pypi.python.org/pypi/colorama" target="_blank" rel="external">colorama</a></p>
<p>跨平台颜色打印</p>
</li>
<li><p><a href="https://github.com/kennethreitz/requests" target="_blank" rel="external">requests</a></p>
<p>人性化http操作库</p>
<p><a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="external">手册</a></p>
</li>
<li><p><a href="http://amoffat.github.io/sh/" target="_blank" rel="external">sh</a></p>
<p>linux命令的包装，可以用函数调用的方式执行命令</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="external">https://github.com/vinta/awesome-python</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm-命令简记]]></title>
      <url>https://qianchenglong.github.io/2015/01/15/npm-%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li><p>安装包</p>
<pre><code>npm install &lt;package-name&gt;
</code></pre></li>
<li><p>从文件夹安装</p>
<pre><code>npm install .
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[awk-学习笔记]]></title>
      <url>https://qianchenglong.github.io/2015/01/15/awk-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-查看脚本载入顺序]]></title>
      <url>https://qianchenglong.github.io/2015/01/15/vim-%E6%9F%A5%E7%9C%8B%E8%84%9A%E6%9C%AC%E8%BD%BD%E5%85%A5%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">scriptnames</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-查看最后设定]]></title>
      <url>https://qianchenglong.github.io/2015/01/15/vim-%E6%9F%A5%E7%9C%8B%E6%9C%80%E5%90%8E%E8%AE%BE%E5%AE%9A/</url>
      <content type="html"><![CDATA[<h1 id="查看某个选项最后设置位置"><a href="#查看某个选项最后设置位置" class="headerlink" title="查看某个选项最后设置位置"></a>查看某个选项最后设置位置</h1><ul>
<li><p>查看文件类型</p>
<pre><code>:verbose set filetype
</code></pre></li>
</ul>
<h1 id="查看某个映射最后定义位置"><a href="#查看某个映射最后定义位置" class="headerlink" title="查看某个映射最后定义位置"></a>查看某个映射最后定义位置</h1><ul>
<li><p>查看vmap</p>
<pre><code>:verbose vmap l&lt;CR&gt;
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-__in-__out-in-C]]></title>
      <url>https://qianchenglong.github.io/2015/01/15/windows-in-out-in-C/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://msdn.microsoft.com/en-us/library/ms235402.aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/ms235402.aspx</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ms182032.aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/ms182032.aspx</a></li>
<li><a href="http://stackoverflow.com/questions/4239809/what-is-the-purpose-of-in-out-in-opt-allowed-how-do-they-work-should" target="_blank" rel="external">http://stackoverflow.com/questions/4239809/what-is-the-purpose-of-in-out-in-opt-allowed-how-do-they-work-should</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wireshark-开启tcp-ip校验码检查]]></title>
      <url>https://qianchenglong.github.io/2015/01/14/wireshark-%E5%BC%80%E5%90%AFtcp-ip%E6%A0%A1%E9%AA%8C%E7%A0%81%E6%A3%80%E6%9F%A5/</url>
      <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Edit] =&gt; [Perference] =&gt; [Protocols] =&gt; [IPv4] =&gt; [Validate the IPv4 checksum if possible]</span><br><span class="line">                                      =&gt; [TCP] =&gt; [Validate the IPv4 checksum if possible]</span><br></pre></td></tr></table></figure>
<p>如图：</p>
<p><img src="/img/wireshark-开启tcp-ip校验码检查_1.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://wiki.wireshark.org/TCP_Checksum_Verification" target="_blank" rel="external">http://wiki.wireshark.org/TCP_Checksum_Verification</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[库的错误处理]]></title>
      <url>https://qianchenglong.github.io/2015/01/09/%E5%BA%93%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>编写库，常见的错误处理方式：</p>
<ul>
<li><p>返回一个错误代码，提供一个函数将其转换为字符串</p>
</li>
<li><p>返回一个错误数据结构，该结构包括错误代码和描述信息</p>
</li>
<li><p>提供一个函数去获取错误代码，并提供一个函数转换为字符串</p>
</li>
<li><p>提供一个接口让调用者注册错误处理函数，当发生错误时，进行回调</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/4201856/error-handling-strategies-in-a-shared-library-c" target="_blank" rel="external">http://stackoverflow.com/questions/4201856/error-handling-strategies-in-a-shared-library-c</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake-macro-vs-function]]></title>
      <url>https://qianchenglong.github.io/2015/01/09/cmake-macro-vs-function/</url>
      <content type="html"><![CDATA[<p>cmake中，<code>macro</code>类似于C中的宏函数，会进行参数替换，而<code>function</code>类似于C中的函数，<br>参数是一个变量，可以进行赋值等操作。</p>
<p>示例：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(var <span class="string">"ABC"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">macro</span>(Moo arg)</span><br><span class="line">  <span class="keyword">message</span>(<span class="string">"arg = $&#123;arg&#125;"</span>)</span><br><span class="line">  <span class="keyword">set</span>(arg <span class="string">"abc"</span>)</span><br><span class="line">  <span class="keyword">message</span>(<span class="string">"# After change the value of arg."</span>)</span><br><span class="line">  <span class="keyword">message</span>(<span class="string">"arg = $&#123;arg&#125;"</span>)</span><br><span class="line"><span class="keyword">endmacro</span>()</span><br><span class="line"><span class="keyword">message</span>(<span class="string">"=== Call macro ==="</span>)</span><br><span class="line">Moo(<span class="variable">$&#123;var&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>(Foo arg)</span><br><span class="line">  <span class="keyword">message</span>(<span class="string">"arg = $&#123;arg&#125;"</span>)</span><br><span class="line">  <span class="keyword">set</span>(arg <span class="string">"abc"</span>)</span><br><span class="line">  <span class="keyword">message</span>(<span class="string">"# After change the value of arg."</span>)</span><br><span class="line">  <span class="keyword">message</span>(<span class="string">"arg = $&#123;arg&#125;"</span>)</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br><span class="line"><span class="keyword">message</span>(<span class="string">"=== Call function ==="</span>)</span><br><span class="line">Foo(<span class="variable">$&#123;var&#125;</span>)</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=== Call macro ===</span><br><span class="line">arg = ABC</span><br><span class="line"># After change the value of arg.</span><br><span class="line">arg = ABC</span><br><span class="line">=== Call function ===</span><br><span class="line">arg = ABC</span><br><span class="line"># After change the value of arg.</span><br><span class="line">arg = abc</span><br></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/24297999/function-vs-macro-in-cmake" target="_blank" rel="external">http://stackoverflow.com/questions/24297999/function-vs-macro-in-cmake</a></li>
<li><a href="http://www.cmake.org/cmake/help/v3.0/command/macro.html" target="_blank" rel="external">http://www.cmake.org/cmake/help/v3.0/command/macro.html</a></li>
<li><a href="http://www.cmake.org/cmake/help/v3.0/command/function.html" target="_blank" rel="external">http://www.cmake.org/cmake/help/v3.0/command/function.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pragma-once]]></title>
      <url>https://qianchenglong.github.io/2015/01/08/pragma-once/</url>
      <content type="html"><![CDATA[<p><code>#pragma once</code>是一条非标准的预处理指令，用来防止同一文件被多次包含，同<code>include guard</code>作用一样。<br>绝大多数编译器都提供支持。</p>
<p>具有的优点：</p>
<ul>
<li>代码更少，不用<code>include</code>那么麻烦</li>
<li>更有效，更安全，由预处理器去维护判断是否已经包含过，而<code>include</code>需要程序员定义不同的宏名来保证，<br>若宏名冲突，则导致编译失败</li>
<li>效率更高，预处理器针对其做了特殊的优化</li>
<li><strong>复制，修改代码更容易，当把一个头文件复制到另一个项目中，或改名时，不用按着命令规范去修改</strong></li>
</ul>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>当同一个文件，在项目内有符号链接或硬链接时，可能导致无法工作。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/Pragma_once" target="_blank" rel="external">https://en.wikipedia.org/wiki/Pragma_once</a></li>
<li><a href="http://stackoverflow.com/questions/1143936/pragma-once-vs-include-guards" target="_blank" rel="external">http://stackoverflow.com/questions/1143936/pragma-once-vs-include-guards</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[makefile-目标all作用]]></title>
      <url>https://qianchenglong.github.io/2015/01/08/makefile-%E7%9B%AE%E6%A0%87all%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>make在执行makefile中，若没有显式指定目标，默认执行第一个找到的目标。</p>
<p>而一般情况下，一个项目都会生成多个目标(如多个lib，dll，exe)等，所以<br>需要<code>all</code>这个伪目标来生成多个目标。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[makefile-.PHONY作用]]></title>
      <url>https://qianchenglong.github.io/2015/01/08/makefile-PHONY%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>先看makefile核心规则</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target: prerequisites</span><br><span class="line">    command</span><br></pre></td></tr></table></figure>
<p>make解析执行makefile判断过程：</p>
<ul>
<li>若<code>target</code>不存在，则根据<code>prerequisites</code>，执行<code>commond</code></li>
<li>若<code>target</code>已存在，则比较<code>target</code>和<code>prerequisites</code>修改时间<ul>
<li><strong>若<code>prerequisites</code>不存在，则不执行<code>commond</code>!</strong></li>
<li>若<code>prerequisites</code>比<code>target</code>新，则执行<code>commond</code>(说明在生成<code>target</code>后，对依赖文件进行了修改)</li>
<li>若<code>prerequisites</code>没有<code>target</code>新，则不执行<code>commond</code></li>
</ul>
</li>
</ul>
<h1 id="为什么需要伪目标"><a href="#为什么需要伪目标" class="headerlink" title="为什么需要伪目标"></a>为什么需要伪目标</h1><ul>
<li>假设当前目录下已有<code>clean</code>文件，则根据make解析过程，不会执行后续<code>commond</code></li>
</ul>
<h1 id="什么是伪目标-PHONY"><a href="#什么是伪目标-PHONY" class="headerlink" title="什么是伪目标(.PHONY)"></a>什么是伪目标(<code>.PHONY</code>)</h1><p>伪目标相对于目标而言，其不会生成实体<strong>文件</strong></p>
<h1 id="伪目标的作用"><a href="#伪目标的作用" class="headerlink" title="伪目标的作用"></a>伪目标的作用</h1><p>显式告诉make不要跟实体文件进行关联判断，以便执行相应的命令</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单元测试工具列表]]></title>
      <url>https://qianchenglong.github.io/2015/01/08/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks" target="_blank" rel="external">https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C运行库链接问题]]></title>
      <url>https://qianchenglong.github.io/2015/01/08/C%E8%BF%90%E8%A1%8C%E5%BA%93%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在同一个项目中，各组件需要保持一致的C运行库链接方式(动态或静态)，包括使用的第三方库(第三方库的C库链接方式)<br>应与项目C库链接方式一致！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.csdn.net/redline2005/article/details/6313703" target="_blank" rel="external">http://blog.csdn.net/redline2005/article/details/6313703</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/abx4dbyh(v=vs.100).aspx" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/abx4dbyh(v=vs.100).aspx</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编译安装google-C++-test-framework]]></title>
      <url>https://qianchenglong.github.io/2015/01/07/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85google-C-test-framework/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>VS2010</li>
<li>cmake-3.1.0</li>
<li>gtest-1.7.0</li>
</ul>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ul>
<li><p>下载<a href="https://code.google.com/p/googletest/" target="_blank" rel="external">官网</a>，解压</p>
</li>
<li><p>新建<code>build</code>目录，并进入</p>
</li>
<li><p>生成<code>Makefile</code></p>
<ul>
<li><p>静态库(默认C++运行库为静态链接)</p>
<pre><code>cmake -G &quot;NMake Makefiles&quot; ..
</code></pre></li>
<li><p>静态库，C++运行库采用动态链接</p>
<pre><code>cmake -G &quot;NMake Makefiles&quot; -Dgtest_force_shared_crt=ON ..
</code></pre></li>
<li><p>动态库(默认C++运行库为动态链接)</p>
<pre><code>cmake -G &quot;NMake Makefiles&quot;  -DBUILD_SHARED_LIBS=ON ..
</code></pre></li>
</ul>
</li>
</ul>
<p>注：</p>
<pre><code>-   编译示例，`-Dgtest_build_samples=ON`
</code></pre><ul>
<li><p>编译</p>
<pre><code>nmake
</code></pre></li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>gtest本身的C++运行时库需要和项目保持一致，不然会出现类似<code>msvcprtd.lib(MSVCP100D.dll) : error LNK2005: already defined in gtestd.lib(gtest.obj)</code>！</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stanlearnswindows.blogspot.jp/2010/06/msvcprtdlibmsvcp100ddll-error-lnk2005.html" target="_blank" rel="external">http://stanlearnswindows.blogspot.jp/2010/06/msvcprtdlibmsvcp100ddll-error-lnk2005.html</a></li>
<li><a href="http://www.cnblogs.com/ShaneZhang/p/3480502.html" target="_blank" rel="external">http://www.cnblogs.com/ShaneZhang/p/3480502.html</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/abx4dbyh(v=vs.100).aspx" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/abx4dbyh(v=vs.100).aspx</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C-函数返回值与错误处理]]></title>
      <url>https://qianchenglong.github.io/2015/01/07/C-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%8E%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>除了极少数函数调用不会出错(如<code>getpid()</code>，参考[APUE-8.2])，绝大多数函数都可能发生调用失败。在调用失败时，<br>就涉及到如何通知调用者，以便调用者进行相对应的错误处理。</p>
<h1 id="错误处理策略"><a href="#错误处理策略" class="headerlink" title="错误处理策略"></a>错误处理策略</h1><ul>
<li>作为调用者希望函数的返回结果就是我们期待的值，但这样报告错误又不方便</li>
<li>若用函数返回值来判断函数的成功或失败，获取期待结果又不方便</li>
</ul>
<p>所以在C中，往往都采用了折衷的方式，<strong>通过使用一个与所有成功结果都不相同的值作为函数失败时的返回值</strong>，常见方式有：</p>
<ul>
<li><p>失败时返回值</p>
<ul>
<li>返回<code>NULL</code>指针，如<code>fopen</code></li>
<li>返回<code>-1</code></li>
<li>返回<code>非0</code></li>
<li>某些专用宏，如<code>EOF</code>，<code>SOCKET_ERROR</code></li>
</ul>
</li>
<li><p>成功时返回值</p>
<ul>
<li>返回非空指针</li>
<li>返回<code>0</code></li>
<li>某些专用宏，如<code>SOCKET_SUCCESS</code></li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>UNIX环境高级编程.W.Richard Stevens / Stephen A.Rago.译者: 尤晋元 / 张亚英 / 戚正伟.ISBN: 9787115147318</li>
<li>The Standard C Library Paperback. July 11, 1992. P.J. Plauger.ISBN-13: 978-0131315099</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[封装个人代码]]></title>
      <url>https://qianchenglong.github.io/2015/01/07/%E5%B0%81%E8%A3%85%E4%B8%AA%E4%BA%BA%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>积累平时的代码，方便日后的复用。</p>
<h1 id="采用什么语言封装"><a href="#采用什么语言封装" class="headerlink" title="采用什么语言封装"></a>采用什么语言封装</h1><p>采用C++，原因如下：</p>
<ul>
<li><p>现阶段主要使用C++，虽然也使用部分C库或系统API</p>
</li>
<li><p>提供默认参数值，使接口美观、易用</p>
</li>
<li><p>提供名字空间，可以防止名字污染</p>
</li>
<li><p>提供多态，使接口美观、易用</p>
</li>
</ul>
<h1 id="封装遇到的问题"><a href="#封装遇到的问题" class="headerlink" title="封装遇到的问题"></a>封装遇到的问题</h1><ul>
<li><p>代码目录怎么组织？</p>
</li>
<li><p>函数调用出错怎么处理？</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[autohotkey获得粘贴板内容]]></title>
      <url>https://qianchenglong.github.io/2015/01/07/autohotkey%E8%8E%B7%E5%BE%97%E7%B2%98%E8%B4%B4%E6%9D%BF%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 获取当前选中内容</span></span><br><span class="line">GetSelectText()</span><br><span class="line">&#123;</span><br><span class="line">    tmp = <span class="variable">%ClipBoard%</span> <span class="comment">; 保存原来内容</span></span><br><span class="line">    <span class="built_in">ClipBoard</span> = <span class="comment">; 清空粘贴板</span></span><br><span class="line">    Send, ^c <span class="comment">; 获取当前选中内容</span></span><br><span class="line">    Sleep, <span class="number">100</span> <span class="comment">; 确保操作成功</span></span><br><span class="line">    text = <span class="variable">%ClipBoard%</span></span><br><span class="line">    <span class="built_in">ClipBoard</span> = <span class="variable">%cmp%</span> <span class="comment">; 复原</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msgbox <span class="variable">% GetSelectText()</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[软件设计原则资料]]></title>
      <url>https://qianchenglong.github.io/2015/01/07/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://coolshell.cn/articles/4535.html" target="_blank" rel="external">一些软件设计的原则(酷壳)</a></li>
<li><a href="https://en.wikipedia.org/wiki/KISS_principle" target="_blank" rel="external">https://en.wikipedia.org/wiki/KISS_principle</a></li>
<li><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="external">https://en.wikipedia.org/wiki/Don%27t_repeat_yourself</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[虚拟网卡资料]]></title>
      <url>https://qianchenglong.github.io/2015/01/06/%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://wushank.blog.51cto.com/3489095/1306849" target="_blank" rel="external">linux下TUN/TAP虚拟网卡的使用</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-tuntap/" target="_blank" rel="external">虚拟网卡 TUN/TAP 驱动程序设计原理</a></li>
<li><a href="http://superuser.com/questions/339465/creating-a-virtual-nic-on-windows-7" target="_blank" rel="external">http://superuser.com/questions/339465/creating-a-virtual-nic-on-windows-7</a></li>
<li><a href="https://zh.wikipedia.org/wiki/TUN%E4%B8%8ETAP" target="_blank" rel="external">wiki-TUN与TAP</a></li>
<li><a href="http://serverfault.com/questions/279390/any-way-to-make-a-virtual-bridged-network-adapter-in-windows-like-vmware-has" target="_blank" rel="external">http://serverfault.com/questions/279390/any-way-to-make-a-virtual-bridged-network-adapter-in-windows-like-vmware-has</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[位域与大小端]]></title>
      <url>https://qianchenglong.github.io/2015/01/06/%E4%BD%8D%E5%9F%9F%E4%B8%8E%E5%A4%A7%E5%B0%8F%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h1 id="小端"><a href="#小端" class="headerlink" title="小端"></a>小端</h1><p>先定义的位域占用字节低位</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> a:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">uint8_t</span> b:<span class="number">4</span>;</span><br><span class="line">&#125; Bit;</span><br></pre></td></tr></table></figure>
<p>内存中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxx xxxx</span><br><span class="line">b    a</span><br></pre></td></tr></table></figure>
<p>测试：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> a:<span class="number">4</span>;    <span class="comment">/**&lt; 低4位 */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> b:<span class="number">4</span>;    <span class="comment">/**&lt; 高4位 */</span></span><br><span class="line">&#125; Bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Bit.a = <span class="number">0x0</span>;</span><br><span class="line">    Bit.b = <span class="number">0xf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Bit:%#x\n"</span>, Bit);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"address:%x\n"</span>, (char*)&amp;Bit);</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bit:0xf0</span><br><span class="line">address:4063f0</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[本地透明代理的实现]]></title>
      <url>https://qianchenglong.github.io/2015/01/05/%E6%9C%AC%E5%9C%B0%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="转载自http-blog-csdn-net-someonea-article-details-5864946"><a href="#转载自http-blog-csdn-net-someonea-article-details-5864946" class="headerlink" title="转载自http://blog.csdn.net/someonea/article/details/5864946"></a>转载自<a href="http://blog.csdn.net/someonea/article/details/5864946" target="_blank" rel="external">http://blog.csdn.net/someonea/article/details/5864946</a></h2><p>Windows下实现本地透明代理可以通过一个过滤驱动和代理进程实现。<br> 过滤驱动Attach到“//Device//Tcp”和”//Device//Udp”,然后在Dispatch函数中修改<br> 连接的目的地址并保存原始目的地址和源地址。<br> 上层的代理进程在accept到连接时，向过滤驱动查询连接的原始目的地址，<br> 然后向原始目的地址发起连接。</p>
<p> Linux下面使用netfilter(iptables)可以很容易的实现一个TCP透明代理，<br> 使用iptables的REDIRECT选项无需编写内核模块就可以把连接重定向到本地代理进程。<br> 然后代理进程accept到连接时通过SO_ORIGINAL_DST这个socket选项就可以得到原始目的地址，<br> 非常方便。<br> 不过这只是对TCP而言的，对应UDP而言，还是需要编写一个内核模块，自己做一些处理。<br> 对于UDP，可以用nf_register_hook注册一个Hook，然后保存socket目的地址。<br> 另外注册一个字符设备，在字符设备的IOCTL处理函数中把socket的原始目的地址发送给代理进程。<br> 这一点与Windows的过滤驱动很相似，过滤驱动一般也是注册一个控制设备，<br> 用户态程序通过控制设备与过滤驱动通信。</p>
<p> Mac OS X中也有类似的机制（使用ipfw的fwd、divert选项），不过用的人较少。</p>
<p> Mac OS X中可以注册Socket Filters手工过滤特定的连接。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[任播]]></title>
      <url>https://qianchenglong.github.io/2015/01/04/%E4%BB%BB%E6%92%AD/</url>
      <content type="html"><![CDATA[<p>多台设备具有统一IP地址，但在任何给定时间，只有其中之一可以接收到传送端来的资讯。</p>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>任播通常用于提供高可靠性和负载平衡</p>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">边界网关协议</a></li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8B%99%E5%99%A8" target="_blank" rel="external">根域名服务器</a></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BB%BB%E6%92%AD" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E4%BB%BB%E6%92%AD</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dns中递归查询与迭代查询的区别]]></title>
      <url>https://qianchenglong.github.io/2015/01/04/dns%E4%B8%AD%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2%E4%B8%8E%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<ul>
<li>递归查询:</li>
</ul>
<p>一般客户机和服务器之间属递归查询，即当客户机向DNS服务器发出请求后,若DNS服务器本身不能解析,则会向另外的DNS服务器发出查询请求，得到结果后转交给客户机；</p>
<ul>
<li>迭代查询(反复查询):</li>
</ul>
<p>一般DNS服务器之间属迭代查询，如：若DNS2不能响应DNS1的请求，则它会将DNS3的IP给DNS2，以便其再向DNS3发出请求；</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zhidao.baidu.com/link?url=zZcn6vwAvt3f_391aq8kqR-rohsN-WYq5mDst_bUkzxYpEJZyuH-3ggW5BibrDPcrNpbWMqH8nMrACtahNhmZq" target="_blank" rel="external">http://zhidao.baidu.com/link?url=zZcn6vwAvt3f_391aq8kqR-rohsN-WYq5mDst_bUkzxYpEJZyuH-3ggW5BibrDPcrNpbWMqH8nMrACtahNhmZq</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改文件默认打开方式]]></title>
      <url>https://qianchenglong.github.io/2015/01/04/%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="系统命令方式（优先级低于用户设置，即存储于注册表中的）"><a href="#系统命令方式（优先级低于用户设置，即存储于注册表中的）" class="headerlink" title="系统命令方式（优先级低于用户设置，即存储于注册表中的）"></a>系统命令方式（优先级低于用户设置，即存储于注册表中的）</h1><ol>
<li><p>assoc改变指定拓展名对应的文件类型</p>
<pre><code>assoc .apk=AndroidPackage
&lt;=&gt;
reg add HKEY_CLASSES_ROOT\.apk /d &quot;AndroidPackage&quot; /f
</code></pre></li>
<li><p>ftype来指定文件执行命令，%1代表该文件，%*代表参数</p>
<pre><code>ftype txtfile=&quot;e:\OS\Android\Exeperience\apk-install.bat&quot; %1 %*
&lt;=&gt;
reg add HKEY_CLASSES_ROOT\AndroidPackage\Shell\Open\Command /d &quot;\&quot;e:\OS\Android\Exeperience\apk-install.bat\&quot; %%1 %%*&quot; /f
</code></pre></li>
</ol>
<h1 id="修改用户设置"><a href="#修改用户设置" class="headerlink" title="修改用户设置"></a>修改用户设置</h1><pre><code>[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.txt\UserChoice]
&quot;Rrogid&quot;=&quot;\&quot;C:\\Program Files (x86)\\Vim\\vim73\\gvim.exe\&quot; \&quot;%1\&quot; \&quot;%*\&quot;&quot;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GetTickCount]]></title>
      <url>https://qianchenglong.github.io/2014/12/31/GetTickCount/</url>
      <content type="html"><![CDATA[<h2 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h2><p>这个函数并非实时发送，而是由系统每18ms发送一次，因此其最小精度为18ms。当需要有小于18ms的精度计算时，应使用StopWatch方法进行。</p>
<ul>
<li>连续触发200次，实测下来，最小间隔在15ms。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tuple]]></title>
      <url>https://qianchenglong.github.io/2014/12/26/tuple/</url>
      <content type="html"><![CDATA[<h1 id="形式定义"><a href="#形式定义" class="headerlink" title="形式定义"></a>形式定义</h1><p>元组是<strong>个数有限</strong>的对象的<strong>序列</strong>。元组由三部分组成：边界符、分隔符和元素。通常采用的边界符是小括号”(  )”，分隔符是逗号”,”。</p>
<p>特性：</p>
<ul>
<li><p>个数有限</p>
</li>
<li><p>有序</p>
</li>
<li><p>用来表示一组相关联数据</p>
</li>
</ul>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li><p>在数学中，<strong>元组</strong>被用来描述对象的属性，例如，有向图被定义成一个二元组（V, E），这里V是节点的集合，E是V × V的子集，表示边。</p>
</li>
<li><p>在计算机科学中，<strong>元组</strong>被用来描述一组相关联的数据，常通过位置关系来隐式说明值得意义。</p>
</li>
</ul>
<h1 id="python中的tuple"><a href="#python中的tuple" class="headerlink" title="python中的tuple"></a>python中的tuple</h1><p>python中的tuple元素类型不要求一致，即意味着可以各种嵌套使用。如<code>([1, 2], {&#39;a&#39;: 1}, (1, 2))</code></p>
<h1 id="与list对比"><a href="#与list对比" class="headerlink" title="与list对比"></a>与list对比</h1><h2 id="存储对象"><a href="#存储对象" class="headerlink" title="存储对象"></a>存储对象</h2><ul>
<li><p>tuple存储的元素是异构的(heterogeneous)，有点类似C中的结构体，是用来表达对象的组成</p>
</li>
<li><p>list，存储的元素是同构的(homogeneous )，是一种序列的存储方式(链式存储)，是用来做数据的容器</p>
</li>
</ul>
<h2 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h2><ul>
<li><p>tuple是不可变的</p>
</li>
<li><p>list是可变的</p>
</li>
</ul>
<h2 id="提供的操作"><a href="#提供的操作" class="headerlink" title="提供的操作"></a>提供的操作</h2><ul>
<li><p>tuple无增删改</p>
</li>
<li><p>list提供增删改</p>
</li>
</ul>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><p>逻辑清晰，代码安全，健壮性更好！</p>
<h1 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h1><p>根据数据本质特征</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://en.wikipedia.org/wiki/Tuple" target="_blank" rel="external">http://en.wikipedia.org/wiki/Tuple</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%A4%9A%E5%85%83%E7%BB%84" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E5%A4%9A%E5%85%83%E7%BB%84</a></li>
<li><a href="http://en.wikipedia.org/wiki/List_(abstract_data_type)" target="_blank" rel="external">http://en.wikipedia.org/wiki/List_(abstract_data_type)</a></li>
<li><a href="http://stackoverflow.com/questions/626759/whats-the-difference-between-list-and-tuples" target="_blank" rel="external">http://stackoverflow.com/questions/626759/whats-the-difference-between-list-and-tuples</a></li>
<li><a href="http://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each" target="_blank" rel="external">http://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each</a></li>
<li><a href="http://news.e-scribe.com/397" target="_blank" rel="external">Understanding tuples vs. lists in Python</a></li>
<li><a href="https://docs.python.org/dev/library/collections.html#collections.namedtuple" target="_blank" rel="external">https://docs.python.org/dev/library/collections.html#collections.namedtuple</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python命令行选项]]></title>
      <url>https://qianchenglong.github.io/2014/12/26/python%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9/</url>
      <content type="html"><![CDATA[<ul>
<li><p>-B</p>
<p>不生成<code>__pycache__</code>文件夹</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-安装setuptools]]></title>
      <url>https://qianchenglong.github.io/2014/12/26/python-%E5%AE%89%E8%A3%85setuptools/</url>
      <content type="html"><![CDATA[<p><a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="external">官网链接</a></p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><p>下载<a href="https://bootstrap.pypa.io/ez_setup.py" target="_blank" rel="external">ez_setup.py</a></p>
</li>
<li><p>使用目标<code>python</code>运行<code>ez_setup.py</code></p>
<pre><code>python ez_setup.py
</code></pre></li>
<li><p>添加<code>C:\Python27\Scripts</code>到环境变量<code>PATH</code>中</p>
</li>
</ul>
<p>注：</p>
<ol>
<li>win下安装可能出现错误：<code>UnicodeDecodeError &#39;ascii&#39; codec can&#39;t decode byte</code>，<a href="/res/setuptools-error.pdf">请参考这里解决</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-使用py2exe打包]]></title>
      <url>https://qianchenglong.github.io/2014/12/26/python-%E4%BD%BF%E7%94%A8py2exe%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="没有带上自己的包"><a href="#没有带上自己的包" class="headerlink" title="没有带上自己的包"></a>没有带上自己的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(PACKAGE_DIR)</span><br><span class="line"></span><br><span class="line">options = &#123;<span class="string">'py2exe'</span>: &#123;</span><br><span class="line">    <span class="string">'packages'</span>: [<span class="string">'PACKAGE_NAME'</span>]</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-subprocess隐藏命令行]]></title>
      <url>https://qianchenglong.github.io/2014/12/25/python-subprocess%E9%9A%90%E8%97%8F%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">startupinfo = subprocess.STARTUPINFO()</span><br><span class="line">startupinfo.dwFlags = subprocess.CREATE_NEW_CONSOLE | subprocess.STARTF_USESHOWWINDOW</span><br><span class="line">startupinfo.wShowWindow = subprocess.SW_HIDE</span><br><span class="line">subprocess.Popen([<span class="string">"ping"</span>, <span class="string">"-c 1"</span>, ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=startupinfo)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://code.activestate.com/recipes/578300-python-subprocess-hide-console-on-windows/" target="_blank" rel="external">http://code.activestate.com/recipes/578300-python-subprocess-hide-console-on-windows/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-格式字符串]]></title>
      <url>https://qianchenglong.github.io/2014/12/24/python-%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>因python不提供隐式类型转换，不支持类似<code>string + int</code>等操作，所以字符串的连接<br>需要使用其他的方法。</p>
<h1 id="2-6之后推荐使用string-format"><a href="#2-6之后推荐使用string-format" class="headerlink" title="2.6之后推荐使用string.format()"></a>2.6之后推荐使用<code>string.format()</code></h1><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><ul>
<li><code>string</code>连接其他类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="keyword">False</span></span><br><span class="line"><span class="string">'True Or &#123;&#125;!'</span>.format(var)</span><br></pre></td></tr></table></figure>
<ul>
<li>命名参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">madlib = <span class="string">" I &#123;verb&#125; the &#123;object&#125; off the &#123;place&#125; "</span>.format(verb=<span class="string">"took"</span>, object=<span class="string">"cheese"</span>, place=<span class="string">"table"</span>)</span><br></pre></td></tr></table></figure>
<h1 id="不推荐使用"><a href="#不推荐使用" class="headerlink" title="不推荐使用%"></a>不推荐使用<code>%</code></h1><p>原因，参见<a href="https://www.python.org/dev/peps/pep-3101/" target="_blank" rel="external">PEP-3101</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.python.org/dev/peps/pep-3101/" target="_blank" rel="external">https://www.python.org/dev/peps/pep-3101/</a></li>
<li><a href="https://docs.python.org/2.7/library/string.html#formatspec" target="_blank" rel="external">https://docs.python.org/2.7/library/string.html#formatspec</a></li>
<li><a href="http://youngsterxyf.github.io/2013/01/26/python-string-format/" target="_blank" rel="external">http://youngsterxyf.github.io/2013/01/26/python-string-format/</a></li>
<li><a href="http://www.pythonclub.org/python-basic/print" target="_blank" rel="external">http://www.pythonclub.org/python-basic/print</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-获取相对路径]]></title>
      <url>https://qianchenglong.github.io/2014/12/24/python-%E8%8E%B7%E5%8F%96%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录相对于当前工作目录的相对路径</span></span><br><span class="line">print(os.path.relpath(<span class="string">'E:/Work/Project/WifiClient/branches/br_WiFi_v0.0.0_r5/httpd/cgi-bin'</span>))</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/17506552/python-os-path-relpath-behavior" target="_blank" rel="external">http://stackoverflow.com/questions/17506552/python-os-path-relpath-behavior</a></li>
<li><a href="https://docs.python.org/2/library/os.path.html#os.path.relpath" target="_blank" rel="external">https://docs.python.org/2/library/os.path.html#os.path.relpath</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-切换工作目录]]></title>
      <url>https://qianchenglong.github.io/2014/12/24/python-%E5%88%87%E6%8D%A2%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.chdir(path)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/1810743/how-to-set-the-current-working-directory-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/1810743/how-to-set-the-current-working-directory-in-python</a></li>
<li><a href="https://docs.python.org/2/library/os.html#os.chdir" target="_blank" rel="external">https://docs.python.org/2/library/os.html#os.chdir</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-复制文件]]></title>
      <url>https://qianchenglong.github.io/2014/12/24/python-%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul>
<li><p><code>shutil.copy(src, dst)</code></p>
<ul>
<li><code>src</code>，源文件</li>
<li><code>dst</code>，目标可以是文件，也可以是目录，当是目录，则在该目录下新建同名文件或<strong>覆盖</strong>同名文件</li>
<li>只拷贝内容，不拷贝文件<strong>元信息</strong>(创建时间，最后访问时间，修改时间等)</li>
</ul>
</li>
<li><p><code>shutil.copy2(src, dst)</code></p>
<ul>
<li>完全拷贝(包括<strong>元信息</strong>)，相当于<code>shutil.copy(src, dst)</code>+<code>shutil.copystat(src, dst)</code></li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/2/library/shutil.html#shutil.copystat" target="_blank" rel="external">https://docs.python.org/2/library/shutil.html#shutil.copystat</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[打开方式无法添加新程序]]></title>
      <url>https://qianchenglong.github.io/2014/12/23/%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E6%97%A0%E6%B3%95%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>修改了文件名，注册表没有同步</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>删除对应注册表项</p>
<pre><code>HKEY_CURRENT_USER\Software\Classes\Applications\&lt;Application-name&gt;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-强制重新导入模块]]></title>
      <url>https://qianchenglong.github.io/2014/12/23/python-%E5%BC%BA%E5%88%B6%E9%87%8D%E6%96%B0%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reload(MODULE_NAME)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/684171/how-to-re-import-an-updated-package-while-in-python-interpreter" target="_blank" rel="external">http://stackoverflow.com/questions/684171/how-to-re-import-an-updated-package-while-in-python-interpreter</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-获取__main__模块文件名]]></title>
      <url>https://qianchenglong.github.io/2014/12/23/python-%E8%8E%B7%E5%8F%96__main__%E6%A8%A1%E5%9D%97%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      <content type="html"><![CDATA[<h1 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h1><p><code>__main__</code>模块中<code>import A</code>，而<code>A</code>模块中需要引用<code>__main__</code>的文件名</p>
<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> __main__</span><br><span class="line"><span class="keyword">print</span> __main__.__file__</span><br></pre></td></tr></table></figure>
<p>缺陷：</p>
<p>当使用<code>py2exe</code>时，无法使用</p>
<h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">print</span> sys.argv[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>缺陷：</p>
<p>当使用<code>python</code>解释器<code>-c</code>传参启动时，无效</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/606561/how-to-get-filename-of-the-main-module-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/606561/how-to-get-filename-of-the-main-module-in-python</a></li>
<li><a href="http://www.acnenomor.com/4440072p1/how-to-get-filename-of-the-main-module-in-python" target="_blank" rel="external">http://www.acnenomor.com/4440072p1/how-to-get-filename-of-the-main-module-in-python</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-获取文件名组成]]></title>
      <url>https://qianchenglong.github.io/2014/12/23/python-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%90%8D%E7%BB%84%E6%88%90/</url>
      <content type="html"><![CDATA[<h1 id="获取基本文件名"><a href="#获取基本文件名" class="headerlink" title="获取基本文件名"></a>获取基本文件名</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename=<span class="string">"/tmp/test.txt"</span></span><br><span class="line">os.path.basename(filename)</span><br></pre></td></tr></table></figure>
<h1 id="获取基本文件名-不包括拓展名"><a href="#获取基本文件名-不包括拓展名" class="headerlink" title="获取基本文件名(不包括拓展名)"></a>获取基本文件名(不包括拓展名)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename=<span class="string">"/tmp/test.txt"</span></span><br><span class="line">os.path.splitext(os.path.basename(filename))[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h1 id="获取文件拓展名"><a href="#获取文件拓展名" class="headerlink" title="获取文件拓展名"></a>获取文件拓展名</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename=<span class="string">"/tmp/test.txt"</span></span><br><span class="line">os.path.splitext(os.path.basename(filename))[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h1 id="获取父目录"><a href="#获取父目录" class="headerlink" title="获取父目录"></a>获取父目录</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename=<span class="string">"/tmp/test.txt"</span></span><br><span class="line">os.path.dirname(filename)</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/678236/how-to-get-the-filename-without-the-extension-from-a-path-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/678236/how-to-get-the-filename-without-the-extension-from-a-path-in-python</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优秀网站列表]]></title>
      <url>https://qianchenglong.github.io/2014/12/22/%E4%BC%98%E7%A7%80%E7%BD%91%E7%AB%99%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="代码搜索"><a href="#代码搜索" class="headerlink" title="代码搜索"></a>代码搜索</h1><ul>
<li><p><a href="http://www.krugle.com/" target="_blank" rel="external">krugle</a></p>
</li>
<li><p><a href="http://www.codase.com/" target="_blank" rel="external">codase</a></p>
</li>
<li><p><a href="http://code.openhub.net/" target="_blank" rel="external">Black Duck Open Hub Code Search</a></p>
</li>
<li><p><a href="https://github.com/search" target="_blank" rel="external">git</a></p>
</li>
<li><p><a href="http://symbolhound.com/" target="_blank" rel="external">SymbolHound</a></p>
<p>不会忽略特殊符号</p>
</li>
<li><p><a href="https://www.haskell.org/hoogle/" target="_blank" rel="external">Hoogle</a></p>
<p>Haskell的专用函数搜索引擎</p>
</li>
<li><p><a href="http://rseek.org/" target="_blank" rel="external">RSeek</a></p>
<p>R语言专用搜索</p>
</li>
<li><p><a href="http://www.findjar.com/index.x" target="_blank" rel="external">findjar.com</a></p>
<p>JAR搜索引擎</p>
</li>
<li><p><a href="http://research.microsoft.com/en-us/default.aspx" target="_blank" rel="external">Microsoft Research</a></p>
<p>微软内部搜索</p>
</li>
<li><p><a href=""></a></p>
</li>
</ul>
<h1 id="网盘搜索"><a href="#网盘搜索" class="headerlink" title="网盘搜索"></a>网盘搜索</h1><ul>
<li><a href="http://so.baiduyun.me/" target="_blank" rel="external">http://so.baiduyun.me/</a></li>
</ul>
<h1 id="代码片段保存"><a href="#代码片段保存" class="headerlink" title="代码片段保存"></a>代码片段保存</h1><ul>
<li><a href="http://codepad.org/" target="_blank" rel="external">codepad</a></li>
</ul>
<h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><ul>
<li><a href="https://travis-ci.org" target="_blank" rel="external">Travis CI</a></li>
</ul>
<h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><ul>
<li><p><a href="http://www.downxia.com/" target="_blank" rel="external">当下</a></p>
</li>
<li><p><a href="http://www.portablesoft.org/" target="_blank" rel="external">精品绿色便携软件</a></p>
</li>
<li><p><a href="http://portableapptrash.blogspot.com/" target="_blank" rel="external">PortableAppZ</a></p>
</li>
<li><p><a href="http://portableapps.com/" target="_blank" rel="external">portableapps</a></p>
</li>
<li><p><a href="http://www.portableappc.com/" target="_blank" rel="external">portableappc</a></p>
</li>
<li><p><a href="http://www.itopdog.cn/" target="_blank" rel="external">软件盒子</a></p>
</li>
<li><p><a href="http://www.iplaysoft.com/" target="_blank" rel="external">异次元的软件世界</a></p>
</li>
</ul>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul>
<li><a href="http://www.tldp.org/" target="_blank" rel="external">Linux文档项目</a></li>
</ul>
<h1 id="娱乐网站"><a href="#娱乐网站" class="headerlink" title="娱乐网站"></a>娱乐网站</h1><h1 id="APP下载"><a href="#APP下载" class="headerlink" title="APP下载"></a>APP下载</h1><ul>
<li><a href="http://www.appsapk.com/" target="_blank" rel="external">appsAPK</a></li>
</ul>
<h1 id="视频下载"><a href="#视频下载" class="headerlink" title="视频下载"></a>视频下载</h1><ul>
<li><p><a href="http://en.savefrom.net/" target="_blank" rel="external">savefrom.net</a></p>
<p>youtube等网站视频下载</p>
</li>
</ul>
<h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><ul>
<li><a href="http://en.cppreference.com/w/" target="_blank" rel="external">http://en.cppreference.com/w/</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ejs语法]]></title>
      <url>https://qianchenglong.github.io/2014/12/19/ejs%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p><code>&lt;% javascript %&gt;</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.embeddedjs.com/" target="_blank" rel="external">http://www.embeddedjs.com/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>https://qianchenglong.github.io/2014/12/19/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="文件名后缀"><a href="#文件名后缀" class="headerlink" title="文件名后缀"></a>文件名后缀</h2><p>采用*.md</p>
<a id="more"></a>
<h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li><p>Atx语法格式(<strong>采用这种</strong>)</p>
<p>  用1~6个’#’来表示1～6阶标题</p>
<pre><code># 一级标题
## 二级标题
</code></pre></li>
<li><p>Setext语法格式</p>
<p>  用’=’或’-‘在文字下部标注</p>
<pre><code>大标题
======
小标题
------
</code></pre></li>
</ul>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>一个或多个连续的文本行组成，以空行(<strong>空白符组成的行</strong>)作为分界符</p>
<p>理解：在markdown文件中，一个段落中的换行符和多个连续的空白符都无效，所以若是需<br>要强制换行(类似与在html文件中插入<code>&lt;br \&gt;</code>标签)，需要在该行尾输入2个以上的空格<br>。</p>
<pre><code>    这是
一个段落
</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li><p>无序列表</p>
<p>项目标记[-,<em>,+] + 空格(总共1个TAB)，所以最好的方式是，<em>*- 3个空格</em></em>(按下TAB键即可)</p>
<pre><code>-    足球
-    篮球
或
*    足球
*    篮球
或
+    足球
+    篮球
</code></pre></li>
<li><p>有序列表</p>
<p>项目标记[-,<em>,+] + . + 空格(总共1个TAB)，所以最好的方式是，<em>*1. 2个空格</em></em>(按下TAB键即可)</p>
<ul>
<li><p>用一个数字加空格标记</p>
<pre><code>1.  起床
1.  刷牙
1.  洗脸
</code></pre></li>
<li><p>数字的顺序没有作用，但最好从<code>1</code>开始，有些编译器支持start属性</p>
</li>
</ul>
</li>
<li><p>列表项目含有多个段落(<strong>记得段落间需要空行！</strong>)</p>
<p>该段落比列表项目多缩进1次</p>
<pre><code>-   吃饭

    先拿筷子，在吃饭，
    然后记得擦嘴！
</code></pre></li>
<li><p>列表项目含有块引用(<strong>同段落处理一样</strong>)</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre></li>
<li><p>列表项目含有代码</p>
<p>  代码比列表项目多缩进2次</p>
<pre><code>-   吃饭

    段落

        getChopsticks();
        eat();
        cleanMouse();
</code></pre></li>
</ul>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>比段落多缩进1次，连续相同缩进的行构成代码区块</p>
<pre><code>吃饭

    getChopsticks();
    eat();
    cleanMouse();
</code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>以’&gt;’加一个空白加文字组成</p>
<ul>
<li><p>只在整个段落的第一行最前面加上 &gt;</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre></li>
<li><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p>
<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre></li>
<li><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre><code>&gt; ## 这是一个标题。
&gt;
&gt; 1.   这是第一行列表项。
&gt; 2.   这是第二行列表项。
&gt;
&gt; 给出一些例子代码：
&gt;
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre></li>
</ul>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>3个以上的’_’或’=’或’*’</p>
<pre><code>吃饭
---
学习
</code></pre><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li><p>行内式</p>
<ul>
<li><p>万维网资源：</p>
<pre><code>[HOME](www.qianchenglong.com &quot;TITLE&quot;)
</code></pre></li>
<li><p>要链接到本机资源，可以使用相对路径：</p>
<pre><code>[localfile](Markdown语法简记.mkd)
</code></pre></li>
</ul>
</li>
<li><p>参考式(<strong>多链接时，优先使用！</strong>)</p>
<p>参考式链接[Baidu][Baidu_ID]</p>
<pre><code>[Baidu_ID]: www.baidu.com &apos;TITLE&apos;
</code></pre></li>
</ul>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>用’&lt;’和’&gt;’包含起来(<strong>不需要描述链接时采用</strong>)</p>
<pre><code>&lt;http://www.google.com&gt;
&lt;qian_cheng_long@163.com&gt;
</code></pre><h3 id="图片-地址指定同链接一样"><a href="#图片-地址指定同链接一样" class="headerlink" title="图片(地址指定同链接一样)"></a>图片(地址指定同链接一样)</h3><pre><code>![图片描述]( 图片地址 &quot;TITLE&quot; )
</code></pre><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>用’<em>‘(<em>*优先采用</em></em>)或’_’包含起来的文字，1个等于<code>&lt;em /&gt;</code>，2个等于<code>&lt;strong /&gt;</code></p>
<pre><code>_吃饭_
**学习**
</code></pre><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>用’`’包含起来</p>
<pre><code>这是代码`puts(&quot;hello world&quot;)`
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wireshark-捕捉过滤器]]></title>
      <url>https://qianchenglong.github.io/2014/12/19/wireshark-%E6%8D%95%E6%8D%89%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>用于决定将什么样的信息记录在捕捉结果中。需要在开始捕捉前设置。</p>
<h1 id="捕捉器语法"><a href="#捕捉器语法" class="headerlink" title="捕捉器语法"></a>捕捉器语法</h1><pre><code>[not] primitive [and | or [not] primitive ...]

primitive := qualifiers id

id := name or number

qualifiers := type dir proto
</code></pre><p>type</p>
<blockquote>
<p>type qualifiers say what kind of thing the id name or number refers to. Possible types are host, net , port and portrange. E.g., <code>host foo</code>, <code>net 128.3</code>, <code>port 20</code>, <code>portrange 6000-6008</code>. If there is no type qualifier, host is assumed.</p>
</blockquote>
<h1 id="常用过滤器"><a href="#常用过滤器" class="headerlink" title="常用过滤器"></a>常用过滤器</h1><ul>
<li><p>DHCP</p>
<pre><code>port 67 or port 68
</code></pre></li>
<li><p>目的MAC</p>
<pre><code>ether dst 74-D4-35-46-3C-8E
</code></pre></li>
<li><p>tcp端口</p>
<pre><code>tcp port 80
</code></pre></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.wireshark.org/docs/wsug_html_chunked/ChCapCaptureFilterSection.html" target="_blank" rel="external">https://www.wireshark.org/docs/wsug_html_chunked/ChCapCaptureFilterSection.html</a></li>
<li><a href="http://www.tcpdump.org/manpages/pcap-filter.7.html" target="_blank" rel="external">http://www.tcpdump.org/manpages/pcap-filter.7.html</a></li>
<li><a href="http://wiki.wireshark.org/CaptureFilters" target="_blank" rel="external">http://wiki.wireshark.org/CaptureFilters</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN-工作副本怎样跟踪版本库]]></title>
      <url>https://qianchenglong.github.io/2014/12/18/SVN-%E5%B7%A5%E4%BD%9C%E5%89%AF%E6%9C%AC%E6%80%8E%E6%A0%B7%E8%B7%9F%E8%B8%AA%E7%89%88%E6%9C%AC%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>对于工作副本的每一个文件，Subversion 在管理目录 .svn/ 记录两项关键的信息:</p>
<ul>
<li><p>工作文件的基准版本(叫做文件的工作版本)</p>
</li>
<li><p>一个本地副本最后更新的时间戳。</p>
</li>
</ul>
<p>给定这些信息，通过与版本库通讯，Subversion 可以告诉我们工作文件是处与如下四种状态的那一种:</p>
<ul>
<li><p>未修改且是当前的</p>
<p>文件在工作目录里没有修改，在工作版本之后没有修改提交到版本库。svn commit 操作不做任何事情，svn update 不做任何事情。</p>
</li>
<li><p>本地已修改且是当前的</p>
<p>工作副本已经修改，从基准版本之后没有修改提交到版本库。本地修改没有提交，因此 commit 会成功的提交，update 不做任何事情。</p>
</li>
<li><p>本地未修改且过时</p>
<p>这个文件在工作副本没有修改，但在版本库中已经修改了。这个文件应当更新到最新公共版本。commit 不做任何事情，update 将会更新工作副本到最新的版本。</p>
</li>
<li><p>本地已修改且过时</p>
<p>这个文件在工作副本和版本库中都被修改了。提交 该文件将会因为 过时 而失败。该文件应该先更新; 更新 命令将会尝试合并公共更改和本机更改。如果 Subversion 不能顺利的自动完成合并，则需要用户解决冲突。</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://tortoisesvn.net/docs/nightly/TortoiseSVN_zh_CN/tsvn-basics-svn.html" target="_blank" rel="external">http://tortoisesvn.net/docs/nightly/TortoiseSVN_zh_CN/tsvn-basics-svn.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++编码规范]]></title>
      <url>https://qianchenglong.github.io/2014/12/16/C++%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="目录组织"><a href="#目录组织" class="headerlink" title="目录组织"></a>目录组织</h1><ul>
<li><p>[3rdparty] 第三方包</p>
</li>
<li><p>[bin] 动态库或可执行文件生成目录</p>
</li>
<li><p>[cmake] cmake辅助</p>
</li>
<li><p>[doc] 文档</p>
</li>
<li><p>[include] 对外接口声明</p>
<ul>
<li><p>[库名称]</p>
<ul>
<li>[include]</li>
</ul>
</li>
</ul>
</li>
<li><p>[lib] 静态库生成目录</p>
</li>
<li><p>[src] 内部声明(<em>.h)，实现文件(</em>.c, *.cpp)</p>
</li>
<li><p>[test] 测试</p>
</li>
</ul>
<p>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/2360734/whats-a-good-directory-structure-for-larger-c-projects-using-makefile?lq=1" target="_blank" rel="external">http://stackoverflow.com/questions/2360734/whats-a-good-directory-structure-for-larger-c-projects-using-makefile?lq=1</a></li>
<li><a href="http://stackoverflow.com/questions/13967296/why-place-headers-in-a-separate-directory?lq=1" target="_blank" rel="external">http://stackoverflow.com/questions/13967296/why-place-headers-in-a-separate-directory?lq=1</a></li>
<li><a href="http://stackoverflow.com/questions/1383174/source-file-organisation?lq=1" target="_blank" rel="external">http://stackoverflow.com/questions/1383174/source-file-organisation?lq=1</a></li>
<li><a href="http://stackoverflow.com/questions/1398445/directory-structure-for-a-c-library" target="_blank" rel="external">http://stackoverflow.com/questions/1398445/directory-structure-for-a-c-library</a></li>
</ol>
<h1 id="文件空行"><a href="#文件空行" class="headerlink" title="文件空行"></a>文件空行</h1><ul>
<li><p><code>#pragma once</code>后空2行</p>
</li>
<li><p><code>#include</code>模块间空1行</p>
</li>
<li><p><code>#include</code>后空2行</p>
</li>
<li><p>函数定义间空1行</p>
</li>
</ul>
<h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><ul>
<li><p>使用<code>#pragma once</code></p>
</li>
<li><p>凡是能使用前向声明的，尽量使用，减少外部依赖！</p>
<ul>
<li>若该文件是作为外部引用入口，则需确保使用者不用再include其他文件，除非故意划分子模块使用！</li>
</ul>
</li>
</ul>
<h2 id="头文件包含顺序"><a href="#头文件包含顺序" class="headerlink" title="头文件包含顺序"></a>头文件包含顺序</h2><p>各部分最好按字母序排列</p>
<ul>
<li><p>实现文件对应的头文件</p>
<p>可以尽早发现该模块头文件中缺少的必须的头文件，使模块完全独立，不依赖于其他模块导入的头文件，减少了编译时间！</p>
</li>
<li><p>本模块下其他的头文件</p>
</li>
<li><p>C++库</p>
</li>
<li>C库</li>
<li><p>系统库</p>
<p>确保该实现不依赖其他模块导入的头文件！</p>
</li>
<li><p>第三方库(根据使用广泛度，不同库换行)</p>
</li>
<li><p>本项目的其他模块头文件</p>
</li>
</ul>
<p><strong>Note:</strong></p>
<ul>
<li>若一些头文件依赖特定宏，则宏定义于头文件前</li>
<li>若头文件之间存在顺序问题，则可以不遵循</li>
</ul>
<p><strong>参考</strong>:</p>
<ol>
<li><a href="http://stackoverflow.com/questions/614302/c-header-order" target="_blank" rel="external">http://stackoverflow.com/questions/614302/c-header-order</a></li>
<li><a href="http://stackoverflow.com/questions/2762568/c-c-include-file-order-best-practices" target="_blank" rel="external">http://stackoverflow.com/questions/2762568/c-c-include-file-order-best-practices</a></li>
</ol>
<hr>
<h1 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h1><h2 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h2><ul>
<li>若是类文件，则与类名保持一致</li>
<li>若是C函数，则采用下划线分隔，因为本身C中就是用下划线分隔，不一致的话，在源码中如果涉及到该文件名，则可能需要转换规则<br>如单元测试中，对<code>inet-helper.h</code>进行测试，则测试套件名需要转换。</li>
</ul>
<h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><h3 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h3><p>下划线分隔</p>
<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>下划线分割，添加后缀’_’</p>
<h2 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h2><p>前缀<code>k</code>，骆驼命名，如<code>kDaysInWeek</code></p>
<h2 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h2><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p>函数名以小写骆驼命名，如<code>isEmpty()</code></p>
<h3 id="存取函数"><a href="#存取函数" class="headerlink" title="存取函数"></a>存取函数</h3><p>下划线分隔，如<code>get_num()</code></p>
<h2 id="宏命名"><a href="#宏命名" class="headerlink" title="宏命名"></a>宏命名</h2><p>大写，下划线分隔</p>
<hr>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="类组织"><a href="#类组织" class="headerlink" title="类组织"></a>类组织</h2><ul>
<li><p><code>public</code>，成员函数</p>
</li>
<li><p><code>public</code>，静态函数</p>
</li>
<li><p><code>private</code>，宏定义</p>
</li>
<li><p><code>private</code>，类型定义</p>
</li>
<li><p><code>private</code>，内部成员函数</p>
</li>
<li><p><code>private</code>，静态数据成员定义</p>
</li>
<li><p><code>private</code>，数据成员定义</p>
</li>
</ul>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.html" target="_blank" rel="external">http://google-styleguide.googlecode.com/svn/trunk/cppguide.html</a></li>
<li><a href="http://www.c-xx.com/ccc/ccc.php" target="_blank" rel="external">http://www.c-xx.com/ccc/ccc.php</a></li>
<li><a href="https://en.wikipedia.org/wiki/Underscore" target="_blank" rel="external">https://en.wikipedia.org/wiki/Underscore</a></li>
<li><a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)" target="_blank" rel="external">https://en.wikipedia.org/wiki/Naming_convention_(programming)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Hyphen" target="_blank" rel="external">https://en.wikipedia.org/wiki/Hyphen</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VC可变宏参数]]></title>
      <url>https://qianchenglong.github.io/2014/12/15/VC%E5%8F%AF%E5%8F%98%E5%AE%8F%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MACRO(s, ...) printf(s, ##__VA_ARGS__)</span></span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li><code>##</code>防止没有参数</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://msdn.microsoft.com/en-us/library/ms177415.aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/ms177415.aspx</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[win-api判断目录是否存在]]></title>
      <url>https://qianchenglong.github.io/2014/12/15/win-api%E5%88%A4%E6%96%AD%E7%9B%AE%E5%BD%95%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</url>
      <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PathIsDirectory(<span class="string">"log"</span>) == FALSE</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb773621(v=vs.85).aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/windows/desktop/bb773621(v=vs.85).aspx</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows获取文件名组成]]></title>
      <url>https://qianchenglong.github.io/2014/12/12/windows%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%90%8D%E7%BB%84%E6%88%90/</url>
      <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _splitpath(</span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">char</span> *path,</span><br><span class="line">   <span class="keyword">char</span> *drive,</span><br><span class="line">   <span class="keyword">char</span> *dir,</span><br><span class="line">   <span class="keyword">char</span> *fname,</span><br><span class="line">   <span class="keyword">char</span> *ext </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://msdn.microsoft.com/en-us/library/e737s6tf.aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/e737s6tf.aspx</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows获取程序名]]></title>
      <url>https://qianchenglong.github.io/2014/12/12/windows%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E5%90%8D/</url>
      <content type="html"><![CDATA[<pre><code>GetModuleFileName(0, fullname, sizeof(fullname))
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://stackoverflow.com/questions/124886/how-to-get-the-application-executable-name-in-windows-c-win32-or-c-cli" target="_blank" rel="external">http://stackoverflow.com/questions/124886/how-to-get-the-application-executable-name-in-windows-c-win32-or-c-cli</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ms683197%28VS.85%29.aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/ms683197%28VS.85%29.aspx</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows获取网络接口相关信息]]></title>
      <url>https://qianchenglong.github.io/2014/12/12/windows%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<h1 id="通过访问注册表"><a href="#通过访问注册表" class="headerlink" title="通过访问注册表"></a>通过访问注册表</h1><pre><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Tcpip\Parameters\Interfaces\{2A7DEE95-B437-444C-BB09-85E4EAD5E61C}
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.cnblogs.com/kkindof/archive/2012/06/08/2542337.html" target="_blank" rel="external">http://www.cnblogs.com/kkindof/archive/2012/06/08/2542337.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows获取网卡UUID]]></title>
      <url>https://qianchenglong.github.io/2014/12/12/windows%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1UUID/</url>
      <content type="html"><![CDATA[<h1 id="使用系统命令"><a href="#使用系统命令" class="headerlink" title="使用系统命令"></a>使用系统命令</h1><pre><code>getmac
</code></pre><p><img src="/img/windows获取网卡UUID_01.png" alt=""></p>
<h1 id="通过注册表"><a href="#通过注册表" class="headerlink" title="通过注册表"></a>通过注册表</h1><pre><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkCards
</code></pre><p><img src="/img/windows获取网卡UUID_02.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo添加网站统计]]></title>
      <url>https://qianchenglong.github.io/2014/12/12/hexo%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99%E7%BB%9F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>hexo-theme-chenall</li>
</ul>
<h1 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h1><ul>
<li><p><a href="http://tongji.baidu.com/" target="_blank" rel="external">注册</a></p>
</li>
<li><p>获取代码</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> _bdhmProtocol = ((<span class="string">"https:"</span> == <span class="built_in">document</span>.location.protocol) ? <span class="string">" https://"</span> : <span class="string">" http://"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">"%3Cscript src='"</span> + _bdhmProtocol + <span class="string">"hm.baidu.com/h.js%3F9d0320e39bf03e6be5dc92bf235c8869' type='text/javascript'%3E%3C/script%3E"</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改<code>hexo-theme-chenall\layout\_analytics\baidu.ejs</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> _bdhmProtocol = ((<span class="string">"https:"</span> == <span class="built_in">document</span>.location.protocol) ? <span class="string">" https://"</span> : <span class="string">" http://"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">"%3Cscript src='"</span> + _bdhmProtocol + <span class="string">"hm.baidu.com/h.js%3F9d0320e39bf03e6be5dc92bf235c8869' type='text/javascript'%3E%3C/script%3E"</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C第三方库]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/C%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://curl.haxx.se/" target="_blank" rel="external">curl</a></p>
</li>
<li><p><a href="http://packetfactory.openwall.net/projects/libnet/" target="_blank" rel="external">libnet</a></p>
<p>高层次的包构建工具</p>
</li>
<li><p><a href="https://github.com/QianChenglong/wingetopt" target="_blank" rel="external">wingetopt</a></p>
<p>windows版getopt</p>
</li>
<li><p><a href="http://www.winpcap.org/" target="_blank" rel="external">winpcap</a></p>
<p>windows抓包库</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++第三方库]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/C++%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://sourceforge.net/projects/log4cpp" target="_blank" rel="external">log4cpp</a></p>
</li>
<li><p><a href="https://github.com/open-source-parsers/jsoncpp" target="_blank" rel="external">jsoncpp</a></p>
</li>
<li><p><a href="http://www.boost.org" target="_blank" rel="external">boost</a></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://coolshell.info/c/c++/2014/12/13/c-open-project.html" target="_blank" rel="external">http://coolshell.info/c/c++/2014/12/13/c-open-project.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cmake编译常用选项]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/cmake%E7%BC%96%E8%AF%91%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h1 id="指定编译版本"><a href="#指定编译版本" class="headerlink" title="指定编译版本"></a>指定编译版本</h1><ul>
<li><p>常用</p>
<p>-DCMAKE_BUILD_TYPE=Debug | Release</p>
</li>
<li><p><a href="http://www.cmake.org/cmake/help/v3.0/variable/CMAKE_BUILD_TYPE.html" target="_blank" rel="external">手册</a></p>
</li>
</ul>
<h1 id="指定安装目录前缀"><a href="#指定安装目录前缀" class="headerlink" title="指定安装目录前缀"></a>指定安装目录前缀</h1><ul>
<li><p>常用</p>
<p>-DCMAKE_INSTALL_PREFIX=./ProjectName</p>
</li>
<li><p><a href="http://www.cmake.org/cmake/help/v3.0/variable/CMAKE_INSTALL_PREFIX.html" target="_blank" rel="external">手册</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows-80端口被占用]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/windows-80%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h1><pre><code>![](/img/windows-80端口被占用_01.jpg)
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.2cto.com/os/201204/126942.html" target="_blank" rel="external">http://www.2cto.com/os/201204/126942.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编译wingetopt]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/%E7%BC%96%E8%AF%91wingetopt/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>VS2010</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><p>下载<a href="https://github.com/QianChenglong/wingetopt" target="_blank" rel="external">QianChenglong/wingetopt</a></p>
</li>
<li><p>新建<code>build</code>，并进入</p>
</li>
<li><p>生成<code>Makefile</code></p>
<ul>
<li><p>debug</p>
<pre><code>cmake -G &quot;NMake Makefiles&quot; -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=./wingetopt ..
</code></pre></li>
<li><p>release</p>
<pre><code>cmake -G &quot;NMake Makefiles&quot; -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./wingetopt ..
</code></pre></li>
</ul>
</li>
<li><p>编译</p>
<pre><code>nmake
</code></pre></li>
<li><p>安装</p>
<pre><code>nmake install
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[禁止企业QQ提示手机安装应用]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/%E7%A6%81%E6%AD%A2%E4%BC%81%E4%B8%9AQQ%E6%8F%90%E7%A4%BA%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>先退出企业QQ</p>
</li>
<li><p>删除<code>%APPDATA%/tencent/QQEIM/Misc/com.tencent.wireless</code></p>
</li>
<li><p>新建文件，命名为<code>com.tencent.wireless</code></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MinGW-w64各版本地址]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/MinGW-w64%E5%90%84%E7%89%88%E6%9C%AC%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="http://sourceforge.net/projects/mingw-w64/" target="_blank" rel="external">sourceforge</a></p>
<p><a href="https://github.com/mirror/mingw-w64" target="_blank" rel="external">git</a></p>
<h1 id="自动下载工具"><a href="#自动下载工具" class="headerlink" title="自动下载工具"></a><a href="http://sourceforge.net/projects/mingw-w64/files/latest/download?source=files" target="_blank" rel="external">自动下载工具</a></h1><h1 id="MinGW-w64"><a href="#MinGW-w64" class="headerlink" title="MinGW-w64"></a>MinGW-w64</h1><h1 id="MinGW-w32"><a href="#MinGW-w32" class="headerlink" title="MinGW-w32"></a>MinGW-w32</h1><ul>
<li><a href="http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/4.8.2/threads-posix/dwarf/" target="_blank" rel="external">i686-4.8.2-release-posix-dwarf</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo添加微博秀]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/hexo%E6%B7%BB%E5%8A%A0%E5%BE%AE%E5%8D%9A%E7%A7%80/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="external">获得微博秀代码</a></p>
</li>
<li><p>复制到<code>layout/_widgets/sina_weiboshow.ejs</code></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.jianshu.com/p/70343b7c2fd3" target="_blank" rel="external">http://www.jianshu.com/p/70343b7c2fd3</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网站SEO]]></title>
      <url>https://qianchenglong.github.io/2014/12/11/%E7%BD%91%E7%AB%99SEO/</url>
      <content type="html"><![CDATA[<h1 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h1><ul>
<li><a href="https://www.google.com/webmasters" target="_blank" rel="external">google站长地址</a></li>
</ul>
<h1 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h1><ul>
<li><a href="http://www.sousuoyinqingtijiao.com/" target="_blank" rel="external">百度站长地址</a></li>
<li><a href="http://ping.baidu.com/ping.html" target="_blank" rel="external">百度PING</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-字符串编码转换]]></title>
      <url>https://qianchenglong.github.io/2014/12/10/python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>python使用<code>unicode</code>作为字符串内部编码，所有转换应通过<code>unicode</code>进行</p>
<p>编码(encode)，将中间对象(<code>unicode object</code>)转为其他编码对象</p>
<p>解码(decode)，将其他编码对象转为中间对象(<code>unicode object</code>)</p>
<h1 id="非unicode-object转unicode-object"><a href="#非unicode-object转unicode-object" class="headerlink" title="非unicode object转unicode object"></a>非<code>unicode object</code>转<code>unicode object</code></h1><p>前提必须清楚字符串是什么编码，假设<code>str</code>为<code>gbk</code>编码</p>
<pre><code>u = str.decode(&apos;gbk&apos;)
</code></pre><p>或</p>
<pre><code>u = unicode(str, &apos;gbk&apos;)
</code></pre><h1 id="unicode-object转非unicode-object"><a href="#unicode-object转非unicode-object" class="headerlink" title="unicode object转非unicode object"></a><code>unicode object</code>转非<code>unicode object</code></h1><p>假设转为<code>utf-8</code></p>
<pre><code>utf8 = u.encode(&apos;utf-8&apos;)
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-字符串常量编码]]></title>
      <url>https://qianchenglong.github.io/2014/12/10/python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><ul>
<li><p>str</p>
<p>‘string’</p>
</li>
</ul>
<p>该字符串常量编码取决于源文件编码</p>
<ul>
<li><p>unicode object</p>
<p>u’string’</p>
</li>
</ul>
<p>构造的对象为<code>unicode object</code>，若需转换为其他编码，无需<code>decode</code>操作</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-IDLE中文问题]]></title>
      <url>https://qianchenglong.github.io/2014/12/10/python-IDLE%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在IDLE中使用<code>u&#39;中文&#39;.encode(&#39;gbk&#39;)</code>报错</p>
<p><img src="/img/python-IDLE中文问题_01.png" alt=""></p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>IDLE本身BUG</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.csdn.net/mayflowers/article/details/1568852" target="_blank" rel="external">http://blog.csdn.net/mayflowers/article/details/1568852</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[win下编译libcurl]]></title>
      <url>https://qianchenglong.github.io/2014/12/10/win%E4%B8%8B%E7%BC%96%E8%AF%91libcurl/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>VS2010</li>
<li><a href="https://www.openssl.org/source/" target="_blank" rel="external">openssl-1.0.1j</a></li>
<li>curl-7.39.0</li>
</ul>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul>
<li><p>下载<a href="http://curl.haxx.se/" target="_blank" rel="external">官网</a>，解压</p>
</li>
<li><p>将<strong>编译好的</strong><code>openssl</code>({ iLink title:win下编译openssl %})拷贝到<code>../deps</code></p>
<p><img src="/img/win下编译libcurl_01.png" alt=""></p>
</li>
<li><p>进入<code>winbuild</code>目录</p>
</li>
<li><p>编译(具体参考<code>winbuild/BUILD.WINDOWS.txt</code>)</p>
<ul>
<li><p>release</p>
<p>nmake /f Makefile.vc mode=dll VC=10 WITH_SSL=dll ENABLE_IDN=no</p>
</li>
<li><p>debug</p>
<p>nmake /f Makefile.vc mode=dll VC=10 WITH_SSL=dll ENABLE_IDN=no DEBUG=yes</p>
</li>
</ul>
</li>
<li><p>输出目录为<code>builds</code></p>
<p><img src="/img/win下编译libcurl_02.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[win下编译openssl]]></title>
      <url>https://qianchenglong.github.io/2014/12/10/win%E4%B8%8B%E7%BC%96%E8%AF%91openssl/</url>
      <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>perl</li>
<li>VC++</li>
</ul>
<h2 id="编译-详细过程参考INSTALL-W32"><a href="#编译-详细过程参考INSTALL-W32" class="headerlink" title="编译(详细过程参考INSTALL.W32)"></a>编译(详细过程参考<code>INSTALL.W32</code>)</h2><ul>
<li><p>生成<code>Makefile</code></p>
<pre><code>perl Configure VC-WIN32 no-asm --prefix=c:/some/openssl/dir
ms\do_ms
</code></pre></li>
<li><p>编译</p>
<pre><code>nmake -f ms\ntdll.mak
</code></pre></li>
<li><p>测试</p>
<pre><code>nmake -f ms\ntdll.mak test
</code></pre></li>
<li><p>安装</p>
<pre><code>nmake -f ms\ntdll.mak install
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[svn撤销删除]]></title>
      <url>https://qianchenglong.github.io/2014/12/09/svn%E6%92%A4%E9%94%80%E5%88%A0%E9%99%A4/</url>
      <content type="html"><![CDATA[<ul>
<li><p>通过<code>svn delete</code>删除的文件或目录</p>
<pre><code>svn revert DeletedDir --recursive
</code></pre></li>
<li><p>手动删除或<code>rmdir</code></p>
<pre><code>svn update DeletedDir
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1></li>
</ul>
<ol>
<li><a href="http://stackoverflow.com/questions/1786687/svn-undo-delete-before-commit" target="_blank" rel="external">http://stackoverflow.com/questions/1786687/svn-undo-delete-before-commit</a></li>
<li><a href="http://svnbook.red-bean.com/nightly/en/svn.ref.svn.c.revert.html" target="_blank" rel="external">http://svnbook.red-bean.com/nightly/en/svn.ref.svn.c.revert.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决tortoisesvn和dropbox图标冲突]]></title>
      <url>https://qianchenglong.github.io/2014/12/09/%E8%A7%A3%E5%86%B3tortoisesvn%E5%92%8Cdropbox%E5%9B%BE%E6%A0%87%E5%86%B2%E7%AA%81/</url>
      <content type="html"><![CDATA[<p>冲突导致SVN项目内文件图标无法显示</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul>
<li><p>下载修改工具<a href="http://www.nirsoft.net/utils/shexview.html" target="_blank" rel="external">http://www.nirsoft.net/utils/shexview.html</a></p>
</li>
<li><p>禁用<code>dropbox</code>图标覆盖</p>
<p><img src="/img/解决tortoisesvn和dropbox图标冲突_01.png" alt=""></p>
</li>
<li><p>重启<code>explorer.exe</code>或注销或重启即可</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://superuser.com/questions/809529/which-dropbox-icon-is-for-which-icon-overlay-identifier-name" target="_blank" rel="external">http://superuser.com/questions/809529/which-dropbox-icon-is-for-which-icon-overlay-identifier-name</a></li>
<li><a href="http://www.oliverpearmain.com/blog/dropbox-and-tortoise-svnsubversion-icon-overlays-in-harmony/" target="_blank" rel="external">http://www.oliverpearmain.com/blog/dropbox-and-tortoise-svnsubversion-icon-overlays-in-harmony/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最短域名]]></title>
      <url>https://qianchenglong.github.io/2014/12/09/%E6%9C%80%E7%9F%AD%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>最短域名，减少网络诊断<code>ping</code>命令长度</p>
<ul>
<li><p>g.cn</p>
</li>
<li><p>g.com</p>
</li>
<li><p>z.com</p>
</li>
<li><p>q.com</p>
</li>
<li><p>x.com</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://gawker.com/318368/the-shortest-domain-name-ever" target="_blank" rel="external">http://gawker.com/318368/the-shortest-domain-name-ever</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jsoncpp编译安装]]></title>
      <url>https://qianchenglong.github.io/2014/12/09/jsoncpp%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>VC++(<em>改用其他编译器，下面的Makefile需要改成对应的</em>)</li>
<li>cmake</li>
</ul>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul>
<li><p>下载<a href="https://github.com/open-source-parsers/jsoncpp" target="_blank" rel="external">官网</a></p>
</li>
<li><p>解压，在根目录新建<code>build</code>目录</p>
</li>
<li><p>[可选]<code>debug</code>库添加<code>d</code>后缀</p>
<p>编辑根目录下<code>CMakelists.txt</code>，添加一行</p>
<pre><code>SET(CMAKE_DEBUG_POSTFIX d)
</code></pre></li>
<li><p><code>cd build</code></p>
</li>
<li><p>生成<code>makefile</code></p>
<ul>
<li><p>shared-debug</p>
<pre><code>cmake -DCMAKE_BUILD_TYPE=debug -DJSONCPP_LIB_BUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=./jsoncpp-0.7.0-shared-debug -G &quot;NMake Makefiles&quot; ..
</code></pre></li>
<li><p>shared-release</p>
<pre><code>cmake -DCMAKE_BUILD_TYPE=release -DJSONCPP_LIB_BUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=./jsoncpp-0.7.0-shared-release -G &quot;NMake Makefiles&quot; ..
</code></pre></li>
<li><p>static-debug</p>
<pre><code>cmake -DCMAKE_BUILD_TYPE=debug -DJSONCPP_LIB_BUILD_SHARED=OFF -DCMAKE_INSTALL_PREFIX=./jsoncpp-0.7.0-static-debug -G &quot;NMake Makefiles&quot; ..
</code></pre></li>
<li><p>static-release</p>
<pre><code>cmake -DCMAKE_BUILD_TYPE=release -DJSONCPP_LIB_BUILD_SHARED=OFF -DCMAKE_INSTALL_PREFIX=./jsoncpp-0.7.0-static-release -G &quot;NMake Makefiles&quot; ..
</code></pre></li>
</ul>
</li>
<li><p>编译</p>
<pre><code>nmake
</code></pre></li>
<li><p>安装</p>
<pre><code>nmake install
</code></pre></li>
<li><p>生成<code>doxygen</code>文档</p>
<pre><code>python doxybuild.py --doxygen=&quot;d:\Program Files\doxygen\bin\doxygen.EXE&quot; --open
</code></pre></li>
</ul>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li>为什么使用<code>nmake</code>(<code>/MT</code>)和<code>vs2010</code>(<code>/MD</code>)编译链接的C运行库版本不一致？</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://github.com/open-source-parsers/jsoncpp" target="_blank" rel="external">https://github.com/open-source-parsers/jsoncpp</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim十六进制编辑]]></title>
      <url>https://qianchenglong.github.io/2014/12/08/vim%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E7%BC%96%E8%BE%91/</url>
      <content type="html"><![CDATA[<h2 id="使用十六进制编辑"><a href="#使用十六进制编辑" class="headerlink" title="使用十六进制编辑"></a>使用十六进制编辑</h2><pre><code>:%!xxd
</code></pre><h2 id="返回到文本模式编辑"><a href="#返回到文本模式编辑" class="headerlink" title="返回到文本模式编辑"></a>返回到文本模式编辑</h2><pre><code>:%!xxd -r
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-str类型和unicode类型]]></title>
      <url>https://qianchenglong.github.io/2014/12/08/python-str%E7%B1%BB%E5%9E%8B%E5%92%8Cunicode%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>str object和unicode object是两种不同的类型</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符组成的序列</p>
<p>而字符是经过编码的，常见的编码如ASCII，GB2312，UTF-8等等</p>
<h3 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h3><p>引号括起来的字符序列</p>
<h2 id="unicode字符串"><a href="#unicode字符串" class="headerlink" title="unicode字符串"></a>unicode字符串</h2><p>unicode码元序列</p>
<p>在python里，16-bit的unicode，对应的是ucs2编码。32-bit对应的是ucs4编码</p>
<p>通过<code>sys.maxunicode</code>可以查看当前Python的unicode编码</p>
<h3 id="词法-1"><a href="#词法-1" class="headerlink" title="词法"></a>词法</h3><p>引号括起来的字符序列，前面加<code>u</code>，如<code>u&#39;Hello world&#39;</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" target="_blank" rel="external">https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange</a></li>
<li><a href="http://blog.csdn.net/ktb2007/article/details/3876429" target="_blank" rel="external">http://blog.csdn.net/ktb2007/article/details/3876429</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符编码中的相关概念]]></title>
      <url>https://qianchenglong.github.io/2014/12/08/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E4%B8%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p>将字符集中的字符用另一集合中的对象来表示，以便存储或传输。</p>
<p>从数学角度上说，就是一种映射，更准确地说，是一种单射函数，具有唯一确定性，但不存在多个字符映射为同一个码元！</p>
<p>常见的编码方式有，ASCII，摩尔斯电码等。</p>
<hr>
<p><em>参考：</em></p>
<ol>
<li><a href="http://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0" target="_blank" rel="external">维基-函数</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E6%98%A0%E5%B0%84" target="_blank" rel="external">维基-映射</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" target="_blank" rel="external">维基-字符编码</a></li>
</ol>
<h1 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h1><p>一个基本信息单位，如字母，数字，标点符号，控制字符等。</p>
<hr>
<p><em>参考：</em></p>
<ol>
<li><a href="http://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6" target="_blank" rel="external">维基-字符</a></li>
</ol>
<h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><p>字符的集合</p>
<h1 id="代码页"><a href="#代码页" class="headerlink" title="代码页"></a>代码页</h1><p>字符编码的别名</p>
<hr>
<p><em>参考：</em></p>
<ol>
<li><a href="http://en.wikipedia.org/wiki/Code_page" target="_blank" rel="external">http://en.wikipedia.org/wiki/Code_page</a></li>
</ol>
<h1 id="码位"><a href="#码位" class="headerlink" title="码位"></a>码位</h1><p>字符在编码表中的值，一般为非负整数。</p>
<p><strong>注：</strong></p>
<ul>
<li>并不直接对应在计算机中的表达，如一个字符在unicode字符集中的码位，具体怎么表示，取决于编码方式(UTF-8，UTF-16…)</li>
</ul>
<h1 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h1><p>已编码的字符集中占用最小的比特数，如UTF-8为8，UTF-16为16。</p>
<h1 id="字形"><a href="#字形" class="headerlink" title="字形"></a>字形</h1><p>一个可以辨认的抽象的图形符号，它不依赖于任何特定的设计，即<strong>字符的构成形式</strong></p>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://zh.wikipedia.org/wiki/%E5%AD%97%E5%BD%A2" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E5%AD%97%E5%BD%A2</a></li>
<li><a href="https://docs.python.org/2/howto/unicode.html" target="_blank" rel="external">https://docs.python.org/2/howto/unicode.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-编码]]></title>
      <url>https://qianchenglong.github.io/2014/12/08/python-%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="unicode内部编码实现"><a href="#unicode内部编码实现" class="headerlink" title="unicode内部编码实现"></a>unicode内部编码实现</h1><ul>
<li><p>python2 UCS2(编译默认，–enable-unicode=ucs2)</p>
<pre><code>&gt;&gt;&gt; sys.maxunicode
65535
</code></pre></li>
<li><p>python3 UCS4(编译默认，–enable-unicode=ucs4)</p>
<pre><code>&gt;&gt;&gt; sys.maxunicode
1114111
</code></pre></li>
</ul>
<h1 id="相关数据类型"><a href="#相关数据类型" class="headerlink" title="相关数据类型"></a>相关数据类型</h1><h2 id="字节序列-bytes"><a href="#字节序列-bytes" class="headerlink" title="字节序列(bytes)"></a>字节序列(bytes)</h2><p>一串由0到255之间的数字组成的序列叫做bytes对象</p>
<ul>
<li><p>用来存储经过某种编码方式(如<code>UTF-8</code>)的<code>unicode</code>字符串</p>
</li>
<li><p>转换为字符串时,需要知道该<code>bytes</code>的编码</p>
</li>
</ul>
<h2 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串(string)"></a>字符串(string)</h2><ul>
<li><p>字符是一种抽象</p>
</li>
<li><p>一个不可变(immutable)的Unicode编码的字符序列叫做string</p>
</li>
<li><p>存储对应的UNICODE编码值</p>
</li>
</ul>
<h1 id="python源文件编码方式"><a href="#python源文件编码方式" class="headerlink" title="python源文件编码方式"></a>python源文件编码方式</h1><ul>
<li><p>python2 默认编码为ASCII，若为其他编码，需要在文件头注释说明(<code>coding: XXX</code>)</p>
</li>
<li><p>python3 默认UTF-8</p>
</li>
</ul>
<h1 id="编码转换-str-lt-gt-bytes"><a href="#编码转换-str-lt-gt-bytes" class="headerlink" title="编码转换(str &lt;=&gt; bytes)"></a>编码转换(str &lt;=&gt; bytes)</h1><h2 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h2><ul>
<li><p>string =&gt; bytes</p>
<pre><code>a_string = &apos;深入 Python&apos;
by = a_string.encode(&apos;utf-8&apos;)
len(by)
by = a_string.encode(&apos;gb18030&apos;)
len(by)
</code></pre></li>
<li><p>bytes =&gt; string</p>
<pre><code>a_string = &apos;深入 Python&apos;
by = a_string.encode(&apos;utf-8&apos;)
by.decode(&apos;utf-8&apos;)
</code></pre></li>
</ul>
<p>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/1446347/how-to-find-out-if-python-is-compiled-with-ucs-2-or-ucs-4" target="_blank" rel="external">http://stackoverflow.com/questions/1446347/how-to-find-out-if-python-is-compiled-with-ucs-2-or-ucs-4</a></li>
</ol>
<h2 id="获取系统编码参数"><a href="#获取系统编码参数" class="headerlink" title="获取系统编码参数"></a>获取系统编码参数</h2><p>系统的缺省编码(一般就是ascii)：sys.getdefaultencoding()</p>
<p>系统当前的编码：locale.getdefaultlocale()</p>
<p>系统代码中临时被更改的编码（通过locale.setlocale(locale.LC_ALL,“zh_CN.UTF-8″)）：locale.getlocale()</p>
<p>文件系统的编码：sys.getfilesystemencoding()</p>
<p>终端的输入编码：sys.stdin.encoding</p>
<p>终端的输出编码：sys.stdout.encoding</p>
<h2 id="文件编码与字符串编码"><a href="#文件编码与字符串编码" class="headerlink" title="文件编码与字符串编码"></a>文件编码与字符串编码</h2><p>字符床常量编码取决于文件编码</p>
<ul>
<li><p>默认编码为ASCII</p>
</li>
<li><p>文件头显式指定编码，需要文件本身编码与该声明编码一致</p>
<pre><code># Coding: utf-8
</code></pre></li>
</ul>
<p>定义<code>UNICODE</code>字符串，在字符床常量前加<code>u</code></p>
<h2 id="判断字符串编码"><a href="#判断字符串编码" class="headerlink" title="判断字符串编码"></a>判断字符串编码</h2><ul>
<li><p><code>type(str)</code></p>
</li>
<li><p><code>isinstance()</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'default encoding: '</span> , sys.getdefaultencoding()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stdout encoding: '</span> , sys.stdout.encoding</span><br><span class="line">s=<span class="string">'中文'</span></span><br><span class="line"><span class="keyword">if</span> isinstance(s, str):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'s is a string object'</span></span><br><span class="line"><span class="keyword">elif</span> isinstance(s, unicode):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'s is a unicode object'</span></span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="SyntaxError-Non-ASCII-character-39-xe4-39-in-file-XXX"><a href="#SyntaxError-Non-ASCII-character-39-xe4-39-in-file-XXX" class="headerlink" title="SyntaxError: Non-ASCII character &#39;\xe4&#39; in file XXX"></a><code>SyntaxError: Non-ASCII character &#39;\xe4&#39; in file XXX</code></h3><ul>
<li>原因</li>
</ul>
<p>文件编码不是<code>ASCII</code>编码，但文件开头未指定文件编码</p>
<ul>
<li>解决</li>
</ul>
<p>在文件开头指定文件本身编码即可.(文件最好采用<code>utf-8</code>编码)</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://woodpecker.org.cn/diveintopython3/strings.html" target="_blank" rel="external">http://woodpecker.org.cn/diveintopython3/strings.html</a></li>
<li><a href="https://docs.python.org/2/howto/unicode.html" target="_blank" rel="external">https://docs.python.org/2/howto/unicode.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-cgi常见错误]]></title>
      <url>https://qianchenglong.github.io/2014/12/08/python-cgi%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h2 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h2><h3 id="CGI不能执行"><a href="#CGI不能执行" class="headerlink" title="CGI不能执行"></a>CGI不能执行</h3><ul>
<li><p>语法有问题</p>
</li>
<li><p>依赖未解决</p>
</li>
</ul>
<h3 id="输出不正确"><a href="#输出不正确" class="headerlink" title="输出不正确"></a>输出不正确</h3><ul>
<li><p>输出内容不符合CGI规范</p>
<p>常见问题是，输出头不合法</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[判断PC在交换机或路由器中的端口]]></title>
      <url>https://qianchenglong.github.io/2014/12/08/%E5%88%A4%E6%96%ADPC%E5%9C%A8%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%88%96%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%AD%E7%9A%84%E7%AB%AF%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h2 id="情景描述"><a href="#情景描述" class="headerlink" title="情景描述"></a>情景描述</h2><p>路由器下接多台交换机，不同交换机所属VLAN不同，1台PC被插到非目标交换机当中。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何找出PC在交换机中的端口？</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li><p>记录当前网络端口状态</p>
<p>采用手机拍照，拍取当前PC所属交换机<br><img src="/img/判断PC在交换机或路由器中的端口_01.jpg" alt=""></p>
</li>
<li><p>拔出PC机箱后网线</p>
</li>
<li><p>与拍照比对</p>
<p><strong>拍照时亮的端口，断开PC后，不亮的端口即为PC所插交换机端口</strong></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows访问网络打印机]]></title>
      <url>https://qianchenglong.github.io/2014/12/08/windows%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E6%89%93%E5%8D%B0%E6%9C%BA/</url>
      <content type="html"><![CDATA[<ul>
<li><p>输入网络打印机路径(通过IP访问)</p>
<pre><code>\\xxx.xxx.xxx.xxx
</code></pre></li>
<li><p>安装打印机驱动</p>
<p>双击打印机图标</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TortoiseSVN修改SVN仓库路径]]></title>
      <url>https://qianchenglong.github.io/2014/12/06/TortoiseSVN%E4%BF%AE%E6%94%B9SVN%E4%BB%93%E5%BA%93%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<ul>
<li><p>右击【项目根目录】</p>
</li>
<li><p>点击菜单</p>
</li>
</ul>
<p><img src="/img/TortoiseSVN修改SVN仓库路径-01.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim实用命令简记]]></title>
      <url>https://qianchenglong.github.io/2014/12/05/vim%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h2><ul>
<li><code>]}</code> 移动到复合语句尾</li>
</ul>
<h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><ul>
<li><code>&lt;C-o&gt;</code> 执行一条命令后返回到插入模式</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python判断字符串是否为空]]></title>
      <url>https://qianchenglong.github.io/2014/12/05/python%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
      <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>变量为字符串类型(优雅的方式)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> string:</span><br><span class="line">    print(<span class="string">'not empty'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'empty'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>变量类型不确定</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> string == <span class="string">''</span>:</span><br><span class="line">    print(<span class="string">'not empty'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'empty'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" target="_blank" rel="external">https://docs.python.org/2/library/stdtypes.html#truth-value-testing</a></li>
<li><a href="http://stackoverflow.com/questions/9573244/most-elegant-way-to-check-if-the-string-is-empty-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/9573244/most-elegant-way-to-check-if-the-string-is-empty-in-python</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python添加模块搜索路径]]></title>
      <url>https://qianchenglong.github.io/2014/12/05/python%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append( &lt;path to dirFoo&gt; )</span><br><span class="line"><span class="keyword">import</span> Bar</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://stackoverflow.com/questions/279237/import-a-module-from-a-relative-path" target="_blank" rel="external">http://stackoverflow.com/questions/279237/import-a-module-from-a-relative-path</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-字符串和字典转换]]></title>
      <url>https://qianchenglong.github.io/2014/12/05/python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E5%85%B8%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h2 id="字典-gt-字符串"><a href="#字典-gt-字符串" class="headerlink" title="字典 =&gt; 字符串"></a>字典 =&gt; 字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>, <span class="string">'three'</span>: &#123;<span class="string">'three.1'</span>: <span class="number">3.1</span>, <span class="string">'three.2'</span>: <span class="number">3.2</span> &#125;&#125;</span><br><span class="line">str1 = str(dict1)</span><br><span class="line">print(str1)</span><br></pre></td></tr></table></figure>
<h2 id="字符串-gt-字典"><a href="#字符串-gt-字典" class="headerlink" title="字符串 =&gt; 字典"></a>字符串 =&gt; 字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>, <span class="string">'three'</span>: &#123;<span class="string">'three.1'</span>: <span class="number">3.1</span>, <span class="string">'three.2'</span>: <span class="number">3.2</span> &#125;&#125;</span><br><span class="line">str1 = str(dict1)</span><br><span class="line"></span><br><span class="line">dict2 = eval(str1)</span><br><span class="line">print(dict2)</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://stackoverflow.com/questions/4547274/convert-a-python-dict-to-a-string-and-back" target="_blank" rel="external">http://stackoverflow.com/questions/4547274/convert-a-python-dict-to-a-string-and-back</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python获取IP对应的MAC]]></title>
      <url>https://qianchenglong.github.io/2014/12/05/python%E8%8E%B7%E5%8F%96IP%E5%AF%B9%E5%BA%94%E7%9A%84MAC/</url>
      <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mac_from_ip</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Return the mac from ip in windows.</span><br><span class="line">    """</span></span><br><span class="line">    <span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line">    Popen([<span class="string">"ping"</span>, <span class="string">"-c 1"</span>, ip], stdout=PIPE, stderr=PIPE)</span><br><span class="line">    pid = Popen([<span class="string">"arp"</span>, <span class="string">"-a"</span>, ip], stdout=PIPE, stderr=PIPE)</span><br><span class="line">    s = pid.communicate()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> IOError(<span class="string">"can't get mac from ip(%s)!"</span> % ip)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mac = re.search(<span class="string">r"(([a-f\d]&#123;1,2&#125;\-)&#123;5&#125;[a-f\d]&#123;1,2&#125;)"</span>, s).groups()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">raise</span> IOError(<span class="string">"can't find mac from ip(%s)!"</span> % ip)</span><br><span class="line">    <span class="keyword">return</span> mac</span><br><span class="line"></span><br><span class="line">print(get_mac_from_ip(<span class="string">'100.100.102.300'</span>))</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://snipplr.com/view/70832/" target="_blank" rel="external">http://snipplr.com/view/70832/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优秀软件列表]]></title>
      <url>https://qianchenglong.github.io/2014/12/04/%E4%BC%98%E7%A7%80%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="文件工具"><a href="#文件工具" class="headerlink" title="文件工具"></a>文件工具</h1><ul>
<li><p><a href="http://www.scootersoftware.com/" target="_blank" rel="external">BeyondCompare</a></p>
<p>文件差异比较工具</p>
</li>
</ul>
<h1 id="桌面工具"><a href="#桌面工具" class="headerlink" title="桌面工具"></a>桌面工具</h1><ul>
<li><p><a href="https://github.com/chenall/ALMRun/" target="_blank" rel="external">ALMrun</a></p>
<p>快速启动工具</p>
</li>
<li><p><a href="http://cn.ejie.me/" target="_blank" rel="external">Clover</a></p>
<p>Clover是Windows Explorer资源管理器的一个扩展，为其增加类似谷歌Chrome浏览器的多标签页功能。</p>
</li>
<li><p><a href="http://dexpot.de/" target="_blank" rel="external">dexport</a></p>
<p>Windows虚拟桌面</p>
</li>
<li><p><a href="https://www.dropbox.com" target="_blank" rel="external">dropbox</a></p>
<p>网盘</p>
</li>
<li><p><a href="http://nionsoftware.com/dbpahk/" target="_blank" rel="external">DropboxPortableAHK</a></p>
<p>制作dropbox绿色版</p>
</li>
<li><p><a href="https://www.mythicsoft.com/filelocatorpro" target="_blank" rel="external">EveryThing</a></p>
<p>文件搜索工具，根据文件名等信息</p>
</li>
<li><p><a href="http://www.stardock.com/products/fences/" target="_blank" rel="external">fences</a></p>
<p>Windows桌面图标管理</p>
</li>
<li><p><a href="http://www.telerik.com/fiddler" target="_blank" rel="external">fiddler</a></p>
<p>web调试代理</p>
</li>
<li><p><a href="https://www.mythicsoft.com/filelocatorpro" target="_blank" rel="external">FileLocator</a></p>
<p>文件全文搜索</p>
</li>
</ul>
<ul>
<li><p><a href="https://justgetflux.com/" target="_blank" rel="external">f.lux</a></p>
<p>随时间调节显示器色温</p>
</li>
<li><p><a href="">keytweak</a></p>
<p>快捷键修改工具</p>
</li>
<li><p><a href="http://rainmeter.net/" target="_blank" rel="external">rainmeter</a></p>
<p>桌面自定义工具</p>
</li>
<li><p><a href="https://www.virtualbox.org/" target="_blank" rel="external">VirtualBox</a></p>
<p>开源免费虚拟机</p>
</li>
<li><p><a href="http://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="external">PotPlayer</a></p>
<p>PotPlayer是 KMPlayer作者新作品，全格式、硬件加速，口碑俱佳</p>
</li>
</ul>
<h1 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h1><ul>
<li><p><a href="http://svchostviewer.codeplex.com/" target="_blank" rel="external">svchost viewer</a></p>
<p>svchost进程查看</p>
</li>
<li><p><a href="http://sourceforge.net/projects/ophcrack/" target="_blank" rel="external">ophcrack</a></p>
<p>windows密码破解</p>
</li>
<li><p>grub4dos</p>
<p>多系统引导工具</p>
<ul>
<li><p><a href="http://grub4dos.chenall.net/" target="_blank" rel="external">二进制下载</a></p>
</li>
<li><p><a href="http://grub4dos.chenall.net/" target="_blank" rel="external">git</a></p>
</li>
</ul>
</li>
</ul>
<h1 id="nirsoft"><a href="#nirsoft" class="headerlink" title="nirsoft"></a>nirsoft</h1><ul>
<li><p><a href="http://www.nirsoft.net/utils/cports.html" target="_blank" rel="external">cports</a></p>
<p>查看tcp/udp端口监听情况</p>
</li>
<li><p><a href="http://www.nirsoft.net/utils/network_interfaces.html" target="_blank" rel="external">NetworkInterfacesView </a></p>
<p>查看网卡信息</p>
</li>
<li><p><a href="http://www.nirsoft.net/utils/what_run_in_startup.html" target="_blank" rel="external">whatinstartup</a></p>
<p>开机启动管理</p>
</li>
<li><p><a href="http://www.nirsoft.net/utils/file_types_manager.html" target="_blank" rel="external">FileTypesMan</a></p>
<p>文件类型管理</p>
</li>
</ul>
<h1 id="网络类"><a href="#网络类" class="headerlink" title="网络类"></a>网络类</h1><ul>
<li><p><a href="https://code.google.com/p/sokit/" target="_blank" rel="external">sokit</a></p>
<p>网络测试工具，可以用来接收，发送或者转发TCP/UDP数据包，使用C++语言，QT基础库开发（QT SDK v4.7）。在32位windows及linux系统下编译通过。</p>
</li>
<li><p><a href="https://www.wireshark.org/" target="_blank" rel="external">wireshark</a></p>
<p>抓包工具</p>
</li>
<li><p><a href="http://tftpd32.jounin.net/" target="_blank" rel="external">tftpd32</a></p>
<p>tftp客户端，服务器, DHCP服务器</p>
</li>
<li><p><a href="http://winscp.net/eng/index.php" target="_blank" rel="external">scp</a>[windows]</p>
<p>scp, sftp, ftp客户端</p>
</li>
<li><p><a href="https://www.proxifier.com/" target="_blank" rel="external">proxifier</a></p>
<p>windows全局代理工具</p>
</li>
<li><p><a href="">webzip</a></p>
<p>整站下载工具</p>
</li>
</ul>
<h1 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h1><ul>
<li><p><a href="https://www.teamviewer.com" target="_blank" rel="external">teamviewer</a></p>
<p>穿透内网和防火墙的远程控制!</p>
</li>
</ul>
<h1 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h1><ul>
<li><p><a href="http://johnmacfarlane.net/pandoc/" target="_blank" rel="external">pandoc</a></p>
<p>markdown编译器</p>
</li>
</ul>
<h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><ul>
<li><p><a href="http://staruml.io/" target="_blank" rel="external">StarUML</a></p>
<p>uml工具</p>
</li>
<li><p><a href="http://www.graphviz.org/" target="_blank" rel="external">GraphViz</a></p>
<p>用于绘制DOT语言脚本描述的图形</p>
</li>
</ul>
<h1 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h1><ul>
<li><p><a href="http://clang.llvm.org/" target="_blank" rel="external">clang</a></p>
<p>C/C++编译器</p>
</li>
<li><p><a href="http://www.windbg.org/" target="_blank" rel="external">windbg</a></p>
<p>windows调试工具</p>
</li>
<li><p><a href="https://code.google.com/p/gtest-gbar/" target="_blank" rel="external">gtest-gbar</a></p>
<p>google C++测试框架UI工具</p>
</li>
<li><p><a href="http://www.valgrind.org/" target="_blank" rel="external">valgrind</a></p>
<p>内存泄漏检测</p>
</li>
<li><p><a href="http://tortoisesvn.net/downloads.zh.html" target="_blank" rel="external">tortoiseSVN</a></p>
<p>windows下SVN GUI工具</p>
</li>
<li><p><a href="http://www.dependencywalker.com/" target="_blank" rel="external">Dependency Walker</a></p>
<p>dll依赖查询</p>
</li>
<li><p><a href="http://include-what-you-use.org/" target="_blank" rel="external">include-what-you-use</a></p>
<p>自动修正c/c++头文件</p>
</li>
<li><p><a href="https://github.com/AlDanial/cloc" target="_blank" rel="external">cloc</a></p>
<p>统计代码行数</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-json操作]]></title>
      <url>https://qianchenglong.github.io/2014/12/04/python-json%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="解码-decoding-："><a href="#解码-decoding-：" class="headerlink" title="解码(decoding)："></a>解码(decoding)：</h2><p>把Json格式字符串解码转换成Python对象</p>
<ul>
<li>从字符串中</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">'&#123;"id": 1, "name": "Tom"&#125;'</span></span><br><span class="line">json_data = json.loads(data)</span><br></pre></td></tr></table></figure>
<ul>
<li>从文件流</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">'&#123;"id": 1, "name": "Tom"&#125;'</span></span><br><span class="line">json_data = json.load(data)</span><br></pre></td></tr></table></figure>
<h2 id="编码-encoding-："><a href="#编码-encoding-：" class="headerlink" title="编码(encoding)："></a>编码(encoding)：</h2><p>把一个Python对象编码转换成Json字符串</p>
<ul>
<li>转为<code>python</code>字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps([<span class="string">'foo'</span>, &#123;<span class="string">'bar'</span>: (<span class="string">'baz'</span>, <span class="keyword">None</span>, <span class="number">1.0</span>, <span class="number">2</span>)&#125;])</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.python.org/2/library/json.html" target="_blank" rel="external">https://docs.python.org/2/library/json.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python调试手段]]></title>
      <url>https://qianchenglong.github.io/2014/12/04/python%E8%B0%83%E8%AF%95%E6%89%8B%E6%AE%B5/</url>
      <content type="html"><![CDATA[<h2 id="发生异常时，自动打开IPython"><a href="#发生异常时，自动打开IPython" class="headerlink" title="发生异常时，自动打开IPython"></a>发生异常时，自动打开<code>IPython</code></h2><ul>
<li><code>crash_on_ipy.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionHook</span>:</span></span><br><span class="line">    instance = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">from</span> IPython.core <span class="keyword">import</span> ultratb</span><br><span class="line">            self.instance = ultratb.FormattedTB(mode=<span class="string">'Plain'</span>,</span><br><span class="line">                                                color_scheme=<span class="string">'Linux'</span>, call_pdb=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.instance(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">sys.excepthook = ExceptionHook()</span><br></pre></td></tr></table></figure>
<ul>
<li>将<code>crash_on_ipy.py</code>放到项目中，在需要使用该功能的地方<code>import crash_on_ipy</code></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.zhihu.com/question/21572891" target="_blank" rel="external">http://www.zhihu.com/question/21572891</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows.h和winsock2.h冲突]]></title>
      <url>https://qianchenglong.github.io/2014/12/04/windows.h%E5%92%8Cwinsock2.h%E5%86%B2%E7%AA%81/</url>
      <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>在包含<code>WinSock2.h</code>之前包含了<code>Windows.h</code></li>
<li>而<code>Windows.h</code>包含了<code>WinSock.h</code></li>
<li>而<code>WinSock.h</code>和<code>WinSock2.h</code>不兼容！</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>第一种(<strong>优先使用</strong>)</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二种</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python文件删除]]></title>
      <url>https://qianchenglong.github.io/2014/12/03/python%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4/</url>
      <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li><p><code>os.remove()</code></p>
</li>
<li><p><code>shutil.re</code></p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.python.org/2/library/os.html#os.remove" target="_blank" rel="external">https://docs.python.org/2/library/os.html#os.remove</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python文件重命名]]></title>
      <url>https://qianchenglong.github.io/2014/12/03/python%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D/</url>
      <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li><p><code>shutil.move()</code></p>
</li>
<li><p><code>os.rename()</code></p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.python.org/2/library/shutil.html#shutil.move" target="_blank" rel="external">https://docs.python.org/2/library/shutil.html#shutil.move</a></li>
<li><a href="https://docs.python.org/2/library/os.html#os.rename" target="_blank" rel="external">https://docs.python.org/2/library/os.html#os.rename</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python-cgi读取表单数据]]></title>
      <url>https://qianchenglong.github.io/2014/12/03/python-cgi%E8%AF%BB%E5%8F%96%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">form = cgi.FieldStorage()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"name"</span> <span class="keyword">not</span> <span class="keyword">in</span> form <span class="keyword">or</span> <span class="string">"addr"</span> <span class="keyword">not</span> <span class="keyword">in</span> form:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&lt;H1&gt;Error&lt;/H1&gt;"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Please fill in the name and addr fields."</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"&lt;p&gt;name:"</span>, form[<span class="string">"name"</span>].value</span><br><span class="line"><span class="keyword">print</span> <span class="string">"&lt;p&gt;addr:"</span>, form[<span class="string">"addr"</span>].value</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.python.org/2/library/cgi.html" target="_blank" rel="external">https://docs.python.org/2/library/cgi.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python解析x-www-form-urlencoded数据]]></title>
      <url>https://qianchenglong.github.io/2014/12/03/python%E6%93%8D%E4%BD%9Cx-www-form-urlencoded%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li><code>urlencoded</code>转<code>string</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query_string = <span class="string">'access_token=CB4C8F99D9B3E4AD376E7CF179CFA470&amp;expires_in=7776000&amp;refresh_token=4CCB49CAD66A9506F0621CE8E427F492'</span></span><br><span class="line">data = urlparse.parse_qs(query_string)</span><br><span class="line">access_token = data[<span class="string">'access_token'</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>dict</code>转<code>urlencoded</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;<span class="string">'criterias[]'</span>: [<span class="string">'member'</span>, <span class="string">'issue'</span>]&#125;</span><br><span class="line">urllib.urlencode(params, <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.python.org/2/library/urlparse.html" target="_blank" rel="external">https://docs.python.org/2/library/urlparse.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh常用操作]]></title>
      <url>https://qianchenglong.github.io/2014/12/02/ssh%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="修改密钥对密码"><a href="#修改密钥对密码" class="headerlink" title="修改密钥对密码"></a>修改密钥对密码</h2><pre><code>ssh-keygen -p
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yed使用技巧]]></title>
      <url>https://qianchenglong.github.io/2014/12/02/yed%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<ul>
<li><p>让【节点】自适应【标签】</p>
<pre><code>Tool =&gt; Fit Node to Label
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh常见问题]]></title>
      <url>https://qianchenglong.github.io/2014/12/01/ssh%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<ul>
<li><p>Could not open a connection to your authentication agent.</p>
<p>eval “$(ssh-agent)”</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://unix.stackexchange.com/questions/48863/ssh-add-complains-could-not-open-a-connection-to-your-authentication-agent" target="_blank" rel="external">http://unix.stackexchange.com/questions/48863/ssh-add-complains-could-not-open-a-connection-to-your-authentication-agent</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python管理拓展包]]></title>
      <url>https://qianchenglong.github.io/2014/12/01/python%E7%AE%A1%E7%90%86%E6%8B%93%E5%B1%95%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>pip提供python的包管理操作</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>下载安装脚本<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="external">get-pip.py</a></p>
</li>
<li><p><code>python get-pip.py</code></p>
</li>
<li><p>win下添加<code>C:\Python27-32\Scripts</code>到<code>PATH</code></p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>安装</p>
<pre><code>pip install PACKET_NAME
</code></pre></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="external">https://pip.pypa.io/en/latest/installing.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[替换clover图标]]></title>
      <url>https://qianchenglong.github.io/2014/12/01/%E6%9B%BF%E6%8D%A2clover%E5%9B%BE%E6%A0%87/</url>
      <content type="html"><![CDATA[<ul>
<li><p>使用<code>ResHacker</code>打开<code>clover.dll</code></p>
</li>
<li><p>【操作】=&gt;【替换图标】=&gt; 【选择要替换的图标】=&gt;101</p>
<p><img src="/img/替换clover图标_0.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[快速查看python帮助]]></title>
      <url>https://qianchenglong.github.io/2014/12/01/%E5%BF%AB%E9%80%9F%E6%9F%A5%E7%9C%8Bpython%E5%B8%AE%E5%8A%A9/</url>
      <content type="html"><![CDATA[<h2 id="第一种：命令行使用"><a href="#第一种：命令行使用" class="headerlink" title="第一种：命令行使用"></a>第一种：命令行使用</h2><pre><code>python -m pydoc CONTENT
</code></pre><h2 id="第二种：使用python自包装"><a href="#第二种：使用python自包装" class="headerlink" title="第二种：使用python自包装"></a>第二种：使用<code>python</code>自包装</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>可以在任意路径下执行<code>pydoc CONTENT</code></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li><p>建立脚本文件<code>pydoc.py</code></p>
<pre><code>#!/usr/bin/env python
# encoding: utf-8

import os
import sys

if len(sys.argv) != 2:
    print(&quot;usage:pydoc.py OBJECT&quot;)
    exit(1)

cmd = &apos;python -m pydoc &apos; + sys.argv[1]
# print(cmd)
os.system(cmd)
</code></pre></li>
<li><p>复制到<code>PATH</code>目录下</p>
<p><strong>建议自建目录</strong>(Win:X:/XXX/bin，Linux：/XXX/bin)，添加该目录到<code>PATH</code></p>
<p>优点：</p>
<ol>
<li>容易管理</li>
<li>重装系统或系统损坏，不丢失，下次复用方便</li>
</ol>
</li>
<li><p>【Windows建议】</p>
</li>
</ul>
<p>修改环境变量<code>PATHEXT</code>追加<code>.py</code>，这样直接使用<code>pydoc CONTENT</code>即可，不用每次都输入’.py’！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows下git生成SSH公钥]]></title>
      <url>https://qianchenglong.github.io/2014/12/01/windows%E4%B8%8Bgit%E7%94%9F%E6%88%90SSH%E5%85%AC%E9%92%A5/</url>
      <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li><p><code>cd %HOMEPATH%</code></p>
</li>
<li><p><code>mkdir .ssh</code></p>
</li>
<li><p><code>ssh-keygen -t rsa -C &quot;qian_cheng_long@163.com&quot;</code></p>
<ul>
<li>输入生成文件名(<code>.ssh/rd_rsa</code>)</li>
<li>2次输入密码(空密码可以方便连接)</li>
</ul>
</li>
<li><p>添加到<code>ssh-agent</code></p>
<pre><code>ssh-agent -s
ssh-add ~/.ssh/id_rsa
</code></pre></li>
<li><p>复制到粘贴板</p>
<pre><code>clip &lt; ~/.ssh/id_rsa.pub
</code></pre></li>
<li><p>将<code>.ssh/rd_rsa.pub</code>内容添加到<a href="https://github.com/settings/ssh" target="_blank" rel="external">github</a></p>
</li>
<li><p>测试是否添加成功</p>
<pre><code>ssh -vT git@github.com
</code></pre></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">https://help.github.com/articles/generating-ssh-keys/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MinGW编译wxWidget]]></title>
      <url>https://qianchenglong.github.io/2014/12/01/MinGW%E7%BC%96%E8%AF%91wxWidget/</url>
      <content type="html"><![CDATA[<ul>
<li>WXWIN：源代码根目录</li>
</ul>
<ol>
<li><p>解压源码</p>
</li>
<li><p>进入到<code>%WXWIN%\build\msw</code></p>
</li>
<li><p>清理项目</p>
<pre><code>mingw32-make -f makefile.gcc SHARED=1 UNICODE=1 BUILD=release clean
</code></pre></li>
<li><p>编译</p>
</li>
</ol>
<ul>
<li><p>动态库，发行版</p>
<pre><code>mingw32-make -f makefile.gcc SHARED=1 UNICODE=1 BUILD=release
</code></pre></li>
<li><p>动态库，调试版</p>
<pre><code>mingw32-make -f makefile.gcc SHARED=1 UNICODE=1 BUILD=debug
</code></pre></li>
<li><p>静态库，发行版</p>
<pre><code>mingw32-make -f makefile.gcc SHARED=0 UNICODE=1 BUILD=release
</code></pre></li>
<li><p>静态库，调试版</p>
<pre><code>mingw32-make -f makefile.gcc SHARED=0 UNICODE=1 BUILD=debug
</code></pre><p>  <strong>注</strong>:</p>
<ol>
<li><p>可以添加-j N(N指当前CPU核心数)，加快编译速度</p>
</li>
<li><p>每种版本可以根据需要编译</p>
</li>
<li><p>动态库对应的目录(%WXWIN%\lib\gcc_dll)，静态库对应的目录(%WXWIN%\lib\gcc_lib)</p>
</li>
<li><p>Debug版的库名称会有<code>d</code>后缀，UNICODE版的库名称会有<code>u</code>后缀</p>
</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客添加图片]]></title>
      <url>https://qianchenglong.github.io/2014/12/01/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>markdown中，插入图片的语法为：</p>
<pre><code>![图片名称](链接地址)
</code></pre><ul>
<li><p>使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。</p>
</li>
<li><p>使用微博图床，地址<a href="http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。" target="_blank" rel="external">http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[log4cpp编译安装]]></title>
      <url>https://qianchenglong.github.io/2014/11/11/log4cpp%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://sourceforge.net/projects/log4cpp/files/" target="_blank" rel="external">官网</a></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul>
<li>解压</li>
<li>找到对应工程配置文件(vs2010:msvc10)</li>
<li>打开msvc10.sln</li>
<li>生成log4cppLIB(静态库版本)，debug版和release版</li>
<li>新建目标目录如<code>log4cpp-1.1.1</code></li>
<li>将<code>include</code>目录复制到目标目录下</li>
<li>将生成的lib(<code>log4cppD.lib</code>,<code>log4cppLIB.lib</code>)放到目标目录的子目录<code>lib</code></li>
</ul>
<p>最终目录结构：</p>
<pre><code>└─log4cpp-1.1.1
    ├─include
    │  └─log4cpp
    │
    └─lib
</code></pre><h2 id="配置解决方案属性"><a href="#配置解决方案属性" class="headerlink" title="配置解决方案属性"></a>配置解决方案属性</h2><ul>
<li>【VC++目录】，添加<code>include</code>目录和<code>lib</code>目录</li>
<li>Debug版，添加【附加依赖项】，<code>log4cppD.lib</code></li>
<li>Release版，添加【附加依赖项】，<code>log4cppLIB.lib</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo搭建个人博客]]></title>
      <url>https://qianchenglong.github.io/2014/09/19/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><a href="http://hexo.io/docs/index.html" target="_blank" rel="external">官网文档</a></p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>Node.js<a href="http://nodejs.org/download/" target="_blank" rel="external">官网下载</a></li>
<li>npm<a href="http://nodejs.org/dist/npm/" target="_blank" rel="external">官网下载</a></li>
<li>Git<a href="http://git-scm.com/" target="_blank" rel="external">官网下载</a></li>
</ul>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><pre><code>npm install -g hexo
</code></pre><p><code>-g</code>表示安装到<code>nodejs\node_modules\</code>目录下</p>
<h2 id="建立网站"><a href="#建立网站" class="headerlink" title="建立网站"></a>建立网站</h2><pre><code>hexo init &lt;folder&gt;
cd &lt;folder&gt;
npm install
</code></pre><h2 id="创建Git仓库-备选项：gitcafe"><a href="#创建Git仓库-备选项：gitcafe" class="headerlink" title="创建Git仓库(备选项：gitcafe)"></a>创建Git仓库(备选项：gitcafe)</h2><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul>
<li><p>编辑<code>_config.yml</code></p>
<pre><code>deploy:
  type: github
  repository: https://github.com/zippera/zippera.github.io.git
  branch: master
</code></pre></li>
<li><p>hexo generate</p>
</li>
<li><p>hexo deploy</p>
</li>
</ul>
<h2 id="导航栏添加”关于”"><a href="#导航栏添加”关于”" class="headerlink" title="导航栏添加”关于”"></a>导航栏添加”关于”</h2><ol>
<li>hexo new page “about”</li>
<li>到source/about/index.md编辑内容。</li>
<li><p>在themes/light/_config.yml中，添加如下：</p>
<pre><code>menu:
  关于: /about
</code></pre></li>
</ol>
<h2 id="安装第三方评论系统"><a href="#安装第三方评论系统" class="headerlink" title="安装第三方评论系统"></a>安装第三方评论系统</h2><p>去<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>注册，将ID添加到主题配置文件(_config.yml)</p>
<pre><code>duoshuo_shortname: qianchenglong
</code></pre><h2 id="添加Google-Analytics"><a href="#添加Google-Analytics" class="headerlink" title="添加Google Analytics"></a>添加Google Analytics</h2><p>去<a href="http://www.google.com/analytics" target="_blank" rel="external">Google Analytics</a>注册，配置，将ID添加到主题配置文件(_config.yml)</p>
<pre><code>google_analytics: UA-54976309-1
</code></pre><h2 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h2><h3 id="warning-LF-will-be-replaced-by-CRLF"><a href="#warning-LF-will-be-replaced-by-CRLF" class="headerlink" title="warning: LF will be replaced by CRLF"></a><code>warning: LF will be replaced by CRLF</code></h3><ul>
<li><p>修改git配置文件</p>
<pre><code>git config --global core.autocrlf false
</code></pre></li>
<li><p>删除<code>.deploy</code>和<code>public</code>目录</p>
</li>
<li><p>重新生成</p>
<pre><code>hexo g
hexo d
</code></pre></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">http://zipperary.com/categories/hexo/</a></li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
